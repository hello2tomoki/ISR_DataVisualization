<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="4/19/2018 9:14:15 AM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="W0353342"
  DTS:CreatorName="pdosanjh"
  DTS:DelayValidation="True"
  DTS:DTSID="{4DDE729A-236A-4D57-8FB5-AFEF8261C61A}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="13.0.4561.14"
  DTS:LocaleID="4105"
  DTS:ObjectName="Weekly_Active_Report_Runby_RiskDateOrVersion"
  DTS:ProtectionLevel="0"
  DTS:VersionBuild="298"
  DTS:VersionGUID="{7F7F2C57-9768-4FDF-B2F5-BF0924D13CCE}"
  DTS:VersionMajor="0">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[Source_RM_Asset]"
      DTS:CreationName="OLEDB"
      DTS:DelayValidation="True"
      DTS:DTSID="{AF5433B0-82D9-40D8-9976-6EDD5EE1F51C}"
      DTS:ObjectName="Source_RM_Asset">
      <DTS:PropertyExpression
        DTS:Name="ServerName">@[$Project::Source_ServerName]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=DELTA;Initial Catalog=RM_Asset;Provider=MSOLAP.8;Integrated Security=SSPI;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:PackageParameters>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="11"
      DTS:DTSID="{7DB27AD7-48D3-4B09-B9FA-4205B7CD1A99}"
      DTS:ObjectName="Disable_MDSBatch">
      <DTS:Property
        DTS:DataType="11"
        DTS:Name="ParameterValue">-1</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="11"
      DTS:DTSID="{08C3D4D0-1CB6-4820-8C45-1B14FB39E981}"
      DTS:ObjectName="Disable_MDSClearUnexecutedBatch">
      <DTS:Property
        DTS:DataType="11"
        DTS:Name="ParameterValue">0</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="11"
      DTS:DTSID="{700DB194-AEC2-4703-AEEC-DD0FFB58187F}"
      DTS:ObjectName="Disable_RunBatch">
      <DTS:Property
        DTS:DataType="11"
        DTS:Name="ParameterValue">0</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="3"
      DTS:DTSID="{4FB4797B-4065-4B1B-A59E-0B3B8ED8541A}"
      DTS:ObjectName="Param_BatchID">
      <DTS:Property
        DTS:DataType="3"
        DTS:Name="ParameterValue">0</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="3"
      DTS:Description="0=MergeOptimistic, 1=Insert, 2=MergeOverwrite, 3=Delete, 4=Purge,5=DeleteOverwrite,6=PurgeOverwrite"
      DTS:DTSID="{FD4FA202-2E5F-4C21-AB9E-42B8ED5DDD91}"
      DTS:ObjectName="Param_MDSImportType">
      <DTS:Property
        DTS:DataType="3"
        DTS:Name="ParameterValue">0</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{3048AADF-DCC0-44EA-AA08-3DD3EA21C375}"
      DTS:ObjectName="Param_MDSSourceViewName">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">mdm.RM_Weekly_Active_Risk_Members</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{9381796E-EE73-4EF6-A813-90B9E68FCAAF}"
      DTS:ObjectName="Param_MDSTableName">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">RM_Weekly_Active_Risk_leaf</DTS:Property>
    </DTS:PackageParameter>
  </DTS:PackageParameters>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{1266587B-385F-4011-BE89-DD13297CF3B4}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Current_Date">
      <DTS:VariableValue
        DTS:DataType="8">20190628</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{3BE7A8FA-A7FB-4680-81C8-8071D172853A}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Current_Dates_Query">
      <DTS:VariableValue
        DTS:DataType="8">SELECT [Risk_Date],         Format(CAST([Risk_Date] AS DATE), 'yyyyMMdd') [Current_Date] 	   ,Isnull(cast(Is_Risk_Version AS int),0) Is_Risk_Version FROM [MDS_ISR].[mdm].[RM_Weekly_Active_Risk_Dates_Members] WHERE [Risk_Date] IS NOT NULL ORDER BY [Risk_Date];</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{3C933424-39B3-4714-9FE2-6B2B53041763}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="Current_Date_List">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{AD0FB794-C78F-42AB-9909-DD9E931EBE5D}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="&quot;DEFINE&#xA;    MEASURE varMeasures[IRContributionActiveHDVar] /* This works only at Pool level and excludes cash portfolios from the ranking stage which is not possible with teh existing measure  */&#xA;    =&#xA;        VAR vVectorStatisticName = &quot;+ @[User::StrQuote] + &quot;HDVAR Simulated PnL&quot;+ @[User::StrQuote] + &quot;&#xA;        VAR vVectorStatId =&#xA;            LOOKUPVALUE (&#xA;                RiskStatistic_Vector[StatisticID],&#xA;                RiskStatistic_Vector[VectorStatisticName], vVectorStatisticName&#xA;            )&#xA;        VAR vRiskVersionKeySelected =&#xA;            IF (&#xA;                HASONEVALUE ( RiskVersion[RiskVersionKey] ),&#xA;                VALUES ( RiskVersion[RiskVersionKey] ),&#xA;                19000101001&#xA;            )&#xA;        VAR vContrFilterValue =&#xA;            VALUES ( FundItems[PoolFundCode] )&#xA;        VAR vHDWeights =&#xA;            CALCULATETABLE ( HDVarWeights, HDVarWeights[SampleWeight] &gt; 0 )&#xA;        VAR vMaxHDRank =&#xA;            CALCULATE ( MAX ( HDVarWeights[SampleRank] ), HDVarWeights[SampleWeight] &gt; 0 )&#xA;        VAR vScenarios =&#xA;            FILTER (&#xA;                ALL ( Scenario ),&#xA;                Scenario[riskVersionKey] = vRiskVersionKeySelected&#xA;                    &amp;&amp; Scenario[StatisticId] = vVectorStatId&#xA;                    &amp;&amp; Scenario[ScenarioSeq] &lt;= 1300&#xA;            )&#xA;        VAR vIsPortfolioLeaf =&#xA;            CALCULATE ( [VariantIsPortfolioLeaf] )&#xA;        RETURN&#xA;            /* IN the ranking part of the functions below, we  use selectively the asset or portfolio level stat   */&#xA;            IF (&#xA;                [IsContrLeaf] = 0,&#xA;                BLANK (),&#xA;                SUMX (&#xA;                    TOPN (&#xA;                        vMaxHDRank,&#xA;                        SUMMARIZE (&#xA;                            vScenarios,&#xA;                            Scenario[ScenarioSeq],&#xA;                            &quot;+ @[User::StrQuote] + &quot;Cell&quot;+ @[User::StrQuote] + &quot;, [ActiveVectorStat(PfLevel)],&#xA;                            &quot;+ @[User::StrQuote] + &quot;ScenarioRank&quot;+ @[User::StrQuote] + &quot;, RANKX (&#xA;                                vScenarios,&#xA;                                - CALCULATE (&#xA;                                    [ActiveVectorStat(PfLevel)],&#xA;                                    ALLEXCEPT ( FundItems, FundItems[PoolFundCode] ),&#xA;                                    FundItems[PoolFundCode] = vContrFilterValue,&#xA;                                    FundItems[IsCash] = &quot;+ @[User::StrQuote] + &quot;N&quot;+ @[User::StrQuote] + &quot;,&#xA;                                    ALLEXCEPT ( PortfolioLevelPositionsForAllTreeItems, FundItems[Iscash] )&#xA;                                )&#xA;                            )&#xA;                        ),&#xA;                        [ScenarioRank], ASC&#xA;                    ),&#xA;                    [Cell]&#xA;                        * LOOKUPVALUE (&#xA;                            HDVarWeights[SampleWeight],&#xA;                            HDVarWeights[SampleRank], [ScenarioRank]&#xA;                        )&#xA;                ) * [DisplayVarSign]&#xA;            )&#xA;EVALUATE &#xA;VAR vRiskDateKeyCurrent =&quot; + @[User::Current_Date] +&#xA;&quot; VAR vRiskVersionKeyCurrent =&#xA;    CALCULATE (&#xA;        MAX ( Riskversion[RiskVersionKey] ),&#xA;        Riskversion[RiskDateKey] = vRiskDateKeyCurrent&#xA;    )&#xA;VAR vFilteredFund =&#xA;    ADDCOLUMNS (&#xA;        FILTER (&#xA;            FundItems,&#xA;            ( FundItems[AssetClass] = &quot;+ @[User::StrQuote] + &quot;EQUITY&quot;+ @[User::StrQuote] + &quot;&#xA;                || FundItems[AssetClass] = &quot;+ @[User::StrQuote] + &quot;FIXED INCOME&quot;+ @[User::StrQuote] + &quot; )&#xA;                &amp;&amp; ( FundItems[RiskVersionKey] = vRiskVersionKeyCurrent )&#xA;                &amp;&amp; ( FundItems[PoolFundCode] &lt;&gt; &quot;+ @[User::StrQuote] + &quot;RISKNEUFR&quot;+ @[User::StrQuote] + &quot;&#xA;                &amp;&amp; FundItems[PoolFundCode] &lt;&gt; &quot;+ @[User::StrQuote] + &quot;RISKNEUST&quot;+ @[User::StrQuote] + &quot;&#xA;                &amp;&amp; FundItems[PoolFundCode] &lt;&gt; &quot;+ @[User::StrQuote] + &quot;RUMCA&quot;+ @[User::StrQuote] + &quot;&#xA;                &amp;&amp; FundItems[PoolFundCode] &lt;&gt; &quot;+ @[User::StrQuote] + &quot;E0D0125&quot;+ @[User::StrQuote] + &quot; )&#xA;                &amp;&amp; FundItems[IsCash] = &quot;+ @[User::StrQuote] + &quot;N&quot;+ @[User::StrQuote] + &quot;&#xA;                &amp;&amp; ( FundItems[RiskPortfolioCode] &lt;&gt; &quot;+ @[User::StrQuote] + &quot;CE6103&quot;+ @[User::StrQuote] + &quot;&#xA;                &amp;&amp; FundItems[RiskPortfolioCode] &lt;&gt; &quot;+ @[User::StrQuote] + &quot;ME170E&quot;+ @[User::StrQuote] + &quot;&#xA;                &amp;&amp; FundItems[RiskPortfolioCode] &lt;&gt; &quot;+ @[User::StrQuote] + &quot;ME170F&quot;+ @[User::StrQuote] + &quot;&#xA;                &amp;&amp; FundItems[RiskPortfolioCode] &lt;&gt; &quot;+ @[User::StrQuote] + &quot;ME170K&quot;+ @[User::StrQuote] + &quot;&#xA;                &amp;&amp; FundItems[RiskPortfolioCode] &lt;&gt; &quot;+ @[User::StrQuote] + &quot;ME170L&quot;+ @[User::StrQuote] + &quot;&#xA;                &amp;&amp; FundItems[RiskPortfolioCode] &lt;&gt; &quot;+ @[User::StrQuote] + &quot;ME170UIN&quot;+ @[User::StrQuote] + &quot;&#xA;                &amp;&amp; FundItems[RiskPortfolioCode] &lt;&gt; &quot;+ @[User::StrQuote] + &quot;ME0027&quot;+ @[User::StrQuote] + &quot;&#xA;                &amp;&amp; FundItems[RiskPortfolioCode] &lt;&gt; &quot;+ @[User::StrQuote] + &quot;ME173D&quot;+ @[User::StrQuote] + &quot; )&#xA;        ),&#xA;        &quot;+ @[User::StrQuote] + &quot;PoolFundName2&quot;+ @[User::StrQuote] + &quot;, FIRSTNONBLANK ( FundItems[PoolFundName], 1 ),&#xA;        &quot;+ @[User::StrQuote] + &quot;BlankValue&quot;+ @[User::StrQuote] + &quot;, BLANK ()&#xA;    )&#xA;VAR vUnScaledResults =&#xA;    UNION (&#xA;        CALCULATETABLE (&#xA;            ADDCOLUMNS (&#xA;                SUMMARIZE (&#xA;                    vFilteredFund,&#xA;                    [AssetClass],&#xA;                    [SubAssetClass],&#xA;                    [PoolFundName],&#xA;                    [RiskPortfolioCode],&#xA;                    [RiskPortfolioName]&#xA;                ),&#xA;                &quot;+ @[User::StrQuote] + &quot;MarketValueCurrent&quot;+ @[User::StrQuote] + &quot;, CALCULATE ( [PV], riskversion[RiskVersionKey] = vRiskVersionKeyCurrent ),&#xA;                &quot;+ @[User::StrQuote] + &quot;PfActiveRiskPCt_Current&quot;+ @[User::StrQuote] + &quot;, DIVIDE (&#xA;                    CALCULATE (&#xA;                        [StandaloneActiveHDVar],&#xA;                        ActiveBenchmark[BenchmarkType] = &quot;+ @[User::StrQuote] + &quot;Rollup&quot;+ @[User::StrQuote] + &quot;,&#xA;                        riskversion[RiskVersionKey] = vRiskVersionKeyCurrent&#xA;                    ),&#xA;                    CALCULATE ( [PV], riskversion[RiskVersionKey] = vRiskVersionKeyCurrent )&#xA;                ),&#xA;                &quot;+ @[User::StrQuote] + &quot;PoolActiveHDVar_Current&quot;+ @[User::StrQuote] + &quot;, DIVIDE (&#xA;                    CALCULATE (&#xA;                        [StandaloneActiveHDVar],&#xA;                        ActiveBenchmark[BenchmarkType] = &quot;+ @[User::StrQuote] + &quot;Rolldown&quot;+ @[User::StrQuote] + &quot;,&#xA;                        riskversion[RiskVersionKey] = vRiskVersionKeyCurrent&#xA;                    ),&#xA;                    CALCULATE ( [PV], riskversion[RiskVersionKey] = vRiskVersionKeyCurrent )&#xA;                ),&#xA;                /* Here we need to override the filter context to get the Pooltotal to be the denominator */&#xA;                &quot;+ @[User::StrQuote] + &quot;PoolContributionToActivePct_Current&quot;+ @[User::StrQuote] + &quot;, DIVIDE (&#xA;                    CALCULATE (&#xA;                        [IRContributionActiveHDVar],&#xA;                        ActiveBenchmark[BenchmarkType] = &quot;+ @[User::StrQuote] + &quot;Rolldown&quot;+ @[User::StrQuote] + &quot;,&#xA;                        riskversion[RiskVersionKey] = vRiskVersionKeyCurrent,&#xA;                        --      FundItems[IsCash] = &quot;+ @[User::StrQuote] + &quot;N&quot;+ @[User::StrQuote] + &quot;,&#xA;                        varContributionBy[Variant] = &quot;+ @[User::StrQuote] + &quot;PoolFund&quot;+ @[User::StrQuote] + &quot;&#xA;                    ),&#xA;                    CALCULATE (&#xA;                        [IRContributionActiveHDVar],&#xA;                        ActiveBenchmark[BenchmarkType] = &quot;+ @[User::StrQuote] + &quot;Rolldown&quot;+ @[User::StrQuote] + &quot;,&#xA;                        riskversion[RiskVersionKey] = vRiskVersionKeyCurrent,&#xA;                        --  FundItems[IsCash] = &quot;+ @[User::StrQuote] + &quot;N&quot;+ @[User::StrQuote] + &quot;,&#xA;                        varContributionBy[Variant] = &quot;+ @[User::StrQuote] + &quot;PoolFund&quot;+ @[User::StrQuote] + &quot;,&#xA;                        FILTER (&#xA;                            ALLSELECTED ( FundItems ),&#xA;                            [PoolFundName] = EARLIER ( [PoolFundName] )&#xA;                        )&#xA;                    )&#xA;                ),&#xA;                &quot;+ @[User::StrQuote] + &quot;PortfolioBmk&quot;+ @[User::StrQuote] + &quot;, FIRSTNONBLANK (fundItems[BmkCodeRollup], 1 ),&#xA;                &quot;+ @[User::StrQuote] + &quot;PoolFundBmk&quot;+ @[User::StrQuote] + &quot;, BLANK (),&#xA;                &quot;+ @[User::StrQuote] + &quot;AggLevel&quot;+ @[User::StrQuote] + &quot;, &quot;+ @[User::StrQuote] + &quot;Pf&quot;+ @[User::StrQuote] + &quot;&#xA;            ),&#xA;            varRiskType[VarRiskType] = &quot;+ @[User::StrQuote] + &quot;All Risks&quot;+ @[User::StrQuote] + &quot;,&#xA;            ShowValuesAs[ScaleName] = &quot;+ @[User::StrQuote] + &quot;Millions&quot;+ @[User::StrQuote] + &quot;,&#xA;            ShowVarSign[VarSign] = &quot;+ @[User::StrQuote] + &quot;Positive&quot;+ @[User::StrQuote] + &quot;,&#xA;    &#xA;            riskversion[RiskVersionKey] = vRiskVersionKeyCurrent,&#xA;            OR ( FundItems[AssetClass] = &quot;+ @[User::StrQuote] + &quot;EQUITY&quot;+ @[User::StrQuote] + &quot;, FundItems[AssetClass] = &quot;+ @[User::StrQuote] + &quot;FIXED INCOME&quot;+ @[User::StrQuote] + &quot; )&#xA;        ),&#xA;        CALCULATETABLE (&#xA;            ADDCOLUMNS (&#xA;                SUMMARIZE (&#xA;                    vFilteredFund,&#xA;                    [AssetClass],&#xA;                    [SubAssetClass],&#xA;                    [PoolFundName],&#xA;                    [BlankValue],&#xA;                    [PoolFundname2]&#xA;                ),&#xA;                &quot;+ @[User::StrQuote] + &quot;MarketValueCurrent&quot;+ @[User::StrQuote] + &quot;, CALCULATE (&#xA;                    [PV],&#xA;                    riskversion[RiskVersionKey] = vRiskVersionKeyCurrent,&#xA;                    FundItems[IsCash] = &quot;+ @[User::StrQuote] + &quot;N&quot;+ @[User::StrQuote] + &quot;,&#xA;                    ALL ( FundItems[IsAllocation] )&#xA;                ),&#xA;                /* At pool level we are taking the pool level standalone, not sum of portfolios  */&#xA;                &quot;+ @[User::StrQuote] + &quot;PfActiveRiskPct_Current&quot;+ @[User::StrQuote] + &quot;, DIVIDE (&#xA;                    CALCULATE (&#xA;                        [StandaloneActiveHDVar],&#xA;                        ActiveBenchmark[BenchmarkType] = &quot;+ @[User::StrQuote] + &quot;Rollup&quot;+ @[User::StrQuote] + &quot;,&#xA;                        riskversion[RiskVersionKey] = vRiskVersionKeyCurrent,&#xA;                        FundItems[IsCash] = &quot;+ @[User::StrQuote] + &quot;N&quot;+ @[User::StrQuote] + &quot;,&#xA;                        ALL ( FundItems[IsAllocation] )&#xA;                    ),&#xA;                    CALCULATE (&#xA;                        [PV],&#xA;                        riskversion[RiskVersionKey] = vRiskVersionKeyCurrent,&#xA;                        FundItems[IsCash] = &quot;+ @[User::StrQuote] + &quot;N&quot;+ @[User::StrQuote] + &quot;,&#xA;                        ALL ( FundItems[IsAllocation] )&#xA;                    )&#xA;                ),&#xA;                &quot;+ @[User::StrQuote] + &quot;PoolActiveVarPct_Current&quot;+ @[User::StrQuote] + &quot;, DIVIDE (&#xA;                    CALCULATE (&#xA;                        [StandaloneActiveHDVar],&#xA;                        ActiveBenchmark[BenchmarkType] = &quot;+ @[User::StrQuote] + &quot;Rolldown&quot;+ @[User::StrQuote] + &quot;,&#xA;                        riskversion[RiskVersionKey] = vRiskVersionKeyCurrent,&#xA;                        FundItems[IsCash] = &quot;+ @[User::StrQuote] + &quot;N&quot;+ @[User::StrQuote] + &quot;,&#xA;                        ALL ( FundItems[IsAllocation] )&#xA;                    ),&#xA;                    CALCULATE (&#xA;                        [PV],&#xA;                        riskversion[RiskVersionKey] = vRiskVersionKeyCurrent,&#xA;                        FundItems[IsCash] = &quot;+ @[User::StrQuote] + &quot;N&quot;+ @[User::StrQuote] + &quot;,&#xA;                        ALL ( FundItems[IsAllocation] )&#xA;                    )&#xA;                ),&#xA;                &quot;+ @[User::StrQuote] + &quot;PoolContributionToActivePct_Current&quot;+ @[User::StrQuote] + &quot;, 1,&#xA;                &quot;+ @[User::StrQuote] + &quot;PortfolioBmk&quot;+ @[User::StrQuote] + &quot;, BLANK (),&#xA;                &quot;+ @[User::StrQuote] + &quot;PoolFundBmk&quot;+ @[User::StrQuote] + &quot;, FIRSTNONBLANK ( fundItems[BmkCodeRolldown], 1 ),&#xA;                &quot;+ @[User::StrQuote] + &quot;AggLevel&quot;+ @[User::StrQuote] + &quot;, &quot;+ @[User::StrQuote] + &quot;Pool&quot;+ @[User::StrQuote] + &quot;&#xA;            ),&#xA;            varRiskType[VarRiskType] = &quot;+ @[User::StrQuote] + &quot;All Risks&quot;+ @[User::StrQuote] + &quot;,&#xA;            ShowValuesAs[ScaleName] = &quot;+ @[User::StrQuote] + &quot;Millions&quot;+ @[User::StrQuote] + &quot;,&#xA;            ShowVarSign[VarSign] = &quot;+ @[User::StrQuote] + &quot;Positive&quot;+ @[User::StrQuote] + &quot;,&#xA;            riskversion[RiskVersionKey] = vRiskVersionKeyCurrent,&#xA;            OR ( FundItems[AssetClass] = &quot;+ @[User::StrQuote] + &quot;EQUITY&quot;+ @[User::StrQuote] + &quot;, FundItems[AssetClass] = &quot;+ @[User::StrQuote] + &quot;FIXED INCOME&quot;+ @[User::StrQuote] + &quot; )&#xA;        )&#xA;    )&#xA;VAR vScaledResults =&#xA;    ADDCOLUMNS (&#xA;        vUnScaledResults,&#xA;        &quot;+ @[User::StrQuote] + &quot;PfActiveRiskPct_CurrentScaled&quot;+ @[User::StrQuote] + &quot;, IF (&#xA;            ABS ( [PfActiveRiskPct_Current] ) &gt; 1,&#xA;            DIVIDE (&#xA;                [PfActiveRiskPct_Current] * [MarketValueCurrent]&#xA;                    * SQRT ( 252 / 3 ),&#xA;                [MarketValueCurrent]&#xA;            ),&#xA;            SIGN ( [PfActiveRiskPct_Current] )&#xA;                * (&#xA;                    1&#xA;                        - POWER ( 1 - ABS ( [PfActiveRiskPct_Current] ), SQRT ( 252 / 3 ) )&#xA;                )&#xA;        ),&#xA;        &quot;+ @[User::StrQuote] + &quot;PoolActiveVarPct_CurrentScaled&quot;+ @[User::StrQuote] + &quot;, IF (&#xA;            ABS ( [PoolActiveHDVar_Current] ) &gt; 1,&#xA;            DIVIDE (&#xA;                [PoolActiveHDVar_Current] * [MarketValueCurrent]&#xA;                    * SQRT ( 252 / 3 ),&#xA;                [MarketValueCurrent]&#xA;            ),&#xA;            SIGN ( [PoolActiveHDVar_Current] )&#xA;                * (&#xA;                    1&#xA;                        - POWER ( 1 - ABS ( [PoolActiveHDVar_Current] ), SQRT ( 252 / 3 ) )&#xA;                )&#xA;        )&#xA;    ) /* finally , re-alias scaled cols back to regular to minimize impact on SSRS  */&#xA;RETURN&#xA;    SELECTCOLUMNS (&#xA;        vScaledResults,&#xA;        &quot;+ @[User::StrQuote] + &quot;AssetClass&quot;+ @[User::StrQuote] + &quot;, [AssetClass],&#xA;        &quot;+ @[User::StrQuote] + &quot;SubAssetClass&quot;+ @[User::StrQuote] + &quot;, [SubAssetClass],&#xA;        &quot;+ @[User::StrQuote] + &quot;PoolFundName&quot;+ @[User::StrQuote] + &quot;, [PoolFundName],&#xA;        &quot;+ @[User::StrQuote] + &quot;RiskPortfolioCode&quot;+ @[User::StrQuote] + &quot;, [RiskPortfolioCode],&#xA;        &quot;+ @[User::StrQuote] + &quot;RiskPortfolioName&quot;+ @[User::StrQuote] + &quot;, [RiskPortfolioName],&#xA;        &quot;+ @[User::StrQuote] + &quot;MarketValueCurrent&quot;+ @[User::StrQuote] + &quot;, [MarketValueCurrent],&#xA;        &quot;+ @[User::StrQuote] + &quot;PfActiveRiskPCt_Current&quot;+ @[User::StrQuote] + &quot;, [PfActiveRiskPct_CurrentScaled],&#xA;        &quot;+ @[User::StrQuote] + &quot;PoolActiveHDVar_Current&quot;+ @[User::StrQuote] + &quot;, [PoolActiveVarPct_CurrentScaled],&#xA;        &quot;+ @[User::StrQuote] + &quot;PoolContributionToActivePct_Current&quot;+ @[User::StrQuote] + &quot;, [PoolContributionToActivePct_Current],&#xA;        &quot;+ @[User::StrQuote] + &quot;PortfolioBmk&quot;+ @[User::StrQuote] + &quot;, [PortfolioBmk],&#xA;        &quot;+ @[User::StrQuote] + &quot;PoolFundBmk&quot;+ @[User::StrQuote] + &quot;, [PoolFundBmk],&#xA;        &quot;+ @[User::StrQuote] + &quot;AggLevel&quot;+ @[User::StrQuote] + &quot;, [AggLevel]&#xA;    )&#xA;ORDER BY&#xA;    [AssetClass],&#xA;    [SubAssetClass],&#xA;    [PoolFundName],&#xA;    [RiskPortfolioCode],&#xA;    [RiskPortfolioName]&quot;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="DAX_Orginal">
      <DTS:VariableValue
        DTS:DataType="8">DEFINE
    MEASURE varMeasures[IRContributionActiveHDVar] /* This works only at Pool level and excludes cash portfolios from the ranking stage which is not possible with teh existing measure  */
    =
        VAR vVectorStatisticName = "HDVAR Simulated PnL"
        VAR vVectorStatId =
            LOOKUPVALUE (
                RiskStatistic_Vector[StatisticID],
                RiskStatistic_Vector[VectorStatisticName], vVectorStatisticName
            )
        VAR vRiskVersionKeySelected =
            IF (
                HASONEVALUE ( RiskVersion[RiskVersionKey] ),
                VALUES ( RiskVersion[RiskVersionKey] ),
                19000101001
            )
        VAR vContrFilterValue =
            VALUES ( FundItems[PoolFundCode] )
        VAR vHDWeights =
            CALCULATETABLE ( HDVarWeights, HDVarWeights[SampleWeight] &gt; 0 )
        VAR vMaxHDRank =
            CALCULATE ( MAX ( HDVarWeights[SampleRank] ), HDVarWeights[SampleWeight] &gt; 0 )
        VAR vScenarios =
            FILTER (
                ALL ( Scenario ),
                Scenario[riskVersionKey] = vRiskVersionKeySelected
                    &amp;&amp; Scenario[StatisticId] = vVectorStatId
                    &amp;&amp; Scenario[ScenarioSeq] &lt;= 1300
            )
        VAR vIsPortfolioLeaf =
            CALCULATE ( [VariantIsPortfolioLeaf] )
        RETURN
            /* IN the ranking part of the functions below, we  use selectively the asset or portfolio level stat   */
            IF (
                [IsContrLeaf] = 0,
                BLANK (),
                SUMX (
                    TOPN (
                        vMaxHDRank,
                        SUMMARIZE (
                            vScenarios,
                            Scenario[ScenarioSeq],
                            "Cell", [ActiveVectorStat(PfLevel)],
                            "ScenarioRank", RANKX (
                                vScenarios,
                                - CALCULATE (
                                    [ActiveVectorStat(PfLevel)],
                                    ALLEXCEPT ( FundItems, FundItems[PoolFundCode] ),
                                    FundItems[PoolFundCode] = vContrFilterValue,
                                    FundItems[IsCash] = "N",
                                    ALLEXCEPT ( PortfolioLevelPositionsForAllTreeItems, FundItems[Iscash] )
                                )
                            )
                        ),
                        [ScenarioRank], ASC
                    ),
                    [Cell]
                        * LOOKUPVALUE (
                            HDVarWeights[SampleWeight],
                            HDVarWeights[SampleRank], [ScenarioRank]
                        )
                ) * [DisplayVarSign]
            )
EVALUATE 
VAR vRiskDateKeyCurrent =20190628 VAR vRiskVersionKeyCurrent =
    CALCULATE (
        MAX ( Riskversion[RiskVersionKey] ),
        Riskversion[RiskDateKey] = vRiskDateKeyCurrent
    )
VAR vFilteredFund =
    ADDCOLUMNS (
        FILTER (
            FundItems,
            ( FundItems[AssetClass] = "EQUITY"
                || FundItems[AssetClass] = "FIXED INCOME" )
                &amp;&amp; ( FundItems[RiskVersionKey] = vRiskVersionKeyCurrent )
                &amp;&amp; ( FundItems[PoolFundCode] &lt;&gt; "RISKNEUFR"
                &amp;&amp; FundItems[PoolFundCode] &lt;&gt; "RISKNEUST"
                &amp;&amp; FundItems[PoolFundCode] &lt;&gt; "RUMCA"
                &amp;&amp; FundItems[PoolFundCode] &lt;&gt; "E0D0125" )
                &amp;&amp; FundItems[IsCash] = "N"
                &amp;&amp; ( FundItems[RiskPortfolioCode] &lt;&gt; "CE6103"
                &amp;&amp; FundItems[RiskPortfolioCode] &lt;&gt; "ME170E"
                &amp;&amp; FundItems[RiskPortfolioCode] &lt;&gt; "ME170F"
                &amp;&amp; FundItems[RiskPortfolioCode] &lt;&gt; "ME170K"
                &amp;&amp; FundItems[RiskPortfolioCode] &lt;&gt; "ME170L"
                &amp;&amp; FundItems[RiskPortfolioCode] &lt;&gt; "ME170UIN"
                &amp;&amp; FundItems[RiskPortfolioCode] &lt;&gt; "ME0027"
                &amp;&amp; FundItems[RiskPortfolioCode] &lt;&gt; "ME173D" )
        ),
        "PoolFundName2", FIRSTNONBLANK ( FundItems[PoolFundName], 1 ),
        "BlankValue", BLANK ()
    )
VAR vUnScaledResults =
    UNION (
        CALCULATETABLE (
            ADDCOLUMNS (
                SUMMARIZE (
                    vFilteredFund,
                    [AssetClass],
                    [SubAssetClass],
                    [PoolFundName],
                    [RiskPortfolioCode],
                    [RiskPortfolioName]
                ),
                "MarketValueCurrent", CALCULATE ( [PV], riskversion[RiskVersionKey] = vRiskVersionKeyCurrent ),
                "PfActiveRiskPCt_Current", DIVIDE (
                    CALCULATE (
                        [StandaloneActiveHDVar],
                        ActiveBenchmark[BenchmarkType] = "Rollup",
                        riskversion[RiskVersionKey] = vRiskVersionKeyCurrent
                    ),
                    CALCULATE ( [PV], riskversion[RiskVersionKey] = vRiskVersionKeyCurrent )
                ),
                "PoolActiveHDVar_Current", DIVIDE (
                    CALCULATE (
                        [StandaloneActiveHDVar],
                        ActiveBenchmark[BenchmarkType] = "Rolldown",
                        riskversion[RiskVersionKey] = vRiskVersionKeyCurrent
                    ),
                    CALCULATE ( [PV], riskversion[RiskVersionKey] = vRiskVersionKeyCurrent )
                ),
                /* Here we need to override the filter context to get the Pooltotal to be the denominator */
                "PoolContributionToActivePct_Current", DIVIDE (
                    CALCULATE (
                        [IRContributionActiveHDVar],
                        ActiveBenchmark[BenchmarkType] = "Rolldown",
                        riskversion[RiskVersionKey] = vRiskVersionKeyCurrent,
                        --      FundItems[IsCash] = "N",
                        varContributionBy[Variant] = "PoolFund"
                    ),
                    CALCULATE (
                        [IRContributionActiveHDVar],
                        ActiveBenchmark[BenchmarkType] = "Rolldown",
                        riskversion[RiskVersionKey] = vRiskVersionKeyCurrent,
                        --  FundItems[IsCash] = "N",
                        varContributionBy[Variant] = "PoolFund",
                        FILTER (
                            ALLSELECTED ( FundItems ),
                            [PoolFundName] = EARLIER ( [PoolFundName] )
                        )
                    )
                ),
                "PortfolioBmk", FIRSTNONBLANK (fundItems[BmkCodeRollup], 1 ),
                "PoolFundBmk", BLANK (),
                "AggLevel", "Pf"
            ),
            varRiskType[VarRiskType] = "All Risks",
            ShowValuesAs[ScaleName] = "Millions",
            ShowVarSign[VarSign] = "Positive",
    
            riskversion[RiskVersionKey] = vRiskVersionKeyCurrent,
            OR ( FundItems[AssetClass] = "EQUITY", FundItems[AssetClass] = "FIXED INCOME" )
        ),
        CALCULATETABLE (
            ADDCOLUMNS (
                SUMMARIZE (
                    vFilteredFund,
                    [AssetClass],
                    [SubAssetClass],
                    [PoolFundName],
                    [BlankValue],
                    [PoolFundname2]
                ),
                "MarketValueCurrent", CALCULATE (
                    [PV],
                    riskversion[RiskVersionKey] = vRiskVersionKeyCurrent,
                    FundItems[IsCash] = "N",
                    ALL ( FundItems[IsAllocation] )
                ),
                /* At pool level we are taking the pool level standalone, not sum of portfolios  */
                "PfActiveRiskPct_Current", DIVIDE (
                    CALCULATE (
                        [StandaloneActiveHDVar],
                        ActiveBenchmark[BenchmarkType] = "Rollup",
                        riskversion[RiskVersionKey] = vRiskVersionKeyCurrent,
                        FundItems[IsCash] = "N",
                        ALL ( FundItems[IsAllocation] )
                    ),
                    CALCULATE (
                        [PV],
                        riskversion[RiskVersionKey] = vRiskVersionKeyCurrent,
                        FundItems[IsCash] = "N",
                        ALL ( FundItems[IsAllocation] )
                    )
                ),
                "PoolActiveVarPct_Current", DIVIDE (
                    CALCULATE (
                        [StandaloneActiveHDVar],
                        ActiveBenchmark[BenchmarkType] = "Rolldown",
                        riskversion[RiskVersionKey] = vRiskVersionKeyCurrent,
                        FundItems[IsCash] = "N",
                        ALL ( FundItems[IsAllocation] )
                    ),
                    CALCULATE (
                        [PV],
                        riskversion[RiskVersionKey] = vRiskVersionKeyCurrent,
                        FundItems[IsCash] = "N",
                        ALL ( FundItems[IsAllocation] )
                    )
                ),
                "PoolContributionToActivePct_Current", 1,
                "PortfolioBmk", BLANK (),
                "PoolFundBmk", FIRSTNONBLANK ( fundItems[BmkCodeRolldown], 1 ),
                "AggLevel", "Pool"
            ),
            varRiskType[VarRiskType] = "All Risks",
            ShowValuesAs[ScaleName] = "Millions",
            ShowVarSign[VarSign] = "Positive",
            riskversion[RiskVersionKey] = vRiskVersionKeyCurrent,
            OR ( FundItems[AssetClass] = "EQUITY", FundItems[AssetClass] = "FIXED INCOME" )
        )
    )
VAR vScaledResults =
    ADDCOLUMNS (
        vUnScaledResults,
        "PfActiveRiskPct_CurrentScaled", IF (
            ABS ( [PfActiveRiskPct_Current] ) &gt; 1,
            DIVIDE (
                [PfActiveRiskPct_Current] * [MarketValueCurrent]
                    * SQRT ( 252 / 3 ),
                [MarketValueCurrent]
            ),
            SIGN ( [PfActiveRiskPct_Current] )
                * (
                    1
                        - POWER ( 1 - ABS ( [PfActiveRiskPct_Current] ), SQRT ( 252 / 3 ) )
                )
        ),
        "PoolActiveVarPct_CurrentScaled", IF (
            ABS ( [PoolActiveHDVar_Current] ) &gt; 1,
            DIVIDE (
                [PoolActiveHDVar_Current] * [MarketValueCurrent]
                    * SQRT ( 252 / 3 ),
                [MarketValueCurrent]
            ),
            SIGN ( [PoolActiveHDVar_Current] )
                * (
                    1
                        - POWER ( 1 - ABS ( [PoolActiveHDVar_Current] ), SQRT ( 252 / 3 ) )
                )
        )
    ) /* finally , re-alias scaled cols back to regular to minimize impact on SSRS  */
RETURN
    SELECTCOLUMNS (
        vScaledResults,
        "AssetClass", [AssetClass],
        "SubAssetClass", [SubAssetClass],
        "PoolFundName", [PoolFundName],
        "RiskPortfolioCode", [RiskPortfolioCode],
        "RiskPortfolioName", [RiskPortfolioName],
        "MarketValueCurrent", [MarketValueCurrent],
        "PfActiveRiskPCt_Current", [PfActiveRiskPct_CurrentScaled],
        "PoolActiveHDVar_Current", [PoolActiveVarPct_CurrentScaled],
        "PoolContributionToActivePct_Current", [PoolContributionToActivePct_Current],
        "PortfolioBmk", [PortfolioBmk],
        "PoolFundBmk", [PoolFundBmk],
        "AggLevel", [AggLevel]
    )
ORDER BY
    [AssetClass],
    [SubAssetClass],
    [PoolFundName],
    [RiskPortfolioCode],
    [RiskPortfolioName]</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{970A127D-B956-41C3-8210-621B4A491813}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="DAX_Pool_Exclude">
      <DTS:VariableValue
        DTS:DataType="8">&amp;&amp;  (FundItems[PoolFundCode] &lt;&gt;"E0D0125")</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{E016C193-0E5A-460D-9E7A-CBA092271E4A}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="&quot;DECLARE @DAX_Pool_Exclude  VARCHAR(1000) ;&#xA;;With  DAX_Pool_Exclude &#xA;As&#xA;(&#xA;Select Distinct DAX_Pool_Exclude&#xA; from  [mdm].RM_Weekly_Active_Name_Mapping_Members&#xA; Where  DAX_Pool_Exclude is not null&#xA;&#xA; ) &#xA;&#xA;&#xA;&#xA;SELECT @DAX_Pool_Exclude  = COALESCE(@DAX_Pool_Exclude + ' &amp;&amp;  FundItems[PoolFundCode] &lt;&gt; &quot; +@[User::StrQuote]+ &quot;', '&quot;+@[User::StrQuote]+ &quot;') + DAX_Pool_Exclude + '&quot;+@[User::StrQuote]+&quot;'&#xA;FROM  DAX_Pool_Exclude &#xA;&#xA;Set @DAX_Pool_Exclude  = '&amp;&amp; ( FundItems[PoolFundCode] &lt;&gt;' +  @DAX_Pool_Exclude +')'&#xA;Select @DAX_Pool_Exclude&quot;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="DAX_Pool_Exclude_Query">
      <DTS:VariableValue
        DTS:DataType="8">DECLARE @DAX_Pool_Exclude  VARCHAR(1000) ;
;With  DAX_Pool_Exclude 
As
(
Select Distinct DAX_Pool_Exclude
 from  [mdm].RM_Weekly_Active_Name_Mapping_Members
 Where  DAX_Pool_Exclude is not null

 ) 



SELECT @DAX_Pool_Exclude  = COALESCE(@DAX_Pool_Exclude + ' &amp;&amp;  FundItems[PoolFundCode] &lt;&gt; "', '"') + DAX_Pool_Exclude + '"'
FROM  DAX_Pool_Exclude 

Set @DAX_Pool_Exclude  = '&amp;&amp; ( FundItems[PoolFundCode] &lt;&gt;' +  @DAX_Pool_Exclude +')'
Select @DAX_Pool_Exclude</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{29D503EF-BB3A-4942-A4EF-8F7A97F34DB0}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="DAX_Portfolio_Exclude">
      <DTS:VariableValue
        DTS:DataType="8">&amp;&amp;  (FundItems[RiskPortfolioCode] &lt;&gt;"CE6103")</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{7B78BF06-55E9-4ADA-BD99-F5131B734715}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="&quot;DECLARE @DAX_Portfolio_Exclude  VARCHAR(1000) ;&#xA;With  DAX_Portfolio_Exclude &#xA;As&#xA;(&#xA;Select Distinct DAX_Portfolio_Exclude&#xA; from  [mdm].RM_Weekly_Active_Name_Mapping_Members&#xA; Where  DAX_Portfolio_Exclude is not null&#xA;&#xA; ) &#xA;&#xA;&#xA;&#xA;SELECT @DAX_Portfolio_Exclude  = COALESCE(@DAX_Portfolio_Exclude + ' &amp;&amp;  FundItems[RiskPortfolioCode] &lt;&gt; &quot;+@[User::StrQuote]+ &quot;', '&quot;+@[User::StrQuote]+ &quot;') + DAX_Portfolio_Exclude + '&quot;+@[User::StrQuote]+&quot;'&#xA;FROM  DAX_Portfolio_Exclude &#xA;&#xA;Set @DAX_Portfolio_Exclude  = '&amp;&amp;  (FundItems[RiskPortfolioCode] &lt;&gt;' +  @DAX_Portfolio_Exclude +')'&#xA;Select @DAX_Portfolio_Exclude&quot;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="DAX_Portfolio_Exclude_Query">
      <DTS:VariableValue
        DTS:DataType="8">DECLARE @DAX_Portfolio_Exclude  VARCHAR(1000) ;
With  DAX_Portfolio_Exclude 
As
(
Select Distinct DAX_Portfolio_Exclude
 from  [mdm].RM_Weekly_Active_Name_Mapping_Members
 Where  DAX_Portfolio_Exclude is not null

 ) 



SELECT @DAX_Portfolio_Exclude  = COALESCE(@DAX_Portfolio_Exclude + ' &amp;&amp;  FundItems[RiskPortfolioCode] &lt;&gt; "', '"') + DAX_Portfolio_Exclude + '"'
FROM  DAX_Portfolio_Exclude 

Set @DAX_Portfolio_Exclude  = '&amp;&amp;  (FundItems[RiskPortfolioCode] &lt;&gt;' +  @DAX_Portfolio_Exclude +')'
Select @DAX_Portfolio_Exclude</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{798C78E2-6D68-4148-BF52-64300E12D573}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="Is_Risk_Version">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:Description="Do Not Edit"
      DTS:DTSID="{DE05B5F7-BEBA-498C-B539-9523FD136D45}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="LastRunDT">
      <DTS:VariableValue
        DTS:DataType="7">6/1/2016 3:29:00 PM</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:Description="Do Not Edit"
      DTS:DTSID="{4F616ACE-63B7-4A66-82B7-9539BD3982FA}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="LastRunTMST">
      <DTS:VariableValue
        DTS:DataType="7">6/1/2016 3:29:00 PM</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:Description="Do Not Edit"
      DTS:DTSID="{DFFA1562-37F3-4E4F-A000-36F8887AB127}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="LineageID">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:Description="Do Not Edit"
      DTS:DTSID="{95D0647F-2C0A-4A4A-80B9-7CBF48609CCB}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="LineageString">
      <DTS:VariableValue
        DTS:DataType="8">naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:Description="Do Not Edit"
      DTS:DTSID="{E224241F-CEA2-4C5B-AC5D-6BB63A061CA2}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[System::StartTime]"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="LineageTMST">
      <DTS:VariableValue
        DTS:DataType="7">10/10/2019 12:26:18 PM</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:Description="Do Not Edit"
      DTS:DTSID="{323DB4C8-67C6-4538-8F00-B0746A2E8481}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="Replace (@[$Package::Param_MDSTableName],&quot;_Leaf&quot;,&quot;_Batch&quot;)"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="MDS_BatchName">
      <DTS:VariableValue
        DTS:DataType="8">RM_Weekly_Active_Risk_leaf</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:Description="Do Not Edit"
      DTS:DTSID="{3831D86C-41F0-4ABD-99FB-44388523B85F}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="MDS_BatchTag">
      <DTS:VariableValue
        DTS:DataType="8">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:Description="Do Not Edit"
      DTS:DTSID="{3778BAF8-5B12-4DBA-81EF-A85413D05932}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="&quot;DELETE FROM &quot; + @[User::MDS_StgTableName] "
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="MDS_ClearUnExecutedBatchCommand">
      <DTS:VariableValue
        DTS:DataType="8">DELETE FROM stg.RM_Weekly_Active_Risk_leaf</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:Description="Do Not Edit (Use Package Parameter)"
      DTS:DTSID="{4B034544-0431-45AC-8DB4-D3D959A4F509}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Package::Param_MDSImportType]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="MDS_ImportType">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:Description="0=NoTransactionLogs, 1=LogTransactions"
      DTS:DTSID="{A0A08F13-ADBD-4F57-B740-94B92B780566}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="MDS_LogFlag">
      <DTS:VariableValue
        DTS:DataType="3">1</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:Description="Do Not Edit"
      DTS:DTSID="{F42A64C3-7F53-4080-9006-B17E24D39F6F}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="&quot;Execute &quot; +  @[User::MDS_ProcedureName] +&#xA;&quot; @VersionName=N'&quot; +  @[User::MDS_VersionName] + &#xA;&quot;',@LogFlag=&quot; +  (DT_WSTR, 10) @[User::MDS_LogFlag] +&#xA;&quot;,@BatchTag=N'&quot; +  @[User::MDS_BatchTag] + &quot;'&quot;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="MDS_ProcedureCommand">
      <DTS:VariableValue
        DTS:DataType="8">Execute stg.udp_RM_Weekly_Active_Risk_leaf @VersionName=N'Version_yyyyMMdd',@LogFlag=1,@BatchTag=N'0'</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:Description="Do Not Edit"
      DTS:DTSID="{1A1C97E0-E7A7-4101-A232-008F4324EE81}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[User::MDS_stgSchemaName] + &quot;.udp_&quot; +  @[$Package::Param_MDSTableName]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="MDS_ProcedureName">
      <DTS:VariableValue
        DTS:DataType="8">stg.udp_RM_Weekly_Active_Risk_leaf</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{34A983FD-BAE2-4BE5-A6AD-E3C96E9CB06E}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="&quot;SELECT COUNT(*) AS RecordCount FROM &quot; +  @[$Package::Param_MDSSourceViewName]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="MDS_SourceView_RecordCount_Command">
      <DTS:VariableValue
        DTS:DataType="8">SELECT COUNT(*) AS RecordCount FROM mdm.RM_Weekly_Active_Risk_Members</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:Description="Do Not Edit"
      DTS:DTSID="{7FF95980-F6EA-4149-8302-5A6289C60174}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="MDS_stgSchemaName">
      <DTS:VariableValue
        DTS:DataType="8">stg</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:Description="Do Not Edit"
      DTS:DTSID="{2B6D7FDE-E49E-4C77-BEE2-97F8B2D8098C}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[User::MDS_stgSchemaName] + &quot;.&quot; +   @[$Package::Param_MDSTableName]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="MDS_StgTableName">
      <DTS:VariableValue
        DTS:DataType="8">stg.RM_Weekly_Active_Risk_leaf</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{59930D92-CAB9-4664-844F-8D50F4382304}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="MDS_TargetEntity_RecordCount">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{17CF2827-2E3E-4B18-A09B-BB387E3124ED}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="MDS_VersionName">
      <DTS:VariableValue
        DTS:DataType="8">Version_yyyyMMdd</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:Description="Do Not Edit (Use Package Parameter)"
      DTS:DTSID="{632506A9-E7A8-404F-B816-C9005F25B2C4}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="&#x9;&#x9;&#x9; &quot;SELECT TOP 1 [VersionName]&#xA;FROM [MDS_ISR].[mdm].[RM_Weekly_Active_Risk_MDS_Version_Members]&quot;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="MDS_VersionName_Source">
      <DTS:VariableValue
        DTS:DataType="8">SELECT TOP 1 [VersionName]
FROM [MDS_ISR].[mdm].[RM_Weekly_Active_Risk_MDS_Version_Members]</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{F6A56231-8685-485C-96CA-A0FCBEC09FE5}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="MDS_Version_Number">
      <DTS:VariableValue
        DTS:DataType="3">-99</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{87F7F7C2-E43E-4DD3-B6F8-DEE0711FA04B}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="&quot;SELECT TOP 1 [VersionNbr]&#xA;FROM [MDS_ISR].[mdm].[viw_SYSTEM_SCHEMA_VERSION]&#xA;WHERE Model_Name = 'RM_Weekly_Active_Risk'&#xA;      AND Status_ID = 1&#xA;      AND Name = '&quot;+ @[User::MDS_VersionName]+&quot;' &#xA;ORDER BY LastChgUser_DTM DESC;&quot;&#xA;&#xA;&#xA;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="MDS_Version_Number_Source">
      <DTS:VariableValue
        DTS:DataType="8">SELECT TOP 1 [VersionNbr]
FROM [MDS_ISR].[mdm].[viw_SYSTEM_SCHEMA_VERSION]
WHERE Model_Name = 'RM_Weekly_Active_Risk'
      AND Status_ID = 1
      AND Name = 'Version_yyyyMMdd' 
ORDER BY LastChgUser_DTM DESC;</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:Description="Do Not Edit"
      DTS:DTSID="{B49E9399-4F2C-4A82-B8D3-9F39E700EFEA}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="&quot;Process FAILED - &quot;  + @[User::MDS_StgTableName]  + &quot; - &quot; +  (DT_STR, 10, 1252) @[User::RecordCount_Total] + &quot; records processed.&quot;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Message_Failure">
      <DTS:VariableValue
        DTS:DataType="8">Process FAILED - stg.RM_Weekly_Active_Risk_leaf - 0 records processed.</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:Description="Do Not Edit"
      DTS:DTSID="{5BFA1D7C-D977-4BA0-9A6C-A97EF72DC188}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="&quot;Process Succeeded - &quot; +  @[User::MDS_StgTableName]  + &quot; - &quot; +  (DT_STR, 10, 1252) @[User::RecordCount_Total] + &quot; records processed.&quot;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Message_Success">
      <DTS:VariableValue
        DTS:DataType="8">Process Succeeded - stg.RM_Weekly_Active_Risk_leaf - 0 records processed.</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{46B19D7A-1F27-4550-8680-4A886F4ECEE2}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Previous_Date">
      <DTS:VariableValue
        DTS:DataType="8">11111</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:Description="Do Not Edit"
      DTS:DTSID="{96459D6C-63A8-4CF2-8995-812CB4B75738}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="RecordCount">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:Description="Do Not Edit"
      DTS:DTSID="{BF92F8FF-4A8C-4A0F-B264-1A67A750202C}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="RecordCount_Error">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:Description="Do Not Edit"
      DTS:DTSID="{09B38530-63FD-4C34-BEB7-A81B006C6B3B}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[User::RecordCount]- @[User::RecordCount_Error]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="RecordCount_Total">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:Description="Do Not Edit"
      DTS:DTSID="{1827DF4C-A8A7-452A-BD8D-C9A0D0A8A0FB}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="Results">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{CC05E7F9-E682-4EDA-ACD8-25ED9984C4C0}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Risk_Version">
      <DTS:VariableValue
        DTS:DataType="8">19990101_v3</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{1A0CF64C-7DC4-4366-A419-05F844928A1C}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="&quot;Exec Stg_Rpt.RM_Generate_Active_Risk_DAX &quot;  +@[User::Current_Date]+&quot; , &quot;+@[User::Previous_Date]+&#xA;&quot;With RESULT SETS&#xA;(&#xA;(&#xA; Curr_Date   nvarchar (250)&#xA;,Prev_Date nvarchar (250)&#xA;,FundItems_AssetClass  nvarchar (250)&#xA;,FundItems_SubAssetClass nvarchar (250)&#xA;,FundItems_PoolFundName  nvarchar (250)&#xA;,FundItems_RiskPortfolioCode  nvarchar (250)&#xA;,FundItems_RiskPortfolioName  nvarchar (250)&#xA;,MarketValueCurr float&#xA;,MarketValuePrev float&#xA;,PfActiveRiskPCt_Current float&#xA;,PfActiveRiskPCt_Previous float&#xA;,PoolActiveHDVar_Current float&#xA;,PoolActiveHDVar_Previous float&#xA;,PoolContributionToActivePct_Current float&#xA;,PoolContributionToActivePct_Previous float&#xA;,PortfolioBmk nvarchar (250)&#xA;,PoolFundBmk nvarchar (250)&#xA;,AggLevel nvarchar (250)&#xA;&#xA;)&#xA;) &#xA;  &quot;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Source_Command">
      <DTS:VariableValue
        DTS:DataType="8">Exec Stg_Rpt.RM_Generate_Active_Risk_DAX 20190628 , 11111With RESULT SETS
(
(
 Curr_Date   nvarchar (250)
,Prev_Date nvarchar (250)
,FundItems_AssetClass  nvarchar (250)
,FundItems_SubAssetClass nvarchar (250)
,FundItems_PoolFundName  nvarchar (250)
,FundItems_RiskPortfolioCode  nvarchar (250)
,FundItems_RiskPortfolioName  nvarchar (250)
,MarketValueCurr float
,MarketValuePrev float
,PfActiveRiskPCt_Current float
,PfActiveRiskPCt_Previous float
,PoolActiveHDVar_Current float
,PoolActiveHDVar_Previous float
,PoolContributionToActivePct_Current float
,PoolContributionToActivePct_Previous float
,PortfolioBmk nvarchar (250)
,PoolFundBmk nvarchar (250)
,AggLevel nvarchar (250)

)
) 
  </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{0E1F43A6-E7E2-4E3B-935D-007D32DC3753}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="&quot;DEFINE&#xA;    MEASURE varMeasures[IRContributionActiveHDVar] /* This works only at Pool level and excludes cash portfolios from the ranking stage which is not possible with teh existing measure  */&#xA;    =&#xA;        VAR vVectorStatisticName = &quot;+ @[User::StrQuote] + &quot;HDVAR Simulated PnL&quot;+ @[User::StrQuote] + &quot;&#xA;        VAR vVectorStatId =&#xA;            LOOKUPVALUE (&#xA;                RiskStatistic_Vector[StatisticID],&#xA;                RiskStatistic_Vector[VectorStatisticName], vVectorStatisticName&#xA;            )&#xA;        VAR vRiskVersionKeySelected =&#xA;            IF (&#xA;                HASONEVALUE ( RiskVersion[RiskVersionKey] ),&#xA;                VALUES ( RiskVersion[RiskVersionKey] ),&#xA;                19000101001&#xA;            )&#xA;        VAR vContrFilterValue =&#xA;            VALUES ( FundItems[PoolFundCode] )&#xA;        VAR vHDWeights =&#xA;            CALCULATETABLE ( HDVarWeights, HDVarWeights[SampleWeight] &gt; 0 )&#xA;        VAR vMaxHDRank =&#xA;            CALCULATE ( MAX ( HDVarWeights[SampleRank] ), HDVarWeights[SampleWeight] &gt; 0 )&#xA;        VAR vScenarios =&#xA;            FILTER (&#xA;                ALL ( Scenario ),&#xA;                Scenario[riskVersionKey] = vRiskVersionKeySelected&#xA;                    &amp;&amp; Scenario[StatisticId] = vVectorStatId&#xA;                    &amp;&amp; Scenario[ScenarioSeq] &lt;= 1300&#xA;            )&#xA;        VAR vIsPortfolioLeaf =&#xA;            CALCULATE ( [VariantIsPortfolioLeaf] )&#xA;        RETURN&#xA;            /* IN the ranking part of the functions below, we  use selectively the asset or portfolio level stat   */&#xA;            IF (&#xA;                [IsContrLeaf] = 0,&#xA;                BLANK (),&#xA;                SUMX (&#xA;                    TOPN (&#xA;                        vMaxHDRank,&#xA;                        SUMMARIZE (&#xA;                            vScenarios,&#xA;                            Scenario[ScenarioSeq],&#xA;                            &quot;+ @[User::StrQuote] + &quot;Cell&quot;+ @[User::StrQuote] + &quot;, [ActiveVectorStat(PfLevel)],&#xA;                            &quot;+ @[User::StrQuote] + &quot;ScenarioRank&quot;+ @[User::StrQuote] + &quot;, RANKX (&#xA;                                vScenarios,&#xA;                                - CALCULATE (&#xA;                                    [ActiveVectorStat(PfLevel)],&#xA;                                    ALLEXCEPT ( FundItems, FundItems[PoolFundCode] ),&#xA;                                    FundItems[PoolFundCode] = vContrFilterValue,&#xA;                                    FundItems[IsCash] = &quot;+ @[User::StrQuote] + &quot;N&quot;+ @[User::StrQuote] + &quot;,&#xA;                                    ALLEXCEPT ( PortfolioLevelPositionsForAllTreeItems, FundItems[Iscash] )&#xA;                                )&#xA;                            )&#xA;                        ),&#xA;                        [ScenarioRank], ASC&#xA;                    ),&#xA;                    [Cell]&#xA;                        * LOOKUPVALUE (&#xA;                            HDVarWeights[SampleWeight],&#xA;                            HDVarWeights[SampleRank], [ScenarioRank]&#xA;                        )&#xA;                ) * [DisplayVarSign]&#xA;            )&#xA;EVALUATE &#xA;VAR vRiskDateKey =&quot; + @[User::Current_Date] +&#xA;&quot; VAR vRiskVersionKey =&#xA;    CALCULATE (&#xA;        MAX ( Riskversion[RiskVersionKey] ),&#xA;        Riskversion[RiskDateKey] = vRiskDateKey&#xA;    )&#xA;VAR vRiskVersionData =&#xA;    CALCULATETABLE (&#xA;        'Riskversion',&#xA;        'Riskversion'[RiskVersionKey] = vRiskVersionKey&#xA;    )&#x9;&#xA;&#x9;&#xA;&#x9;&quot;&#xA;+&quot;VAR vRiskVersionName =&#xA;    SELECTCOLUMNS (&#xA;        vRiskVersionData,&#xA;        &quot;+ @[User::StrQuote] +&quot; RiskVersionName&quot;+ @[User::StrQuote] +&quot;, SWITCH (&#xA;            [RiskVersionName],&#xA;           &quot;+ @[User::StrQuote] +&quot;Default&quot;+ @[User::StrQuote] +&quot;, &quot;+ @[User::StrQuote] +&quot;Weekly&quot;+ @[User::StrQuote] +&quot;,&#xA;           &quot;+ @[User::StrQuote] +&quot;Default version&quot;+ @[User::StrQuote] +&quot;, &quot;+ @[User::StrQuote] +&quot;Weekly&quot;+ @[User::StrQuote] +&quot;,&#xA;            &quot;+ @[User::StrQuote] +&quot;Monthly&quot;+ @[User::StrQuote]+&quot;, &quot;+ @[User::StrQuote] +&quot;Monthly&quot;+ @[User::StrQuote] +&quot;,&#xA;            [RiskVersionName]&#xA;        )&#xA;    )&quot;+&#x9;&#xA;&#x9;&#x9;&#xA;&quot;VAR vFilteredFund =&#xA;    ADDCOLUMNS (&#xA;        FILTER (&#xA;            FundItems,&#xA;                 ( FundItems[AssetClass] = &quot;+ @[User::StrQuote] + &quot;EQUITY&quot;+ @[User::StrQuote] + &quot;&#xA;                || FundItems[AssetClass] = &quot;+ @[User::StrQuote] + &quot;FIXED INCOME&quot;+ @[User::StrQuote] + &quot; )&#xA;                &amp;&amp; ( FundItems[RiskVersionKey] = vRiskVersionKey )&#xA;               &quot;+ @[User::DAX_Pool_Exclude] +&quot;&#xA;&#x9;&#x9;&#x9;   &#xA;&#x9;&#x9;&#x9;   &#xA;&#x9;&#x9;&#x9;   &#xA;&#x9;&#x9;&#x9;   &#xA;                &amp;&amp; FundItems[IsCash] = &quot;+ @[User::StrQuote] + &quot;N&quot;+ @[User::StrQuote] + &quot;&#xA;                &quot;+ @[User::DAX_Portfolio_Exclude] +&quot;     &#xA;        ),&#xA;        &quot;+ @[User::StrQuote] + &quot;PoolFundName2&quot;+ @[User::StrQuote] + &quot;, FIRSTNONBLANK ( FundItems[PoolFundName], 1 ),&#xA;        &quot;+ @[User::StrQuote] + &quot;BlankValue&quot;+ @[User::StrQuote] + &quot;, BLANK ()&#xA;    )&#xA;VAR vUnScaledResults =&#xA;    UNION (&#xA;        CALCULATETABLE (&#xA;            ADDCOLUMNS (&#xA;                SUMMARIZE (&#xA;                    vFilteredFund,&#xA;                    [AssetClass],&#xA;                    [SubAssetClass],&#xA;                    [PoolFundName],&#xA;                    [RiskPortfolioCode],&#xA;                    [RiskPortfolioName]&#xA;                ),&#xA;                &quot;+ @[User::StrQuote] + &quot;MarketValueCurrent&quot;+ @[User::StrQuote] + &quot;, CALCULATE ( [PV], riskversion[RiskVersionKey] = vRiskVersionKey ),&#xA;                &quot;+ @[User::StrQuote] + &quot;PfActiveRiskPCt_Current&quot;+ @[User::StrQuote] + &quot;, DIVIDE (&#xA;                    CALCULATE (&#xA;                        [StandaloneActiveHDVar],&#xA;                        ActiveBenchmark[BenchmarkType] = &quot;+ @[User::StrQuote] + &quot;Rollup&quot;+ @[User::StrQuote] + &quot;,&#xA;                        riskversion[RiskVersionKey] = vRiskVersionKey&#xA;                    ),&#xA;                    CALCULATE ( [PV], riskversion[RiskVersionKey] = vRiskVersionKey )&#xA;                ),&#xA;                &quot;+ @[User::StrQuote] + &quot;PoolActiveHDVar_Current&quot;+ @[User::StrQuote] + &quot;, DIVIDE (&#xA;                    CALCULATE (&#xA;                        [StandaloneActiveHDVar],&#xA;                        ActiveBenchmark[BenchmarkType] = &quot;+ @[User::StrQuote] + &quot;Rolldown&quot;+ @[User::StrQuote] + &quot;,&#xA;                        riskversion[RiskVersionKey] = vRiskVersionKey&#xA;                    ),&#xA;                    CALCULATE ( [PV], riskversion[RiskVersionKey] = vRiskVersionKey )&#xA;                ),&#xA;                /* Here we need to override the filter context to get the Pooltotal to be the denominator */&#xA;                &quot;+ @[User::StrQuote] + &quot;PoolContributionToActivePct_Current&quot;+ @[User::StrQuote] + &quot;, DIVIDE (&#xA;                    CALCULATE (&#xA;                        [IRContributionActiveHDVar],&#xA;                        ActiveBenchmark[BenchmarkType] = &quot;+ @[User::StrQuote] + &quot;Rolldown&quot;+ @[User::StrQuote] + &quot;,&#xA;                        riskversion[RiskVersionKey] = vRiskVersionKey,&#xA;                        /*     FundItems[IsCash] = &quot;+ @[User::StrQuote] + &quot;N&quot;+ @[User::StrQuote] + &quot;,*/&#xA;                        varContributionBy[Variant] = &quot;+ @[User::StrQuote] + &quot;PoolFund&quot;+ @[User::StrQuote] + &quot;&#xA;                    ),&#xA;                    CALCULATE (&#xA;                        [IRContributionActiveHDVar],&#xA;                        ActiveBenchmark[BenchmarkType] = &quot;+ @[User::StrQuote] + &quot;Rolldown&quot;+ @[User::StrQuote] + &quot;,&#xA;                        riskversion[RiskVersionKey] = vRiskVersionKey,&#xA;                        /*--  FundItems[IsCash] = &quot;+ @[User::StrQuote] + &quot;N&quot;+ @[User::StrQuote] + &quot;,*/&#xA;                        varContributionBy[Variant] = &quot;+ @[User::StrQuote] + &quot;PoolFund&quot;+ @[User::StrQuote] + &quot;,&#xA;                        FILTER (&#xA;                            ALLSELECTED ( FundItems ),&#xA;                            [PoolFundName] = EARLIER ( [PoolFundName] )&#xA;                        )&#xA;                    )&#xA;                ),&#xA;                &quot;+ @[User::StrQuote] + &quot;PortfolioBmk&quot;+ @[User::StrQuote] + &quot;, FIRSTNONBLANK (fundItems[BmkCodeRollup], 1 ),&#xA;                &quot;+ @[User::StrQuote] + &quot;PoolFundBmk&quot;+ @[User::StrQuote] + &quot;, BLANK (),&#xA;                &quot;+ @[User::StrQuote] + &quot;AggLevel&quot;+ @[User::StrQuote] + &quot;, &quot;+ @[User::StrQuote] + &quot;Pf&quot;+ @[User::StrQuote] + &#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#xA;&#x9;&#x9;&quot; ,&quot;+ @[User::StrQuote] + &quot;RiskDateKey&quot;+ @[User::StrQuote] + &quot;, &quot;+ &quot;vRiskDateKey,&quot;+ &#xA;&#x9;&#x9;&quot;  &quot;+ @[User::StrQuote] + &quot;RiskVersionKey&quot;+ @[User::StrQuote] + &quot;, &quot;+ &quot;vRiskVersionKey,&quot;+&#xA;&#x9;&#x9;&quot;  &quot;+ @[User::StrQuote] + &quot;RiskVersionName&quot;+ @[User::StrQuote] + &quot;, &quot; + &quot;vRiskVersionName&quot;+ &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;            ),&#xA;            varRiskType[VarRiskType] = &quot;+ @[User::StrQuote] + &quot;All Risks&quot;+ @[User::StrQuote] + &quot;,&#xA;            ShowValuesAs[ScaleName] = &quot;+ @[User::StrQuote] + &quot;Millions&quot;+ @[User::StrQuote] + &quot;,&#xA;            ShowVarSign[VarSign] = &quot;+ @[User::StrQuote] + &quot;Positive&quot;+ @[User::StrQuote] + &quot;,&#xA;    &#xA;            riskversion[RiskVersionKey] = vRiskVersionKey,&#xA;            OR ( FundItems[AssetClass] = &quot;+ @[User::StrQuote] + &quot;EQUITY&quot;+ @[User::StrQuote] + &quot;, FundItems[AssetClass] = &quot;+ @[User::StrQuote] + &quot;FIXED INCOME&quot;+ @[User::StrQuote] + &quot; )&#xA;        ),&#xA;        CALCULATETABLE (&#xA;            ADDCOLUMNS (&#xA;                SUMMARIZE (&#xA;                    vFilteredFund,&#xA;                    [AssetClass],&#xA;                    [SubAssetClass],&#xA;                    [PoolFundName],&#xA;                    [BlankValue],&#xA;                    [PoolFundname2]&#xA;                ),&#xA;                &quot;+ @[User::StrQuote] + &quot;MarketValueCurrent&quot;+ @[User::StrQuote] + &quot;, CALCULATE (&#xA;                    [PV],&#xA;                    riskversion[RiskVersionKey] = vRiskVersionKey,&#xA;                    FundItems[IsCash] = &quot;+ @[User::StrQuote] + &quot;N&quot;+ @[User::StrQuote] + &quot;,&#xA;                    ALL ( FundItems[IsAllocation] )&#xA;                ),&#xA;                /* At pool level we are taking the pool level standalone, not sum of portfolios  */&#xA;                &quot;+ @[User::StrQuote] + &quot;PfActiveRiskPct_Current&quot;+ @[User::StrQuote] + &quot;, DIVIDE (&#xA;                    CALCULATE (&#xA;                        [StandaloneActiveHDVar],&#xA;                        ActiveBenchmark[BenchmarkType] = &quot;+ @[User::StrQuote] + &quot;Rollup&quot;+ @[User::StrQuote] + &quot;,&#xA;                        riskversion[RiskVersionKey] = vRiskVersionKey,&#xA;                        FundItems[IsCash] = &quot;+ @[User::StrQuote] + &quot;N&quot;+ @[User::StrQuote] + &quot;,&#xA;                        ALL ( FundItems[IsAllocation] )&#xA;                    ),&#xA;                    CALCULATE (&#xA;                        [PV],&#xA;                        riskversion[RiskVersionKey] = vRiskVersionKey,&#xA;                        FundItems[IsCash] = &quot;+ @[User::StrQuote] + &quot;N&quot;+ @[User::StrQuote] + &quot;,&#xA;                        ALL ( FundItems[IsAllocation] )&#xA;                    )&#xA;                ),&#xA;                &quot;+ @[User::StrQuote] + &quot;PoolActiveVarPct_Current&quot;+ @[User::StrQuote] + &quot;, DIVIDE (&#xA;                    CALCULATE (&#xA;                        [StandaloneActiveHDVar],&#xA;                        ActiveBenchmark[BenchmarkType] = &quot;+ @[User::StrQuote] + &quot;Rolldown&quot;+ @[User::StrQuote] + &quot;,&#xA;                        riskversion[RiskVersionKey] = vRiskVersionKey,&#xA;                        FundItems[IsCash] = &quot;+ @[User::StrQuote] + &quot;N&quot;+ @[User::StrQuote] + &quot;,&#xA;                        ALL ( FundItems[IsAllocation] )&#xA;                    ),&#xA;                    CALCULATE (&#xA;                        [PV],&#xA;                        riskversion[RiskVersionKey] = vRiskVersionKey,&#xA;                        FundItems[IsCash] = &quot;+ @[User::StrQuote] + &quot;N&quot;+ @[User::StrQuote] + &quot;,&#xA;                        ALL ( FundItems[IsAllocation] )&#xA;                    )&#xA;                ),&#xA;                &quot;+ @[User::StrQuote] + &quot;PoolContributionToActivePct_Current&quot;+ @[User::StrQuote] + &quot;, 1,&#xA;                &quot;+ @[User::StrQuote] + &quot;PortfolioBmk&quot;+ @[User::StrQuote] + &quot;, BLANK (),&#xA;                &quot;+ @[User::StrQuote] + &quot;PoolFundBmk&quot;+ @[User::StrQuote] + &quot;, FIRSTNONBLANK ( fundItems[BmkCodeRolldown], 1 ),&#xA;                &quot;+ @[User::StrQuote] + &quot;AggLevel&quot;+ @[User::StrQuote] + &quot;, &quot;+ @[User::StrQuote] + &quot;Pool&quot;+ @[User::StrQuote]  + &#xA;&#x9;&#x9;&#x9;&#x9;&quot; ,&quot;+ @[User::StrQuote] + &quot;RiskDateKey&quot;+ @[User::StrQuote] + &quot;, &quot;+ &quot;vRiskDateKey,&quot;+ &#xA;&#x9;&#x9;&#x9;&#x9;&quot;  &quot;+ @[User::StrQuote] + &quot;RiskVersionKey&quot;+ @[User::StrQuote] + &quot;, &quot;+ &quot;vRiskVersionKey,&quot;+&#xA;&#x9;&#x9;&#x9;&#x9;&quot;  &quot;+ @[User::StrQuote] + &quot;RiskVersionName&quot;+ @[User::StrQuote] + &quot;, &quot; + &quot;vRiskVersionName&quot;+ &quot;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;            ),&#xA;            varRiskType[VarRiskType] = &quot;+ @[User::StrQuote] + &quot;All Risks&quot;+ @[User::StrQuote] + &quot;,&#xA;            ShowValuesAs[ScaleName] = &quot;+ @[User::StrQuote] + &quot;Millions&quot;+ @[User::StrQuote] + &quot;,&#xA;            ShowVarSign[VarSign] = &quot;+ @[User::StrQuote] + &quot;Positive&quot;+ @[User::StrQuote] + &quot;,&#xA;            riskversion[RiskVersionKey] = vRiskVersionKey,&#xA;            OR ( FundItems[AssetClass] = &quot;+ @[User::StrQuote] + &quot;EQUITY&quot;+ @[User::StrQuote] + &quot;, FundItems[AssetClass] = &quot;+ @[User::StrQuote] + &quot;FIXED INCOME&quot;+ @[User::StrQuote] + &quot; )&#xA;        )&#xA;    )&#xA;VAR vScaledResults =&#xA;    ADDCOLUMNS (&#xA;        vUnScaledResults,&#xA;        &quot;+ @[User::StrQuote] + &quot;PfActiveRiskPct_CurrentScaled&quot;+ @[User::StrQuote] + &quot;, IF (&#xA;            ABS ( [PfActiveRiskPct_Current] ) &gt; 1,&#xA;            DIVIDE (&#xA;                [PfActiveRiskPct_Current] * [MarketValueCurrent]&#xA;                    * SQRT ( 252 / 3 ),&#xA;                [MarketValueCurrent]&#xA;            ),&#xA;            SIGN ( [PfActiveRiskPct_Current] )&#xA;                * (&#xA;                    1&#xA;                        - POWER ( 1 - ABS ( [PfActiveRiskPct_Current] ), SQRT ( 252 / 3 ) )&#xA;                )&#xA;        ),&#xA;        &quot;+ @[User::StrQuote] + &quot;PoolActiveVarPct_CurrentScaled&quot;+ @[User::StrQuote] + &quot;, IF (&#xA;            ABS ( [PoolActiveHDVar_Current] ) &gt; 1,&#xA;            DIVIDE (&#xA;                [PoolActiveHDVar_Current] * [MarketValueCurrent]&#xA;                    * SQRT ( 252 / 3 ),&#xA;                [MarketValueCurrent]&#xA;            ),&#xA;            SIGN ( [PoolActiveHDVar_Current] )&#xA;                * (&#xA;                    1&#xA;                        - POWER ( 1 - ABS ( [PoolActiveHDVar_Current] ), SQRT ( 252 / 3 ) )&#xA;                )&#xA;        )&#xA;    ) /* finally , re-alias scaled cols back to regular to minimize impact on SSRS  */&#xA;RETURN&#xA;    SELECTCOLUMNS (&#xA;        vScaledResults,&#xA;        &quot;+ @[User::StrQuote] + &quot;AssetClass&quot;+ @[User::StrQuote] + &quot;, [AssetClass],&#xA;        &quot;+ @[User::StrQuote] + &quot;SubAssetClass&quot;+ @[User::StrQuote] + &quot;, [SubAssetClass],&#xA;        &quot;+ @[User::StrQuote] + &quot;PoolFundName&quot;+ @[User::StrQuote] + &quot;, [PoolFundName],&#xA;        &quot;+ @[User::StrQuote] + &quot;RiskPortfolioCode&quot;+ @[User::StrQuote] + &quot;, [RiskPortfolioCode],&#xA;        &quot;+ @[User::StrQuote] + &quot;RiskPortfolioName&quot;+ @[User::StrQuote] + &quot;, [RiskPortfolioName],&#xA;        &quot;+ @[User::StrQuote] + &quot;MarketValueCurrent&quot;+ @[User::StrQuote] + &quot;, [MarketValueCurrent],&#xA;        &quot;+ @[User::StrQuote] + &quot;PfActiveRiskPCt_Current&quot;+ @[User::StrQuote] + &quot;, [PfActiveRiskPct_CurrentScaled],&#xA;        &quot;+ @[User::StrQuote] + &quot;PoolActiveHDVar_Current&quot;+ @[User::StrQuote] + &quot;, [PoolActiveVarPct_CurrentScaled],&#xA;        &quot;+ @[User::StrQuote] + &quot;PoolContributionToActivePct_Current&quot;+ @[User::StrQuote] + &quot;, [PoolContributionToActivePct_Current],&#xA;        &quot;+ @[User::StrQuote] + &quot;PortfolioBmk&quot;+ @[User::StrQuote] + &quot;, [PortfolioBmk],&#xA;        &quot;+ @[User::StrQuote] + &quot;PoolFundBmk&quot;+ @[User::StrQuote] + &quot;, [PoolFundBmk],&#xA;        &quot;+ @[User::StrQuote] + &quot;AggLevel&quot;+ @[User::StrQuote] + &quot;, [AggLevel],&#xA;&#x9;&#x9;&quot;+ @[User::StrQuote] + &quot;RiskDateKey&quot;+ @[User::StrQuote] + &quot;, [RiskDateKey],&#xA;&#x9;&#x9;&quot;+ @[User::StrQuote] + &quot;RiskVersionKey&quot;+ @[User::StrQuote] + &quot;, [RiskVersionKey],&#xA;&#x9;&#x9;&quot;+ @[User::StrQuote] + &quot;RiskVersionName&quot;+ @[User::StrQuote] + &quot;, [RiskVersionName]&#xA;    )&#xA;ORDER BY&#xA;    [AssetClass],&#xA;    [SubAssetClass],&#xA;    [PoolFundName],&#xA;    [RiskPortfolioCode],&#xA;    [RiskPortfolioName]&quot;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Source_DAX_Query">
      <DTS:VariableValue
        DTS:DataType="8">DEFINE
    MEASURE varMeasures[IRContributionActiveHDVar] /* This works only at Pool level and excludes cash portfolios from the ranking stage which is not possible with teh existing measure  */
    =
        VAR vVectorStatisticName = "HDVAR Simulated PnL"
        VAR vVectorStatId =
            LOOKUPVALUE (
                RiskStatistic_Vector[StatisticID],
                RiskStatistic_Vector[VectorStatisticName], vVectorStatisticName
            )
        VAR vRiskVersionKeySelected =
            IF (
                HASONEVALUE ( RiskVersion[RiskVersionKey] ),
                VALUES ( RiskVersion[RiskVersionKey] ),
                19000101001
            )
        VAR vContrFilterValue =
            VALUES ( FundItems[PoolFundCode] )
        VAR vHDWeights =
            CALCULATETABLE ( HDVarWeights, HDVarWeights[SampleWeight] &gt; 0 )
        VAR vMaxHDRank =
            CALCULATE ( MAX ( HDVarWeights[SampleRank] ), HDVarWeights[SampleWeight] &gt; 0 )
        VAR vScenarios =
            FILTER (
                ALL ( Scenario ),
                Scenario[riskVersionKey] = vRiskVersionKeySelected
                    &amp;&amp; Scenario[StatisticId] = vVectorStatId
                    &amp;&amp; Scenario[ScenarioSeq] &lt;= 1300
            )
        VAR vIsPortfolioLeaf =
            CALCULATE ( [VariantIsPortfolioLeaf] )
        RETURN
            /* IN the ranking part of the functions below, we  use selectively the asset or portfolio level stat   */
            IF (
                [IsContrLeaf] = 0,
                BLANK (),
                SUMX (
                    TOPN (
                        vMaxHDRank,
                        SUMMARIZE (
                            vScenarios,
                            Scenario[ScenarioSeq],
                            "Cell", [ActiveVectorStat(PfLevel)],
                            "ScenarioRank", RANKX (
                                vScenarios,
                                - CALCULATE (
                                    [ActiveVectorStat(PfLevel)],
                                    ALLEXCEPT ( FundItems, FundItems[PoolFundCode] ),
                                    FundItems[PoolFundCode] = vContrFilterValue,
                                    FundItems[IsCash] = "N",
                                    ALLEXCEPT ( PortfolioLevelPositionsForAllTreeItems, FundItems[Iscash] )
                                )
                            )
                        ),
                        [ScenarioRank], ASC
                    ),
                    [Cell]
                        * LOOKUPVALUE (
                            HDVarWeights[SampleWeight],
                            HDVarWeights[SampleRank], [ScenarioRank]
                        )
                ) * [DisplayVarSign]
            )
EVALUATE 
VAR vRiskDateKey =20190628 VAR vRiskVersionKey =
    CALCULATE (
        MAX ( Riskversion[RiskVersionKey] ),
        Riskversion[RiskDateKey] = vRiskDateKey
    )
VAR vRiskVersionData =
    CALCULATETABLE (
        'Riskversion',
        'Riskversion'[RiskVersionKey] = vRiskVersionKey
    )	
	
	VAR vRiskVersionName =
    SELECTCOLUMNS (
        vRiskVersionData,
        " RiskVersionName", SWITCH (
            [RiskVersionName],
           "Default", "Weekly",
           "Default version", "Weekly",
            "Monthly", "Monthly",
            [RiskVersionName]
        )
    )VAR vFilteredFund =
    ADDCOLUMNS (
        FILTER (
            FundItems,
                 ( FundItems[AssetClass] = "EQUITY"
                || FundItems[AssetClass] = "FIXED INCOME" )
                &amp;&amp; ( FundItems[RiskVersionKey] = vRiskVersionKey )
               &amp;&amp;  (FundItems[PoolFundCode] &lt;&gt;"E0D0125")
			   
			   
			   
			   
                &amp;&amp; FundItems[IsCash] = "N"
                &amp;&amp;  (FundItems[RiskPortfolioCode] &lt;&gt;"CE6103")     
        ),
        "PoolFundName2", FIRSTNONBLANK ( FundItems[PoolFundName], 1 ),
        "BlankValue", BLANK ()
    )
VAR vUnScaledResults =
    UNION (
        CALCULATETABLE (
            ADDCOLUMNS (
                SUMMARIZE (
                    vFilteredFund,
                    [AssetClass],
                    [SubAssetClass],
                    [PoolFundName],
                    [RiskPortfolioCode],
                    [RiskPortfolioName]
                ),
                "MarketValueCurrent", CALCULATE ( [PV], riskversion[RiskVersionKey] = vRiskVersionKey ),
                "PfActiveRiskPCt_Current", DIVIDE (
                    CALCULATE (
                        [StandaloneActiveHDVar],
                        ActiveBenchmark[BenchmarkType] = "Rollup",
                        riskversion[RiskVersionKey] = vRiskVersionKey
                    ),
                    CALCULATE ( [PV], riskversion[RiskVersionKey] = vRiskVersionKey )
                ),
                "PoolActiveHDVar_Current", DIVIDE (
                    CALCULATE (
                        [StandaloneActiveHDVar],
                        ActiveBenchmark[BenchmarkType] = "Rolldown",
                        riskversion[RiskVersionKey] = vRiskVersionKey
                    ),
                    CALCULATE ( [PV], riskversion[RiskVersionKey] = vRiskVersionKey )
                ),
                /* Here we need to override the filter context to get the Pooltotal to be the denominator */
                "PoolContributionToActivePct_Current", DIVIDE (
                    CALCULATE (
                        [IRContributionActiveHDVar],
                        ActiveBenchmark[BenchmarkType] = "Rolldown",
                        riskversion[RiskVersionKey] = vRiskVersionKey,
                        /*     FundItems[IsCash] = "N",*/
                        varContributionBy[Variant] = "PoolFund"
                    ),
                    CALCULATE (
                        [IRContributionActiveHDVar],
                        ActiveBenchmark[BenchmarkType] = "Rolldown",
                        riskversion[RiskVersionKey] = vRiskVersionKey,
                        /*--  FundItems[IsCash] = "N",*/
                        varContributionBy[Variant] = "PoolFund",
                        FILTER (
                            ALLSELECTED ( FundItems ),
                            [PoolFundName] = EARLIER ( [PoolFundName] )
                        )
                    )
                ),
                "PortfolioBmk", FIRSTNONBLANK (fundItems[BmkCodeRollup], 1 ),
                "PoolFundBmk", BLANK (),
                "AggLevel", "Pf" ,"RiskDateKey", vRiskDateKey,  "RiskVersionKey", vRiskVersionKey,  "RiskVersionName", vRiskVersionName
				
            ),
            varRiskType[VarRiskType] = "All Risks",
            ShowValuesAs[ScaleName] = "Millions",
            ShowVarSign[VarSign] = "Positive",
    
            riskversion[RiskVersionKey] = vRiskVersionKey,
            OR ( FundItems[AssetClass] = "EQUITY", FundItems[AssetClass] = "FIXED INCOME" )
        ),
        CALCULATETABLE (
            ADDCOLUMNS (
                SUMMARIZE (
                    vFilteredFund,
                    [AssetClass],
                    [SubAssetClass],
                    [PoolFundName],
                    [BlankValue],
                    [PoolFundname2]
                ),
                "MarketValueCurrent", CALCULATE (
                    [PV],
                    riskversion[RiskVersionKey] = vRiskVersionKey,
                    FundItems[IsCash] = "N",
                    ALL ( FundItems[IsAllocation] )
                ),
                /* At pool level we are taking the pool level standalone, not sum of portfolios  */
                "PfActiveRiskPct_Current", DIVIDE (
                    CALCULATE (
                        [StandaloneActiveHDVar],
                        ActiveBenchmark[BenchmarkType] = "Rollup",
                        riskversion[RiskVersionKey] = vRiskVersionKey,
                        FundItems[IsCash] = "N",
                        ALL ( FundItems[IsAllocation] )
                    ),
                    CALCULATE (
                        [PV],
                        riskversion[RiskVersionKey] = vRiskVersionKey,
                        FundItems[IsCash] = "N",
                        ALL ( FundItems[IsAllocation] )
                    )
                ),
                "PoolActiveVarPct_Current", DIVIDE (
                    CALCULATE (
                        [StandaloneActiveHDVar],
                        ActiveBenchmark[BenchmarkType] = "Rolldown",
                        riskversion[RiskVersionKey] = vRiskVersionKey,
                        FundItems[IsCash] = "N",
                        ALL ( FundItems[IsAllocation] )
                    ),
                    CALCULATE (
                        [PV],
                        riskversion[RiskVersionKey] = vRiskVersionKey,
                        FundItems[IsCash] = "N",
                        ALL ( FundItems[IsAllocation] )
                    )
                ),
                "PoolContributionToActivePct_Current", 1,
                "PortfolioBmk", BLANK (),
                "PoolFundBmk", FIRSTNONBLANK ( fundItems[BmkCodeRolldown], 1 ),
                "AggLevel", "Pool" ,"RiskDateKey", vRiskDateKey,  "RiskVersionKey", vRiskVersionKey,  "RiskVersionName", vRiskVersionName
			
				            ),
            varRiskType[VarRiskType] = "All Risks",
            ShowValuesAs[ScaleName] = "Millions",
            ShowVarSign[VarSign] = "Positive",
            riskversion[RiskVersionKey] = vRiskVersionKey,
            OR ( FundItems[AssetClass] = "EQUITY", FundItems[AssetClass] = "FIXED INCOME" )
        )
    )
VAR vScaledResults =
    ADDCOLUMNS (
        vUnScaledResults,
        "PfActiveRiskPct_CurrentScaled", IF (
            ABS ( [PfActiveRiskPct_Current] ) &gt; 1,
            DIVIDE (
                [PfActiveRiskPct_Current] * [MarketValueCurrent]
                    * SQRT ( 252 / 3 ),
                [MarketValueCurrent]
            ),
            SIGN ( [PfActiveRiskPct_Current] )
                * (
                    1
                        - POWER ( 1 - ABS ( [PfActiveRiskPct_Current] ), SQRT ( 252 / 3 ) )
                )
        ),
        "PoolActiveVarPct_CurrentScaled", IF (
            ABS ( [PoolActiveHDVar_Current] ) &gt; 1,
            DIVIDE (
                [PoolActiveHDVar_Current] * [MarketValueCurrent]
                    * SQRT ( 252 / 3 ),
                [MarketValueCurrent]
            ),
            SIGN ( [PoolActiveHDVar_Current] )
                * (
                    1
                        - POWER ( 1 - ABS ( [PoolActiveHDVar_Current] ), SQRT ( 252 / 3 ) )
                )
        )
    ) /* finally , re-alias scaled cols back to regular to minimize impact on SSRS  */
RETURN
    SELECTCOLUMNS (
        vScaledResults,
        "AssetClass", [AssetClass],
        "SubAssetClass", [SubAssetClass],
        "PoolFundName", [PoolFundName],
        "RiskPortfolioCode", [RiskPortfolioCode],
        "RiskPortfolioName", [RiskPortfolioName],
        "MarketValueCurrent", [MarketValueCurrent],
        "PfActiveRiskPCt_Current", [PfActiveRiskPct_CurrentScaled],
        "PoolActiveHDVar_Current", [PoolActiveVarPct_CurrentScaled],
        "PoolContributionToActivePct_Current", [PoolContributionToActivePct_Current],
        "PortfolioBmk", [PortfolioBmk],
        "PoolFundBmk", [PoolFundBmk],
        "AggLevel", [AggLevel],
		"RiskDateKey", [RiskDateKey],
		"RiskVersionKey", [RiskVersionKey],
		"RiskVersionName", [RiskVersionName]
    )
ORDER BY
    [AssetClass],
    [SubAssetClass],
    [PoolFundName],
    [RiskPortfolioCode],
    [RiskPortfolioName]</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{E8550C8F-1A44-41A4-9C40-34DCAD1AF642}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="StrQuote">
      <DTS:VariableValue
        DTS:DataType="8">"</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Failure Loading Closeout"
      DTS:CreationName="STOCK:SEQUENCE"
      DTS:DTSID="{5A99E02F-EE8C-44FC-ADED-775347E63D25}"
      DTS:ExecutableType="STOCK:SEQUENCE"
      DTS:LocaleID="-1"
      DTS:ObjectName="Failure Loading Closeout">
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\Failure Loading Closeout\Set RecordCount Error"
          DTS:CreationName="Microsoft.ExpressionTask"
          DTS:Description="Expression Task"
          DTS:DTSID="{5411D2E3-DFBC-4058-B87E-BF03D8811CFD}"
          DTS:ExecutableType="Microsoft.ExpressionTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Set RecordCount Error"
          DTS:TaskContact="Expression Task;Microsoft Corporation; SQL Server 2016; © 2015 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <ExpressionTask
              Expression="@[User::RecordCount_Error]= @[User::RecordCount]" />
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Failure Loading Closeout\Write Failure Record"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:DTSID="{E4448912-C48E-4243-860F-E82AE9017F73}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Write Failure Record"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{1A8664F3-BE3D-46FF-AEB7-5A71CAFC73DE}"
              SQLTask:SqlStatementSource="UPDATE log.[SSISAudit_MDSDQS]&#xA;  SET&#xA;      [BatchID] = ?,&#xA;      [PackageName] = ?,&#xA;      [CompleteTMST] = GETDATE(),&#xA;      [CompletionMessage] = ?,&#xA;      [ExecutionInstanceGUID] = ?,&#xA;      [MDSImportType] = ?,&#xA;      [MDSBatchTag] = ?, &#xA;      [MDSVersionName] = ?,&#xA;      [MDSLogFlag] = ?,&#xA;      [MDSDisableRunBatch] = ?,&#xA;      [RowCountProcessedTotal] = ?&#xA;      &#xA;FROM [log].[SSISAudit_MDSDQS]&#xA;WHERE [SSISAuditKey] = ?;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="0"
                SQLTask:DtsVariableName="$Package::Param_BatchID"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="3"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="1"
                SQLTask:DtsVariableName="System::PackageName"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="129"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="2"
                SQLTask:DtsVariableName="User::Message_Failure"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="129"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="3"
                SQLTask:DtsVariableName="System::VersionGUID"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="129"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="4"
                SQLTask:DtsVariableName="User::MDS_ImportType"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="3"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="5"
                SQLTask:DtsVariableName="User::MDS_BatchTag"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="129"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="7"
                SQLTask:DtsVariableName="User::MDS_LogFlag"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="3"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="8"
                SQLTask:DtsVariableName="$Package::Disable_RunBatch"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="3"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="9"
                SQLTask:DtsVariableName="User::RecordCount_Total"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="3"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="10"
                SQLTask:DtsVariableName="User::LineageID"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="3"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="6"
                SQLTask:DtsVariableName="User::MDS_VersionName"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="129"
                SQLTask:ParameterSize="-1" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:PrecedenceConstraints>
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Failure Loading Closeout.PrecedenceConstraints[Constraint]"
          DTS:CreationName=""
          DTS:DTSID="{6EC0DAB0-CD5E-41F2-B181-59D022D1D3C2}"
          DTS:From="Package\Failure Loading Closeout\Set RecordCount Error"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint"
          DTS:To="Package\Failure Loading Closeout\Write Failure Record" />
      </DTS:PrecedenceConstraints>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Get Dates from MDS to pass as variables"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{F6FDBD5C-BEFE-4C37-978A-7FCE13E40F30}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Get Dates from MDS to pass as variables"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2016; © 2015 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{87323F27-D30B-4DBD-B723-02E2B4F94F0B}"
          SQLTask:SqlStmtSourceType="Variable"
          SQLTask:SqlStatementSource="User::Current_Dates_Query"
          SQLTask:ResultType="ResultSetType_Rowset" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ResultBinding
            SQLTask:ResultName="0"
            SQLTask:DtsVariableName="User::Current_Date_List" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Get MDS Version Name"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{8C88511F-212C-4322-A2C2-1F700031C3E3}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Get MDS Version Name"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2016; © 2015 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{87323F27-D30B-4DBD-B723-02E2B4F94F0B}"
          SQLTask:SqlStmtSourceType="Variable"
          SQLTask:SqlStatementSource="User::MDS_VersionName_Source"
          SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ResultBinding
            SQLTask:ResultName="0"
            SQLTask:DtsVariableName="User::MDS_VersionName" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Get MDS Version Number"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{3B70F40B-3D3B-4477-8D47-21BC829BEB78}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Get MDS Version Number"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2016; © 2015 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{87323F27-D30B-4DBD-B723-02E2B4F94F0B}"
          SQLTask:SqlStmtSourceType="Variable"
          SQLTask:SqlStatementSource="User::MDS_Version_Number_Source"
          SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ResultBinding
            SQLTask:ResultName="0"
            SQLTask:DtsVariableName="User::MDS_Version_Number" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Get Pools to be exclude in DAX"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{4F742650-63C6-4454-AE97-2D17C92345C9}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Get Pools to be exclude in DAX"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2016; © 2015 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{87323F27-D30B-4DBD-B723-02E2B4F94F0B}"
          SQLTask:SqlStmtSourceType="Variable"
          SQLTask:SqlStatementSource="User::DAX_Pool_Exclude_Query"
          SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ResultBinding
            SQLTask:ResultName="0"
            SQLTask:DtsVariableName="User::DAX_Pool_Exclude" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Get Portfolios to exclude in DAX"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{E05F1785-CFAA-48F0-BC5E-DA81BCCA8A21}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Get Portfolios to exclude in DAX"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2016; © 2015 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{87323F27-D30B-4DBD-B723-02E2B4F94F0B}"
          SQLTask:SqlStmtSourceType="Variable"
          SQLTask:SqlStatementSource="User::DAX_Portfolio_Exclude_Query"
          SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ResultBinding
            SQLTask:ResultName="0"
            SQLTask:DtsVariableName="User::DAX_Portfolio_Exclude" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Loops for Each Date to Move data from cube to MDS"
      DTS:CreationName="STOCK:FOREACHLOOP"
      DTS:Description="Loops for Each Date"
      DTS:DTSID="{3AE5BEEA-AFE7-4308-9C0F-C0EA17DD8A67}"
      DTS:ExecutableType="STOCK:FOREACHLOOP"
      DTS:LocaleID="-1"
      DTS:ObjectName="Loops for Each Date to Move data from cube to MDS">
      <DTS:ForEachEnumerator
        DTS:CreationName="Microsoft.ForEachADOEnumerator"
        DTS:DTSID="{23319C00-9CC9-49EB-A787-ED271239C04E}"
        DTS:ObjectName="{86D16FFF-C9A3-4EAB-BB07-4BBC68A4E455}">
        <DTS:ObjectData>
          <FEEADO
            EnumType="EnumerateRowsInFirstTable"
            VarName="User::Current_Date_List" />
        </DTS:ObjectData>
      </DTS:ForEachEnumerator>
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS"
          DTS:CreationName="STOCK:SEQUENCE"
          DTS:Description="Sequence Container"
          DTS:DTSID="{18A2FA5C-440D-49C5-A4F8-2A31347CC59A}"
          DTS:ExecutableType="STOCK:SEQUENCE"
          DTS:LocaleID="-1"
          DTS:ObjectName="Copies_Data_From_Cube_to_MDS">
          <DTS:Variables />
          <DTS:PropertyExpression
            DTS:Name="Disable">@[User::MDS_TargetEntity_RecordCount]   ==0 ? False: True</DTS:PropertyExpression>
          <DTS:Executables>
            <DTS:Executable
              DTS:refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg"
              DTS:CreationName="Microsoft.Pipeline"
              DTS:DelayValidation="True"
              DTS:DTSID="{F6E6CB48-E334-4205-BB3D-26C55D0CA6E5}"
              DTS:ExecutableType="Microsoft.Pipeline"
              DTS:LocaleID="-1"
              DTS:ObjectName="Import Data into Stg"
              DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
              <DTS:Variables />
              <DTS:ObjectData>
                <pipeline
                  BLOBTempStoragePath=""
                  bufferTempStoragePath=""
                  version="1">
                  <components>
                    <component
                      refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Add Batch"
                      componentClassID="Microsoft.DerivedColumn"
                      contactInfo="Derived Column;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                      description="Creates new column values by applying expressions to transformation input columns. Create new columns or overwrite existing ones. For example, concatenate the values from the 'first name' and 'last name' column to make a 'full name' column."
                      name="Add Batch"
                      usesDispositions="true">
                      <inputs>
                        <input
                          refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Add Batch.Inputs[Derived Column Input]"
                          description="Input to the Derived Column Transformation"
                          name="Derived Column Input">
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Add Batch.Outputs[Derived Column Output]"
                          description="Default Output of the Derived Column Transformation"
                          exclusionGroup="1"
                          name="Derived Column Output"
                          synchronousInputId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Add Batch.Inputs[Derived Column Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Add Batch.Outputs[Derived Column Output].Columns[BatchTag]"
                              dataType="wstr"
                              errorOrTruncationOperation="Computation"
                              errorRowDisposition="FailComponent"
                              length="50"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Add Batch.Outputs[Derived Column Output].Columns[BatchTag]"
                              name="BatchTag"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Expression"
                                  name="Expression">(DT_WSTR,50)@[User::MDS_BatchTag]</property>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Friendly Expression"
                                  expressionType="Notify"
                                  name="FriendlyExpression">(DT_WSTR,50)@[User::MDS_BatchTag]</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Add Batch.Outputs[Derived Column Output].Columns[ImportType]"
                              dataType="i4"
                              errorOrTruncationOperation="Computation"
                              errorRowDisposition="FailComponent"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Add Batch.Outputs[Derived Column Output].Columns[ImportType]"
                              name="ImportType"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Expression"
                                  name="Expression">@[User::MDS_ImportType]</property>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Friendly Expression"
                                  expressionType="Notify"
                                  name="FriendlyExpression">@[User::MDS_ImportType]</property>
                              </properties>
                            </outputColumn>
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                        <output
                          refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Add Batch.Outputs[Derived Column Error Output]"
                          description="Error Output of the Derived Column Transformation"
                          exclusionGroup="1"
                          isErrorOut="true"
                          name="Derived Column Error Output"
                          synchronousInputId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Add Batch.Inputs[Derived Column Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Add Batch.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Add Batch.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                              name="ErrorCode"
                              specialFlags="1" />
                            <outputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Add Batch.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Add Batch.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                              name="ErrorColumn"
                              specialFlags="2" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Data Conversion Transformation"
                      componentClassID="Microsoft.DataConvert"
                      contactInfo="Data Conversion;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                      name="Data Conversion Transformation"
                      usesDispositions="true">
                      <inputs>
                        <input
                          refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Data Conversion Transformation.Inputs[Trim_Output_Data Conversion Transformation]"
                          name="Trim_Output_Data Conversion Transformation">
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Data Conversion Transformation.Outputs[Output]"
                          exclusionGroup="1"
                          name="Output"
                          synchronousInputId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Data Conversion Transformation.Inputs[Trim_Output_Data Conversion Transformation]">
                          <externalMetadataColumns />
                        </output>
                        <output
                          refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Data Conversion Transformation.Outputs[Error]"
                          exclusionGroup="1"
                          isErrorOut="true"
                          name="Error"
                          synchronousInputId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Data Conversion Transformation.Inputs[Trim_Output_Data Conversion Transformation]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Data Conversion Transformation.Outputs[Error].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Data Conversion Transformation.Outputs[Error].Columns[ErrorCode]"
                              name="ErrorCode"
                              specialFlags="1" />
                            <outputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Data Conversion Transformation.Outputs[Error].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Data Conversion Transformation.Outputs[Error].Columns[ErrorColumn]"
                              name="ErrorColumn"
                              specialFlags="2" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Derived Column"
                      componentClassID="Microsoft.DerivedColumn"
                      contactInfo="Derived Column;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                      description="Creates new column values by applying expressions to transformation input columns. Create new columns or overwrite existing ones. For example, concatenate the values from the 'first name' and 'last name' column to make a 'full name' column."
                      name="Derived Column"
                      usesDispositions="true">
                      <inputs>
                        <input
                          refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Derived Column.Inputs[Derived Column Input]"
                          description="Input to the Derived Column Transformation"
                          name="Derived Column Input">
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Derived Column.Outputs[Derived Column Output]"
                          description="Default Output of the Derived Column Transformation"
                          exclusionGroup="1"
                          name="Derived Column Output"
                          synchronousInputId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Derived Column.Inputs[Derived Column Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Derived Column.Outputs[Derived Column Output].Columns[LineageTMST]"
                              dataType="date"
                              errorOrTruncationOperation="Computation"
                              errorRowDisposition="FailComponent"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Derived Column.Outputs[Derived Column Output].Columns[LineageTMST]"
                              name="LineageTMST"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Expression"
                                  name="Expression">@[User::LineageTMST]</property>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Friendly Expression"
                                  expressionType="Notify"
                                  name="FriendlyExpression">@[User::LineageTMST]</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Derived Column.Outputs[Derived Column Output].Columns[LineageID]"
                              dataType="i4"
                              errorOrTruncationOperation="Computation"
                              errorRowDisposition="FailComponent"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Derived Column.Outputs[Derived Column Output].Columns[LineageID]"
                              name="LineageID"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Expression"
                                  name="Expression">@[User::LineageID]</property>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Friendly Expression"
                                  expressionType="Notify"
                                  name="FriendlyExpression">@[User::LineageID]</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Derived Column.Outputs[Derived Column Output].Columns[Version_Name]"
                              dataType="wstr"
                              errorOrTruncationOperation="Computation"
                              errorRowDisposition="FailComponent"
                              length="16"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Derived Column.Outputs[Derived Column Output].Columns[Version_Name]"
                              name="Version_Name"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Expression"
                                  name="Expression">@[User::MDS_VersionName]</property>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Friendly Expression"
                                  expressionType="Notify"
                                  name="FriendlyExpression">@[User::MDS_VersionName]</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Derived Column.Outputs[Derived Column Output].Columns[Curr_Date]"
                              dataType="wstr"
                              errorOrTruncationOperation="Computation"
                              errorRowDisposition="FailComponent"
                              length="70"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Derived Column.Outputs[Derived Column Output].Columns[Curr_Date]"
                              name="Curr_Date"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Expression"
                                  name="Expression">@[User::Current_Date]</property>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Friendly Expression"
                                  expressionType="Notify"
                                  name="FriendlyExpression">@[User::Current_Date]</property>
                              </properties>
                            </outputColumn>
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                        <output
                          refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Derived Column.Outputs[Derived Column Error Output]"
                          description="Error Output of the Derived Column Transformation"
                          exclusionGroup="1"
                          isErrorOut="true"
                          name="Derived Column Error Output"
                          synchronousInputId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Derived Column.Inputs[Derived Column Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Derived Column.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Derived Column.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                              name="ErrorCode"
                              specialFlags="1" />
                            <outputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Derived Column.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Derived Column.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                              name="ErrorColumn"
                              specialFlags="2" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Generate Hash Value"
                      componentClassID="Microsoft.ManagedComponentHost"
                      contactInfo="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum.;Microsoft Corporation; Microsoft SQL Server; Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;10"
                      description="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum."
                      name="Generate Hash Value"
                      version="10">
                      <properties>
                        <property
                          dataType="System.String"
                          description="Stores the source code of the component"
                          isArray="true"
                          name="SourceCode"
                          state="cdata">
                          <arrayElements
                            arrayElementCount="30">
                            <arrayElement
                              dataType="System.String"><![CDATA[SC_b2a146a9d314495da02f6acef45fca0d.csproj]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{0bf08896-695a-4f15-a850-27f2acc55939}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>SC_b2a146a9d314495da02f6acef45fca0d</RootNamespace>
    <AssemblyName>SC_b2a146a9d314495da02f6acef45fca0d</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.TxScript, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSRuntimeWrap, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSPipelineWrap, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.PipelineHost, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Compile Include="main.cs" />
    <Compile Include="BufferWrapper.cs" />
    <Compile Include="ComponentWrapper.cs" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="ScriptComponent" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="" DebugInfoCommandLine="" DebugInfoWorkingDir="" IconImageList="" />
        <Host Name="ScriptComponent" GeneratedNamespace="SC_b2a146a9d314495da02f6acef45fca0d" IconIndex="0"></Host>
        <ProjectClient>
          <HostIdentifier>SSIS_SC130</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[Properties\Resources.resx]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[main.cs]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[                #region Help:  Introduction to the Script Component
/* The Script Component allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services data flow.
 *
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script component. */
#endregion

                #region Namespaces
                using System;
                using System.Data;
                using System.Security.Cryptography;
                using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
                using Microsoft.SqlServer.Dts.Runtime.Wrapper;
#endregion

                /// <summary>
                /// This is the class to which to add your code.  Do not change the name, attributes, or parent
                /// of this class.
                /// </summary>
            [Microsoft.SqlServer.Dts.Pipeline.SSISScriptComponentEntryPointAttribute]
            public class ScriptMain : UserComponent
            {
                #region Help:  Using Integration Services variables and parameters
                /* To use a variable in this script, first ensure that the variable has been added to
                 * either the list contained in the ReadOnlyVariables property or the list contained in
                 * the ReadWriteVariables property of this script component, according to whether or not your
                 * code needs to write into the variable.  To do so, save this script, close this instance of
                 * Visual Studio, and update the ReadOnlyVariables and ReadWriteVariables properties in the
                 * Script Transformation Editor window.
                 * To use a parameter in this script, follow the same steps. Parameters are always read-only.
                 *
                 * Example of reading from a variable or parameter:
                 *  DateTime startTime = Variables.MyStartTime;
                 *
                 * Example of writing to a variable:
                 *  Variables.myStringVariable = "new value";
                 */
                #endregion

                #region Help:  Using Integration Services Connnection Managers
                /* Some types of connection managers can be used in this script component.  See the help topic
                 * "Working with Connection Managers Programatically" for details.
                 *
                 * To use a connection manager in this script, first ensure that the connection manager has
                 * been added to either the list of connection managers on the Connection Managers page of the
                 * script component editor.  To add the connection manager, save this script, close this instance of
                 * Visual Studio, and add the Connection Manager to the list.
                 *
                 * If the component needs to hold a connection open while processing rows, override the
                 * AcquireConnections and ReleaseConnections methods.
                 * 
                 * Example of using an ADO.Net connection manager to acquire a SqlConnection:
                 *  object rawConnection = Connections.SalesDB.AcquireConnection(transaction);
                 *  SqlConnection salesDBConn = (SqlConnection)rawConnection;
                 *
                 * Example of using a File connection manager to acquire a file path:
                 *  object rawConnection = Connections.Prices_zip.AcquireConnection(transaction);
                 *  string filePath = (string)rawConnection;
                 *
                 * Example of releasing a connection manager:
                 *  Connections.SalesDB.ReleaseConnection(rawConnection);
                 */
                #endregion

                #region Help:  Firing Integration Services Events
                /* This script component can fire events.
                 *
                 * Example of firing an error event:
                 *  ComponentMetaData.FireError(10, "Process Values", "Bad value", "", 0, out cancel);
                 *
                 * Example of firing an information event:
                 *  ComponentMetaData.FireInformation(10, "Process Values", "Processing has started", "", 0, fireAgain);
                 *
                 * Example of firing a warning event:
                 *  ComponentMetaData.FireWarning(10, "Process Values", "No rows were received", "", 0);
                 */
                #endregion

                /// <summary>
                /// This method is called once, before rows begin to be processed in the data flow.
                ///
                /// You can remove this method if you don't need to do anything here.
                /// </summary>
                public override void PreExecute()
                {
                    base.PreExecute();
                    /*
                     * Add your code here
                     */
                }

                /// <summary>
                /// This method is called after all the rows have passed through this component.
                ///
                /// You can delete this method if you don't need to do anything here.
                /// </summary>
                public override void PostExecute()
                {
                    base.PostExecute();
                    /*
                     * Add your code here
                     */
                }

                /// <summary>
                /// This method is called once for every row that passes through the component from Input0.
                ///
                /// Example of reading a value from a column in the the row:
                ///  string zipCode = Row.ZipCode
                ///
                /// Example of writing a value to a column in the row:
                ///  Row.ZipCode = zipCode
                /// </summary>
                /// <param name="Row">The row that is currently passing through the component</param>
                private SHA256 sha = new SHA256CryptoServiceProvider(); // used to create the SHA256 hash
                public override void Input0_ProcessInputRow(Input0Buffer Row)
                {
                    // concatenate all strings. NULL values are replaced with the empty string.
                    string hashSource =
                          (Row.CurrDate_IsNull ? "" : Row.CurrDate.ToString())
                        + (Row.RiskPortfolioCode_IsNull ? "" : Row.RiskPortfolioCode.ToString())
                          + (Row.PoolFundName_IsNull ? "" : Row.PoolFundName.ToString())
                          + (Row.VersionName_IsNull ? "" : Row.VersionName.ToString())
                   
                        ;
                    byte[] hashBytes = sha.ComputeHash(System.Text.UnicodeEncoding.Unicode.GetBytes(hashSource));
                    // convert the byte stream to a string
                    System.Text.StringBuilder sb = new System.Text.StringBuilder();
                    for (int i = 0; i < hashBytes.Length; i++)
                    {
                        sb.Append(hashBytes[i].ToString("X2"));
                    }
                    Row.Hashvalue = "0x" + sb.ToString(); // add the result to the output
                }
            }


]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[BufferWrapper.cs]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services buffer wrappers
*  This module defines classes for accessing data flow buffers
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */



using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;

public class Input0Buffer: ScriptBuffer

{
    public Input0Buffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public String VersionName
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[0]);
        }
    }
    public bool VersionName_IsNull
    {
        get
        {
            return IsNull(0);
        }
    }

    public String RiskPortfolioCode
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[1]);
        }
    }
    public bool RiskPortfolioCode_IsNull
    {
        get
        {
            return IsNull(1);
        }
    }

    public String PoolFundName
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[2]);
        }
    }
    public bool PoolFundName_IsNull
    {
        get
        {
            return IsNull(2);
        }
    }

    public String CurrDate
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[3]);
        }
    }
    public bool CurrDate_IsNull
    {
        get
        {
            return IsNull(3);
        }
    }

    public String Hashvalue
    {
        set
        {
            this[4] = value;
        }
    }
    public bool Hashvalue_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(4);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public bool NextRow()
    {
        return base.NextRow();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}
]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[Properties\Settings.Designer.cs]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_b2a146a9d314495da02f6acef45fca0d.Properties.Settings.get_Default():SC_b2a146a9d314495da02f6acef45fca0d.Properties.Sett" +
    "ings")]

namespace SC_b2a146a9d314495da02f6acef45fca0d.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}
]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[ComponentWrapper.cs]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services component wrapper
*  This module defines the base class for your component
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;

public class UserComponent: ScriptComponent
{
    public Connections Connections;
    public Variables Variables;
    public UserComponent()
    {
        Connections = new Connections(this);
        Variables = new Variables(this);
    }

    public override void ProcessInput(int InputID, string InputName, PipelineBuffer Buffer, OutputNameMap OutputMap)
    {

        if (InputName.Equals(@"Input 0", StringComparison.Ordinal))
        {
            Input0_ProcessInput(new Input0Buffer(Buffer, GetColumnIndexes(InputID), OutputMap));
        }

    }

    public virtual void Input0_ProcessInput(Input0Buffer Buffer)
    {
        while (Buffer.NextRow())
        {
            Input0_ProcessInputRow(Buffer);
        }
    }

    public virtual void Input0_ProcessInputRow(Input0Buffer Row)
    {
    }

}

public class Connections
{
    ScriptComponent ParentComponent;

    public Connections(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

}

public class Variables
{
    ScriptComponent ParentComponent;

    public Variables(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

}
]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[Project]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[UTF16LE]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:CodeName>SC_b2a146a9d314495da02f6acef45fca0d</msb:CodeName>
		<msb:Language>msBuild</msb:Language>
		<msb:DisplayName>SC_b2a146a9d314495da02f6acef45fca0d</msb:DisplayName>
		<msb:ProjectId>{FB8A681F-DD0F-4015-8B8D-D2F55F9625CE}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="SC_b2a146a9d314495da02f6acef45fca0d.csproj"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="main.cs"/>
		<msb:File Include="BufferWrapper.cs"/>
		<msb:File Include="ComponentWrapper.cs"/>
	</msb:ItemGroup>
</c:Project>]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[Properties\AssemblyInfo.cs]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("SC_b2a146a9d314495da02f6acef45fca0d")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("SC_b2a146a9d314495da02f6acef45fca0d")]
[assembly: AssemblyCopyright("Copyright @  2019")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.0.0")]
]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[Properties\Settings.settings]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[Properties\Resources.Designer.cs]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_b2a146a9d314495da02f6acef45fca0d.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_b2a146a9d314495da02f6acef45fca0d.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_b2a146a9d314495da02f6acef45fca0d.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace SC_b2a146a9d314495da02f6acef45fca0d.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SC_b2a146a9d314495da02f6acef45fca0d.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}
]]></arrayElement>
                          </arrayElements>
                        </property>
                        <property
                          dataType="System.String"
                          description="Stores the binary representation of the component"
                          isArray="true"
                          name="BinaryCode"
                          state="cdata">
                          <arrayElements
                            arrayElementCount="2">
                            <arrayElement
                              dataType="System.String"><![CDATA[SC_b2a146a9d314495da02f6acef45fca0d.dll]]></arrayElement>
                            <arrayElement
                              dataType="System.String"><![CDATA[TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAC3BVV0AAAAAAAAAAOAAIiALATAAABYAAAAIAAAAAAAAXjUA
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACAAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAAw1AABPAAAAAEAAAEgEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAZBUAAAAgAAAAFgAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAEgEAAAAQAAAAAYAAAAYAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAHgAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAABA
NQAAAAAAAEgAAAACAAUA1CIAAIARAAABAAAAAAAAAFQ0AAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4CKBAAAAoqHgIoEQAACioTMAQAyAAAAAEAABEDbw0AAAYt
DQNvDAAABm8SAAAKKwVyAQAAcANvCQAABi0NA28IAAAGbxIAAAorBXIBAABwA28LAAAGLQ0DbwoA
AAZvEgAACisFcgEAAHADbwcAAAYtDQNvBgAABm8SAAAKKwVyAQAAcCgTAAAKCgJ7AQAABCgUAAAK
Bm8VAAAKbxYAAAoLcxcAAAoMFg0rHAgHCY8fAAABcgMAAHAoGAAACm8ZAAAKJgkXWA0JB45pMt4D
cgkAAHAIbxIAAAooGgAACm8OAAAGKkoCcxsAAAp9AQAABAIoEgAABioqAgMEBSgcAAAKKlICex0A
AAoCex4AAAoWlG8fAAAKKiICFiggAAAKKlICex0AAAoCex4AAAoXlG8fAAAKKiICFyggAAAKKlIC
ex0AAAoCex4AAAoYlG8fAAAKKiICGCggAAAKKlICex0AAAoCex4AAAoZlG8fAAAKKiICGSggAAAK
KiYCGgMoIQAACipaAywIAhooIgAACipyDwAAcHMjAAAKeh4CKCQAAAoqHgIoJQAACip+AigmAAAK
AgJzFgAABn0CAAAEAgJzFwAABn0DAAAEKpIEcqwAAHAabycAAAosFQIFAgMoKAAACg4EcwUAAAZv
FAAABipKKwcCA28VAAAGA28QAAAGLfEqBio6AigpAAAKAgN9BAAABCo6AigpAAAKAgN9BQAABCoe
AigpAAAKKq5+BgAABC0ecrwAAHDQBwAAAigqAAAKbysAAApzLAAACoAGAAAEfgYAAAQqGn4HAAAE
Kh4CgAcAAAQqGn4IAAAEKh4CKC0AAAoqLnMdAAAGgAgAAAQqAAAAQlNKQgEAAQAAAAAADAAAAHY0
LjAuMzAzMTkAAAAABQBsAAAAgAYAACN+AADsBgAAdAcAACNTdHJpbmdzAAAAAGAOAAAwAQAAI1VT
AJAPAAAQAAAAI0dVSUQAAACgDwAA4AEAACNCbG9iAAAAAAAAAAIAAAFXFaIBCQEAAAD6ATMAFgAA
AQAAACUAAAAIAAAACAAAAB4AAAAPAAAALQAAABAAAAABAAAAAwAAAA0AAAAOAAAAAQAAAAUAAAAB
AAAAAACGAwEAAAAAAAYAUgJyBQYA5gJyBQYAngFfBQ8A5gUAAAYAywGKBAYANQKKBAYAFgKKBAYA
zQKKBAYAcgKKBAYAiwKKBAYA4gGKBAYA/QE3AwoApgLSAAYAAQBJBwYABwUeBwoAMQXSAA4AIgXS
AAoA0wTSAAoAvAbSAAYAfwY0BAYAgQFfBQYAQgWSBQYAxwR1BBIAUQFwAxIAsgFwAxIALAFgBAYA
ZgFyBQYAXQM0BAYALgMeBwYAOwRJBwYAGwM0BBYA6wRJBwYAnAQ0BAYAtgQ0BAYA8wA0BAYAgwA0
BAYAageKBAAAAAAIAAAAAAABAAEAAQAQAFUEAAAQAAEAAQABABAAFQUAAEEAAgAFAAEAEACeBgAA
TQACABIAAQAQAGwGAABRAAQAFgABABAAJAYAAFEABQAXAAAAEACZBfUFUQAGABgAAAEQAFwG9QVp
AAgAHAABABkAsAAGAGwGtAAGACQGuAABAKwGvAABAKwGvAARAEkEwAARABwBxAARAFEAyABQIAAA
AADGAAQDBgABAFggAAAAAMYADwMGAAEAYCAAAAAAxgAqB8wAAQA0IQAAAACGGFIFBgACAEchAAAA
AIYYUgVTAAIAUiEAAAAAhgi4ACQABQBnIQAAAACGCOMDdQAFAHAhAAAAAIYIYQAkAAUAhSEAAAAA
hgiuA3UABQCOIQAAAACGCKcAJAAFAKMhAAAAAIYIywN1AAUArCEAAAAAhghEASQABQDBIQAAAACG
CPoDdQAFAMohAAAAAIYIIAMQAAUA1CEAAAAAhggOBNIABgDrIQAAAACGAEEHdQAHAPMhAAAAAIYA
hgZ1AAcA+yEAAAAAhhhSBQYABwAbIgAAAADGABEH1wAHAEAiAAAAAMYBCgfMAAsAUyIAAAAAxgEq
B8wADABVIgAAAACGGFIF4QANAGQiAAAAAIYYUgXhAA4AcyIAAAAAgxhSBQYADwB7IgAAAACTCD4F
5wAPAKciAAAAAJMIBAHsAA8AriIAAAAAkwgQAfEADwC2IgAAAACWCJIG9wAQAL0iAAAAAIYYUgUG
ABAAxSIAAAAAkRhYBfwAEAAAAAEARQcAAAEANwUAAAIANwYAAAMA4QQAAAEAKAMAAAEAKAMAAAEA
EQAAAAIAyAAAAAMANwUAAAQA4QQAAAEANwUAAAEARQcAAAEAwgYAAAEAwgYAAAEAKAMJAFIFAQAR
AFIFBgAZAFIFCgApAFIFEAAxAFIFEAA5AFIFEABBAFIFEABJAFIFEABRAFIFEABZAFIFEABhAFIF
EABpAFIFBgCpAFIFBgDJAFIFFQDZAFIFBgCZAAQDBgCZAA8DBgChAFEDJADhAHgGKADpAHcAMADp
AC4GNQDxAGQDOwB5AFIFBgD5AFEDQgB5AEoARwDhAHgGTQABAVIFBgCBAFIFUwCBADcFXQCBADcG
YQCJAFoDZQCBABwEagCBACsEbwCBACMEAQAJAVIFEACBAEEHdQCBAIYGdQCZAFIFBgDhAGUGeQCZ
AEsGgQChAFIFBgAZAZUAhwAZAWYHkACxAFIFlgDRAFIFBgAuAAsAFwEuABMAIAEuABsAPwEuACMA
SAEuACsAcQEuADMAcQEuADsAcQEuAEMASAEuAEsAdwEuAFMAcQEuAFsAjgFDAGMA2AHjAGsA2AEB
AXsA2AFpAXMAPwGJAXMAPwEbAAMAAQAHAAsACAANAAAAvAAAAQAA5wMEAQAAZQAAAQAAsgMEAQAA
qwAAAQAAzwMEAQAASAEAAQAA/gMEAQAAJAMAAQAAEgQEAQAAQgUIAQAAJAENAQAAlgYSAQIABgAD
AAIABwAFAAIACAAHAAIACQAJAAIACgALAAIACwANAAIADAAPAAIADQARAAEADgATAAEADwAVAAIA
GQAXAAIAGgAZAAEAGwAZAAIAHAAbAASAAAABAAAAAAAAAAAAAAAAACYAAAAEAAAAAAAAAAAAAACe
AB0AAAAAAA0AAAAAAAAAAAAAAKcAzAYAAAAADQAAAAAAAAAAAAAApwDpBgAAAAAEAAAAAAAAAAAA
AACeADQEAAAAAAQAAAAAAAAAAAAAAJ4A+AAAAAAAAAAAAAEAAACjBQAAAAAAU0hBMjU2ADxNb2R1
bGU+AElucHV0SUQAc2hhAG1zY29ybGliAFNDX2IyYTE0NmE5ZDMxNDQ5NWRhMDJmNmFjZWY0NWZj
YTBkAEFwcGVuZABkZWZhdWx0SW5zdGFuY2UAZ2V0X1Jpc2tQb3J0Zm9saW9Db2RlAGdldF9Vbmlj
b2RlAFJ1bnRpbWVUeXBlSGFuZGxlAEdldFR5cGVGcm9tSGFuZGxlAGdldF9Qb29sRnVuZE5hbWUA
Z2V0X1ZlcnNpb25OYW1lAElucHV0TmFtZQBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5QaXBlbGlu
ZQBUeXBlAFN5c3RlbS5Db3JlAGdldF9DdWx0dXJlAHNldF9DdWx0dXJlAHJlc291cmNlQ3VsdHVy
ZQBBcHBsaWNhdGlvblNldHRpbmdzQmFzZQBnZXRfQ3VyckRhdGUARWRpdG9yQnJvd3NhYmxlU3Rh
dGUAQ29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUARGVidWdnZXJOb25Vc2VyQ29kZUF0dHJpYnV0
ZQBEZWJ1Z2dhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dzYWJsZUF0dHJpYnV0ZQBBc3NlbWJseVRp
dGxlQXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAFRhcmdldEZyYW1ld29ya0F0
dHJpYnV0ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUAQXNzZW1ibHlEZXNjcmlwdGlv
bkF0dHJpYnV0ZQBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAEFzc2VtYmx5UHJvZHVj
dEF0dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJpYnV0ZQBTU0lTU2NyaXB0Q29tcG9uZW50
RW50cnlQb2ludEF0dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlBdHRyaWJ1dGUAUnVudGltZUNvbXBh
dGliaWxpdHlBdHRyaWJ1dGUAUHJlRXhlY3V0ZQBQb3N0RXhlY3V0ZQBCeXRlAHNldF9IYXNodmFs
dWUARW5jb2RpbmcAU3lzdGVtLlJ1bnRpbWUuVmVyc2lvbmluZwBUb1N0cmluZwBHZXRTdHJpbmcA
Q29tcHV0ZUhhc2gAU3lzdGVtLkNvbXBvbmVudE1vZGVsAFNDX2IyYTE0NmE5ZDMxNDQ5NWRhMDJm
NmFjZWY0NWZjYTBkLmRsbABnZXRfUmlza1BvcnRmb2xpb0NvZGVfSXNOdWxsAGdldF9Qb29sRnVu
ZE5hbWVfSXNOdWxsAGdldF9WZXJzaW9uTmFtZV9Jc051bGwAZ2V0X0N1cnJEYXRlX0lzTnVsbABz
ZXRfSGFzaHZhbHVlX0lzTnVsbABTZXROdWxsAHNldF9JdGVtAFN5c3RlbQBIYXNoQWxnb3JpdGht
AHJlc291cmNlTWFuAFNjcmlwdE1haW4AU3lzdGVtLkNvbmZpZ3VyYXRpb24AU3lzdGVtLkdsb2Jh
bGl6YXRpb24AU3lzdGVtLlJlZmxlY3Rpb24ASW52YWxpZE9wZXJhdGlvbkV4Y2VwdGlvbgBTdHJp
bmdDb21wYXJpc29uAEN1bHR1cmVJbmZvAE91dHB1dE5hbWVNYXAAT3V0cHV0TWFwAFNIQTI1NkNy
eXB0b1NlcnZpY2VQcm92aWRlcgBTdHJpbmdCdWlsZGVyAElucHV0MEJ1ZmZlcgBQaXBlbGluZUJ1
ZmZlcgBTY3JpcHRCdWZmZXIAZ2V0X1Jlc291cmNlTWFuYWdlcgAuY3RvcgAuY2N0b3IAU3lzdGVt
LkRpYWdub3N0aWNzAFN5c3RlbS5SdW50aW1lLkNvbXBpbGVyU2VydmljZXMAU3lzdGVtLlJlc291
cmNlcwBTQ19iMmExNDZhOWQzMTQ0OTVkYTAyZjZhY2VmNDVmY2EwZC5Qcm9wZXJ0aWVzLlJlc291
cmNlcy5yZXNvdXJjZXMARGVidWdnaW5nTW9kZXMAU0NfYjJhMTQ2YTlkMzE0NDk1ZGEwMmY2YWNl
ZjQ1ZmNhMGQuUHJvcGVydGllcwBWYXJpYWJsZXMAR2V0Qnl0ZXMAQnVmZmVyQ29sdW1uSW5kZXhl
cwBHZXRDb2x1bW5JbmRleGVzAFNldHRpbmdzAEVxdWFscwBDb25uZWN0aW9ucwBDb25jYXQAT2Jq
ZWN0AEVuZE9mUm93c2V0AGdldF9EZWZhdWx0AFVzZXJDb21wb25lbnQAUGFyZW50Q29tcG9uZW50
AFNjcmlwdENvbXBvbmVudABNaWNyb3NvZnQuU3FsU2VydmVyLlR4U2NyaXB0AE1pY3Jvc29mdC5T
cWxTZXJ2ZXIuUGlwZWxpbmVIb3N0AElucHV0MF9Qcm9jZXNzSW5wdXQAU3lzdGVtLlRleHQASW5w
dXQwX1Byb2Nlc3NJbnB1dFJvdwBOZXh0Um93AFN5c3RlbS5TZWN1cml0eS5DcnlwdG9ncmFwaHkA
Z2V0X0Fzc2VtYmx5AAAAAQAFWAAyAAAFMAB4AACAm0kAcwBOAHUAbABsACAAcAByAG8AcABlAHIA
dAB5ACAAYwBhAG4AbgBvAHQAIABiAGUAIABzAGUAdAAgAHQAbwAgAEYAYQBsAHMAZQAuACAAQQBz
AHMAaQBnAG4AIABhACAAdgBhAGwAdQBlACAAdABvACAAdABoAGUAIABjAG8AbAB1AG0AbgAgAGkA
bgBzAHQAZQBhAGQALgAAD0kAbgBwAHUAdAAgADAAAHFTAEMAXwBiADIAYQAxADQANgBhADkAZAAz
ADEANAA0ADkANQBkAGEAMAAyAGYANgBhAGMAZQBmADQANQBmAGMAYQAwAGQALgBQAHIAbwBwAGUA
cgB0AGkAZQBzAC4AUgBlAHMAbwB1AHIAYwBlAHMAAAAAE/m4B+SqKESv9Zh5zMwgrAAEIAEBCAMg
AAEFIAEBEREEIAEBDgUgAQERYQgHBA4dBRI9CAMgAA4HAAQODg4ODgQAABJ1BSABHQUOBiABHQUd
BQQgAQ4OBSABEj0OBQACDg4OCSADARJFHQgSSQMGEkUDBh0IBCABDggEIAECCAUgAgEIHAMgAAIH
IAICDhGAiQUgAR0ICAgAARKAjRGAkQUgABKAlQcgAgEOEoCVCLd6XFYZNOCJCImEXc2AgMyRAwYS
OQMGEhQDBhIYAwYSTQMGElkDBhJdAwYSIAUgAQESDAQgAQECCSAEAQgOEkUSSQUgAQESTQQAABJZ
BAAAEl0FAAEBEl0EAAASIAMAAAEDKAAOAygAAgQIABJZBAgAEl0ECAASIAgBAAgAAAAAAB4BAAEA
VAIWV3JhcE5vbkV4Y2VwdGlvblRocm93cwEIAQACAAAAAAAoAQAjU0NfYjJhMTQ2YTlkMzE0NDk1
ZGEwMmY2YWNlZjQ1ZmNhMGQAAAUBAAAAABYBABFDb3B5cmlnaHQgQCAgMjAxOQAASQEAGi5ORVRG
cmFtZXdvcmssVmVyc2lvbj12NC41AQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRIuTkVUIEZyYW1l
d29yayA0LjUEAQAAAAAAALQAAADOyu++AQAAAJEAAABsU3lzdGVtLlJlc291cmNlcy5SZXNvdXJj
ZVJlYWRlciwgbXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJs
aWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5I1N5c3RlbS5SZXNvdXJjZXMuUnVudGltZVJlc291
cmNlU2V0AgAAAAAAAAAAAAAAUEFEUEFEULQAAAA0NQAAAAAAAAAAAABONQAAACAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAQDUAAAAAAAAAAAAAAABfQ29yRGxsTWFpbgBtc2NvcmVlLmRsbAAAAAAA/yUA
IAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAABABAAAAAYAACAAAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAAAABI
AAAAWEAAAOwDAAAAAAAAAAAAAOwDNAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAA
AAC9BO/+AAABAAAAAQAAAAAAAAABAAAAAAA/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAARAAA
AAEAVgBhAHIARgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBvAG4A
AAAAAAAAsARMAwAAAQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAAAoAwAAAQAwADAAMAAw
ADAANABiADAAAAAaAAEAAQBDAG8AbQBtAGUAbgB0AHMAAAAAAAAAIgABAAEAQwBvAG0AcABhAG4A
eQBOAGEAbQBlAAAAAAAAAAAAcAAkAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAA
AFMAQwBfAGIAMgBhADEANAA2AGEAOQBkADMAMQA0ADQAOQA1AGQAYQAwADIAZgA2AGEAYwBlAGYA
NAA1AGYAYwBhADAAZAAAADAACAABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAALgAw
AC4AMAAAAHAAKAABAEkAbgB0AGUAcgBuAGEAbABOAGEAbQBlAAAAUwBDAF8AYgAyAGEAMQA0ADYA
YQA5AGQAMwAxADQANAA5ADUAZABhADAAMgBmADYAYQBjAGUAZgA0ADUAZgBjAGEAMABkAC4AZABs
AGwAAABIABIAAQBMAGUAZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQAAABDAG8AcAB5AHIAaQBnAGgA
dAAgAEAAIAAgADIAMAAxADkAAAAqAAEAAQBMAGUAZwBhAGwAVAByAGEAZABlAG0AYQByAGsAcwAA
AAAAAAAAAHgAKAABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4AYQBtAGUAAABTAEMAXwBiADIA
YQAxADQANgBhADkAZAAzADEANAA0ADkANQBkAGEAMAAyAGYANgBhAGMAZQBmADQANQBmAGMAYQAw
AGQALgBkAGwAbAAAAGgAJAABAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAAAAAAUwBDAF8AYgAyAGEA
MQA0ADYAYQA5AGQAMwAxADQANAA5ADUAZABhADAAMgBmADYAYQBjAGUAZgA0ADUAZgBjAGEAMABk
AAAANAAIAAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgAwAC4AMAAAADgA
CAABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADAALgAwAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAwAAABgNQAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=]]></arrayElement>
                          </arrayElements>
                        </property>
                        <property
                          dataType="System.String"
                          description="Specifies the name of the Microsoft Visual Studio Tools for Applications project. Project names must be unique within a package."
                          name="VSTAProjectName"
                          typeConverter="NOTBROWSABLE">SC_b2a146a9d314495da02f6acef45fca0d</property>
                        <property
                          dataType="System.String"
                          description="Specifies the programming language used by the script."
                          name="ScriptLanguage"
                          typeConverter="Microsoft.SqlServer.VSTAHosting.ScriptingLanguages">CSharp</property>
                        <property
                          dataType="System.String"
                          description="Specifies a comma-separated list of read-only variables."
                          name="ReadOnlyVariables"
                          UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIVariablePickerDlg"></property>
                        <property
                          dataType="System.String"
                          description="Specifies a comma-separated list of read/write variables."
                          name="ReadWriteVariables"
                          UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIWriteableVariablePickerDlg"></property>
                        <property
                          dataType="System.String"
                          description="List of breakpoints present on the script."
                          isArray="true"
                          name="BreakpointCollection"
                          typeConverter="NOTBROWSABLE">
                          <arrayElements
                            arrayElementCount="0" />
                        </property>
                        <property
                          dataType="System.String"
                          description="Checksum to match component metedata against compiled codes."
                          name="MetadataChecksum"
                          typeConverter="NOTBROWSABLE">9a580ec46cdd5d75a077960c751819de</property>
                        <property
                          dataType="System.String"
                          description="Checksum to match component metedata against compiled codes."
                          name="MetadataShaChecksum"
                          typeConverter="NOTBROWSABLE">a2c444e980e97d25a933110405961c880e4a36e3</property>
                        <property
                          dataType="System.String"
                          name="UserComponentTypeName">Microsoft.ScriptComponentHost</property>
                      </properties>
                      <inputs>
                        <input
                          refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Generate Hash Value.Inputs[Input 0]"
                          hasSideEffects="true"
                          name="Input 0">
                          <inputColumns>
                            <inputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Generate Hash Value.Inputs[Input 0].Columns[VersionName]"
                              cachedDataType="wstr"
                              cachedLength="16"
                              cachedName="Version_Name"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Derived Column.Outputs[Derived Column Output].Columns[Version_Name]"
                              name="VersionName" />
                            <inputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Generate Hash Value.Inputs[Input 0].Columns[[RiskPortfolioCode]]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="[RiskPortfolioCode]"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].Columns[[RiskPortfolioCode]]" />
                            <inputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Generate Hash Value.Inputs[Input 0].Columns[[PoolFundName]]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="[PoolFundName]"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].Columns[[PoolFundName]]" />
                            <inputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Generate Hash Value.Inputs[Input 0].Columns[Curr_Date]"
                              cachedDataType="wstr"
                              cachedLength="8"
                              cachedName="Curr_Date"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Derived Column.Outputs[Derived Column Output].Columns[Curr_Date]" />
                          </inputColumns>
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Generate Hash Value.Outputs[Output 0]"
                          name="Output 0"
                          synchronousInputId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Generate Hash Value.Inputs[Input 0]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Generate Hash Value.Outputs[Output 0].Columns[Hashvalue]"
                              dataType="wstr"
                              length="256"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Generate Hash Value.Outputs[Output 0].Columns[Hashvalue]"
                              name="Hashvalue" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination"
                      componentClassID="Microsoft.OLEDBDestination"
                      contactInfo="OLE DB Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;4"
                      description="OLE DB Destination"
                      name="OLE DB Destination"
                      usesDispositions="true"
                      version="4">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                          name="CommandTimeout">0</property>
                        <property
                          dataType="System.String"
                          description="Specifies the name of the database object used to open a rowset."
                          name="OpenRowset">[stg].[LIQUID_tblFilterEDMSecIdRM_Leaf]</property>
                        <property
                          dataType="System.String"
                          description="Specifies the variable that contains the name of the database object used to open a rowset."
                          name="OpenRowsetVariable">User::MDS_StgTableName</property>
                        <property
                          dataType="System.String"
                          description="The SQL command to be executed."
                          name="SqlCommand"
                          UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor"></property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the column code page to use when code page information is unavailable from the data source."
                          name="DefaultCodePage">1252</property>
                        <property
                          dataType="System.Boolean"
                          description="Forces the use of the DefaultCodePage property value when describing character data."
                          name="AlwaysUseDefaultCodePage">false</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the mode used to access the database."
                          name="AccessMode"
                          typeConverter="AccessMode">4</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the values supplied for identity columns will be copied to the destination. If false, values for identity columns will be auto-generated at the destination. Applies only if fast load is turned on."
                          name="FastLoadKeepIdentity">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the columns containing null will have null inserted in the destination. If false, columns containing null will have their default values inserted at the destination. Applies only if fast load is turned on."
                          name="FastLoadKeepNulls">false</property>
                        <property
                          dataType="System.String"
                          description="Specifies options to be used with fast load.  Applies only if fast load is turned on."
                          name="FastLoadOptions">TABLOCK,CHECK_CONSTRAINTS</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies when commits are issued during data insertion.  A value of 0 specifies that one commit will be issued at the end of data insertion.  Applies only if fast load is turned on."
                          name="FastLoadMaxInsertCommitSize">2147483647</property>
                      </properties>
                      <connections>
                        <connection
                          refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Connections[OleDbConnection]"
                          connectionManagerID="{87323F27-D30B-4DBD-B723-02E2B4F94F0B}:external"
                          connectionManagerRefId="Project.ConnectionManagers[MDS]"
                          description="The OLE DB runtime connection used to access the database."
                          name="OleDbConnection" />
                      </connections>
                      <inputs>
                        <input
                          refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input]"
                          errorOrTruncationOperation="Insert"
                          errorRowDisposition="FailComponent"
                          hasSideEffects="true"
                          name="OLE DB Destination Input">
                          <inputColumns>
                            <inputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[ImportType]"
                              cachedDataType="i4"
                              cachedName="ImportType"
                              externalMetadataColumnId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[ImportType]"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Add Batch.Outputs[Derived Column Output].Columns[ImportType]" />
                            <inputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[BatchTag]"
                              cachedDataType="wstr"
                              cachedLength="50"
                              cachedName="BatchTag"
                              externalMetadataColumnId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[BatchTag]"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Add Batch.Outputs[Derived Column Output].Columns[BatchTag]" />
                            <inputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[TransactionID]"
                              cachedDataType="i4"
                              cachedName="TransactionID"
                              externalMetadataColumnId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[TransactionID]"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Row_Number.Outputs[Output0].Columns[TransactionID]" />
                            <inputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[LineageTMST]"
                              cachedDataType="date"
                              cachedName="LineageTMST"
                              externalMetadataColumnId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[LineageTMST]"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Derived Column.Outputs[Derived Column Output].Columns[LineageTMST]" />
                            <inputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[LineageID]"
                              cachedDataType="i4"
                              cachedName="LineageID"
                              externalMetadataColumnId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[LineageID]"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Derived Column.Outputs[Derived Column Output].Columns[LineageID]" />
                            <inputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[Hashvalue]"
                              cachedDataType="wstr"
                              cachedLength="256"
                              cachedName="Hashvalue"
                              externalMetadataColumnId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[Code]"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Generate Hash Value.Outputs[Output 0].Columns[Hashvalue]" />
                            <inputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[[AggLevel]]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="[AggLevel]"
                              externalMetadataColumnId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[Agg_Level]"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].Columns[[AggLevel]]" />
                            <inputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[[PoolFundBmk]]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="[PoolFundBmk]"
                              externalMetadataColumnId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[Pool_Bmk]"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].Columns[[PoolFundBmk]]" />
                            <inputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[[RiskPortfolioName]]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="[RiskPortfolioName]"
                              externalMetadataColumnId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[Portfolio_Name]"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].Columns[[RiskPortfolioName]]" />
                            <inputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[[RiskPortfolioCode]]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="[RiskPortfolioCode]"
                              externalMetadataColumnId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[Portfolio_Code]"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].Columns[[RiskPortfolioCode]]" />
                            <inputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[[PoolFundName]]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="[PoolFundName]"
                              externalMetadataColumnId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[Pool_Name]"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].Columns[[PoolFundName]]" />
                            <inputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[[SubAssetClass]]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="[SubAssetClass]"
                              externalMetadataColumnId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[Sub_Asset_Class]"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].Columns[[SubAssetClass]]" />
                            <inputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[[PoolContributionToActivePct_Current]]"
                              cachedDataType="r8"
                              cachedName="[PoolContributionToActivePct_Current]"
                              externalMetadataColumnId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[Pool_ContributionToActivePct]"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].Columns[[PoolContributionToActivePct_Current]]" />
                            <inputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[[PoolActiveHDVar_Current]]"
                              cachedDataType="r8"
                              cachedName="[PoolActiveHDVar_Current]"
                              externalMetadataColumnId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[Pool_ActiveHDVar]"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].Columns[[PoolActiveHDVar_Current]]" />
                            <inputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[[PortfolioBmk]]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="[PortfolioBmk]"
                              externalMetadataColumnId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[Portfolio_Bmk]"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].Columns[[PortfolioBmk]]" />
                            <inputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[[MarketValueCurrent]]"
                              cachedDataType="r8"
                              cachedName="[MarketValueCurrent]"
                              externalMetadataColumnId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[Market_Value]"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].Columns[[MarketValueCurrent]]" />
                            <inputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[[PfActiveRiskPCt_Current]]"
                              cachedDataType="r8"
                              cachedName="[PfActiveRiskPCt_Current]"
                              externalMetadataColumnId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[Portfolio_ActiveRiskPCt]"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].Columns[[PfActiveRiskPCt_Current]]" />
                            <inputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[Curr_Date]"
                              cachedDataType="wstr"
                              cachedLength="8"
                              cachedName="Curr_Date"
                              externalMetadataColumnId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[Risk_Date]"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Derived Column.Outputs[Derived Column Output].Columns[Curr_Date]" />
                            <inputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[[AssetClass]]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="[AssetClass]"
                              externalMetadataColumnId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[Asset_Class]"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].Columns[[AssetClass]]" />
                            <inputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[[RiskVersionKey]]"
                              cachedDataType="i8"
                              cachedName="[RiskVersionKey]"
                              externalMetadataColumnId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[Risk_Date_Version]"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].Columns[[RiskVersionKey]]" />
                            <inputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[[RiskVersionName]]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="[RiskVersionName]"
                              externalMetadataColumnId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[Risk_Version_Name]"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].Columns[[RiskVersionName]]" />
                          </inputColumns>
                          <externalMetadataColumns
                            isUsed="True">
                            <externalMetadataColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[ID]"
                              dataType="i4"
                              name="ID" />
                            <externalMetadataColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[ImportType]"
                              dataType="ui1"
                              name="ImportType" />
                            <externalMetadataColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[ImportStatus_ID]"
                              dataType="ui1"
                              name="ImportStatus_ID" />
                            <externalMetadataColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[Batch_ID]"
                              dataType="i4"
                              name="Batch_ID" />
                            <externalMetadataColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[BatchTag]"
                              dataType="wstr"
                              length="50"
                              name="BatchTag" />
                            <externalMetadataColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[ErrorCode]"
                              dataType="i4"
                              name="ErrorCode" />
                            <externalMetadataColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[Code]"
                              dataType="wstr"
                              length="250"
                              name="Code" />
                            <externalMetadataColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[Name]"
                              dataType="wstr"
                              length="250"
                              name="Name" />
                            <externalMetadataColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[NewCode]"
                              dataType="wstr"
                              length="250"
                              name="NewCode" />
                            <externalMetadataColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[Agg_Level]"
                              dataType="wstr"
                              length="250"
                              name="Agg_Level" />
                            <externalMetadataColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[LineageTMST]"
                              dataType="dbTimeStamp2"
                              name="LineageTMST"
                              scale="3" />
                            <externalMetadataColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[LineageID]"
                              dataType="wstr"
                              length="250"
                              name="LineageID" />
                            <externalMetadataColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[TransactionID]"
                              dataType="wstr"
                              length="250"
                              name="TransactionID" />
                            <externalMetadataColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[UpdatedLineageString]"
                              dataType="wstr"
                              length="250"
                              name="UpdatedLineageString" />
                            <externalMetadataColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[Risk_Date]"
                              dataType="wstr"
                              length="250"
                              name="Risk_Date" />
                            <externalMetadataColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[Portfolio_Bmk]"
                              dataType="wstr"
                              length="250"
                              name="Portfolio_Bmk" />
                            <externalMetadataColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[Market_Value]"
                              dataType="wstr"
                              length="250"
                              name="Market_Value" />
                            <externalMetadataColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[Portfolio_ActiveRiskPCt]"
                              dataType="wstr"
                              length="250"
                              name="Portfolio_ActiveRiskPCt" />
                            <externalMetadataColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[Pool_ActiveHDVar]"
                              dataType="wstr"
                              length="250"
                              name="Pool_ActiveHDVar" />
                            <externalMetadataColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[Pool_ContributionToActivePct]"
                              dataType="wstr"
                              length="250"
                              name="Pool_ContributionToActivePct" />
                            <externalMetadataColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[Sub_Asset_Class]"
                              dataType="wstr"
                              length="250"
                              name="Sub_Asset_Class" />
                            <externalMetadataColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[Pool_Name]"
                              dataType="wstr"
                              length="250"
                              name="Pool_Name" />
                            <externalMetadataColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[Portfolio_Code]"
                              dataType="wstr"
                              length="250"
                              name="Portfolio_Code" />
                            <externalMetadataColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[Portfolio_Name]"
                              dataType="wstr"
                              length="250"
                              name="Portfolio_Name" />
                            <externalMetadataColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[Pool_Bmk]"
                              dataType="wstr"
                              length="250"
                              name="Pool_Bmk" />
                            <externalMetadataColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[Asset_Class]"
                              dataType="wstr"
                              length="250"
                              name="Asset_Class" />
                            <externalMetadataColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[Risk_Date_Version]"
                              dataType="wstr"
                              length="250"
                              name="Risk_Date_Version" />
                            <externalMetadataColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[Risk_Version_Name]"
                              dataType="wstr"
                              length="250"
                              name="Risk_Version_Name" />
                          </externalMetadataColumns>
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Outputs[OLE DB Destination Error Output]"
                          exclusionGroup="1"
                          isErrorOut="true"
                          name="OLE DB Destination Error Output"
                          synchronousInputId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                              name="ErrorCode"
                              specialFlags="1" />
                            <outputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                              name="ErrorColumn"
                              specialFlags="2" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source"
                      componentClassID="Microsoft.OLEDBSource"
                      contactInfo="OLE DB Source;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;7"
                      description="OLE DB Source"
                      name="OLE DB Source"
                      usesDispositions="true"
                      version="7">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                          name="CommandTimeout">0</property>
                        <property
                          dataType="System.String"
                          description="Specifies the name of the database object used to open a rowset."
                          name="OpenRowset"></property>
                        <property
                          dataType="System.String"
                          description="Specifies the variable that contains the name of the database object used to open a rowset."
                          name="OpenRowsetVariable"></property>
                        <property
                          dataType="System.String"
                          description="The SQL command to be executed."
                          name="SqlCommand"
                          UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor"></property>
                        <property
                          dataType="System.String"
                          description="The variable that contains the SQL command to be executed."
                          name="SqlCommandVariable">User::Source_DAX_Query</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the column code page to use when code page information is unavailable from the data source."
                          name="DefaultCodePage">1252</property>
                        <property
                          dataType="System.Boolean"
                          description="Forces the use of the DefaultCodePage property value when describing character data."
                          name="AlwaysUseDefaultCodePage">false</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the mode used to access the database."
                          name="AccessMode"
                          typeConverter="AccessMode">3</property>
                        <property
                          dataType="System.String"
                          description="The mappings between the parameters in the SQL command and variables."
                          name="ParameterMapping"></property>
                      </properties>
                      <connections>
                        <connection
                          refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Connections[OleDbConnection]"
                          connectionManagerID="Package.ConnectionManagers[Source_RM_Asset]"
                          connectionManagerRefId="Package.ConnectionManagers[Source_RM_Asset]"
                          description="The OLE DB runtime connection used to access the database."
                          name="OleDbConnection" />
                      </connections>
                      <outputs>
                        <output
                          refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output]"
                          name="OLE DB Source Output">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].Columns[[AssetClass]]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[[AssetClass]]"
                              length="255"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].Columns[[AssetClass]]"
                              name="[AssetClass]"
                              truncationRowDisposition="FailComponent" />
                            <outputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].Columns[[SubAssetClass]]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[[SubAssetClass]]"
                              length="255"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].Columns[[SubAssetClass]]"
                              name="[SubAssetClass]"
                              truncationRowDisposition="FailComponent" />
                            <outputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].Columns[[PoolFundName]]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[[PoolFundName]]"
                              length="255"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].Columns[[PoolFundName]]"
                              name="[PoolFundName]"
                              truncationRowDisposition="FailComponent" />
                            <outputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].Columns[[RiskPortfolioCode]]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[[RiskPortfolioCode]]"
                              length="255"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].Columns[[RiskPortfolioCode]]"
                              name="[RiskPortfolioCode]"
                              truncationRowDisposition="FailComponent" />
                            <outputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].Columns[[RiskPortfolioName]]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[[RiskPortfolioName]]"
                              length="255"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].Columns[[RiskPortfolioName]]"
                              name="[RiskPortfolioName]"
                              truncationRowDisposition="FailComponent" />
                            <outputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].Columns[[MarketValueCurrent]]"
                              dataType="r8"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[[MarketValueCurrent]]"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].Columns[[MarketValueCurrent]]"
                              name="[MarketValueCurrent]"
                              truncationRowDisposition="FailComponent" />
                            <outputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].Columns[[PfActiveRiskPCt_Current]]"
                              dataType="r8"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[[PfActiveRiskPCt_Current]]"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].Columns[[PfActiveRiskPCt_Current]]"
                              name="[PfActiveRiskPCt_Current]"
                              truncationRowDisposition="FailComponent" />
                            <outputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].Columns[[PoolActiveHDVar_Current]]"
                              dataType="r8"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[[PoolActiveHDVar_Current]]"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].Columns[[PoolActiveHDVar_Current]]"
                              name="[PoolActiveHDVar_Current]"
                              truncationRowDisposition="FailComponent" />
                            <outputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].Columns[[PoolContributionToActivePct_Current]]"
                              dataType="r8"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[[PoolContributionToActivePct_Current]]"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].Columns[[PoolContributionToActivePct_Current]]"
                              name="[PoolContributionToActivePct_Current]"
                              truncationRowDisposition="FailComponent" />
                            <outputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].Columns[[PortfolioBmk]]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[[PortfolioBmk]]"
                              length="255"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].Columns[[PortfolioBmk]]"
                              name="[PortfolioBmk]"
                              truncationRowDisposition="FailComponent" />
                            <outputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].Columns[[PoolFundBmk]]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[[PoolFundBmk]]"
                              length="255"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].Columns[[PoolFundBmk]]"
                              name="[PoolFundBmk]"
                              truncationRowDisposition="FailComponent" />
                            <outputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].Columns[[AggLevel]]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[[AggLevel]]"
                              length="255"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].Columns[[AggLevel]]"
                              name="[AggLevel]"
                              truncationRowDisposition="FailComponent" />
                            <outputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].Columns[[RiskDateKey]]"
                              dataType="i8"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[[RiskDateKey]]"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].Columns[[RiskDateKey]]"
                              name="[RiskDateKey]"
                              truncationRowDisposition="FailComponent" />
                            <outputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].Columns[[RiskVersionKey]]"
                              dataType="i8"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[[RiskVersionKey]]"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].Columns[[RiskVersionKey]]"
                              name="[RiskVersionKey]"
                              truncationRowDisposition="FailComponent" />
                            <outputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].Columns[[RiskVersionName]]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[[RiskVersionName]]"
                              length="255"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].Columns[[RiskVersionName]]"
                              name="[RiskVersionName]"
                              truncationRowDisposition="FailComponent" />
                          </outputColumns>
                          <externalMetadataColumns
                            isUsed="True">
                            <externalMetadataColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[[AssetClass]]"
                              dataType="wstr"
                              length="255"
                              name="[AssetClass]" />
                            <externalMetadataColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[[SubAssetClass]]"
                              dataType="wstr"
                              length="255"
                              name="[SubAssetClass]" />
                            <externalMetadataColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[[PoolFundName]]"
                              dataType="wstr"
                              length="255"
                              name="[PoolFundName]" />
                            <externalMetadataColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[[RiskPortfolioCode]]"
                              dataType="wstr"
                              length="255"
                              name="[RiskPortfolioCode]" />
                            <externalMetadataColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[[RiskPortfolioName]]"
                              dataType="wstr"
                              length="255"
                              name="[RiskPortfolioName]" />
                            <externalMetadataColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[[MarketValueCurrent]]"
                              dataType="r8"
                              name="[MarketValueCurrent]" />
                            <externalMetadataColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[[PfActiveRiskPCt_Current]]"
                              dataType="r8"
                              name="[PfActiveRiskPCt_Current]" />
                            <externalMetadataColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[[PoolActiveHDVar_Current]]"
                              dataType="r8"
                              name="[PoolActiveHDVar_Current]" />
                            <externalMetadataColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[[PoolContributionToActivePct_Current]]"
                              dataType="r8"
                              name="[PoolContributionToActivePct_Current]" />
                            <externalMetadataColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[[PortfolioBmk]]"
                              dataType="wstr"
                              length="255"
                              name="[PortfolioBmk]" />
                            <externalMetadataColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[[PoolFundBmk]]"
                              dataType="wstr"
                              length="255"
                              name="[PoolFundBmk]" />
                            <externalMetadataColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[[AggLevel]]"
                              dataType="wstr"
                              length="255"
                              name="[AggLevel]" />
                            <externalMetadataColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[[RiskDateKey]]"
                              dataType="i8"
                              name="[RiskDateKey]" />
                            <externalMetadataColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[[RiskVersionKey]]"
                              dataType="i8"
                              name="[RiskVersionKey]" />
                            <externalMetadataColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[[RiskVersionName]]"
                              dataType="wstr"
                              length="255"
                              name="[RiskVersionName]" />
                          </externalMetadataColumns>
                        </output>
                        <output
                          refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Error Output]"
                          isErrorOut="true"
                          name="OLE DB Source Error Output">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                              name="ErrorCode"
                              specialFlags="1" />
                            <outputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[[AssetClass]]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[[AssetClass]]"
                              name="[AssetClass]" />
                            <outputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[[SubAssetClass]]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[[SubAssetClass]]"
                              name="[SubAssetClass]" />
                            <outputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[[PoolFundName]]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[[PoolFundName]]"
                              name="[PoolFundName]" />
                            <outputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[[RiskPortfolioCode]]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[[RiskPortfolioCode]]"
                              name="[RiskPortfolioCode]" />
                            <outputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[[RiskPortfolioName]]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[[RiskPortfolioName]]"
                              name="[RiskPortfolioName]" />
                            <outputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[[MarketValueCurrent]]"
                              dataType="r8"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[[MarketValueCurrent]]"
                              name="[MarketValueCurrent]" />
                            <outputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[[PfActiveRiskPCt_Current]]"
                              dataType="r8"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[[PfActiveRiskPCt_Current]]"
                              name="[PfActiveRiskPCt_Current]" />
                            <outputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[[PoolActiveHDVar_Current]]"
                              dataType="r8"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[[PoolActiveHDVar_Current]]"
                              name="[PoolActiveHDVar_Current]" />
                            <outputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[[PoolContributionToActivePct_Current]]"
                              dataType="r8"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[[PoolContributionToActivePct_Current]]"
                              name="[PoolContributionToActivePct_Current]" />
                            <outputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[[PortfolioBmk]]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[[PortfolioBmk]]"
                              name="[PortfolioBmk]" />
                            <outputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[[PoolFundBmk]]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[[PoolFundBmk]]"
                              name="[PoolFundBmk]" />
                            <outputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[[AggLevel]]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[[AggLevel]]"
                              name="[AggLevel]" />
                            <outputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[[RiskDateKey]]"
                              dataType="i8"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[[RiskDateKey]]"
                              name="[RiskDateKey]" />
                            <outputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[[RiskVersionKey]]"
                              dataType="i8"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[[RiskVersionKey]]"
                              name="[RiskVersionKey]" />
                            <outputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[[RiskVersionName]]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[[RiskVersionName]]"
                              name="[RiskVersionName]" />
                            <outputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                              name="ErrorColumn"
                              specialFlags="2" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Row Count"
                      componentClassID="Microsoft.RowCount"
                      contactInfo="Row Count;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                      name="Row Count">
                      <properties>
                        <property
                          dataType="System.String"
                          description="Specifies the variable to hold the row count."
                          name="VariableName">User::RecordCount</property>
                      </properties>
                      <inputs>
                        <input
                          refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Row Count.Inputs[Row_Number_Output0_Row Count]"
                          hasSideEffects="true"
                          name="Row_Number_Output0_Row Count">
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Row Count.Outputs[Output]"
                          name="Output"
                          synchronousInputId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Row Count.Inputs[Row_Number_Output0_Row Count]">
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Row_Number"
                      componentClassID="Microsoft.ManagedComponentHost"
                      contactInfo="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &amp;quot;income&amp;quot; column or add values in two columns and calculate the average of the sum.;Microsoft Corporation; Microsoft SQL Server; Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;9"
                      name="Row_Number"
                      version="10">
                      <properties>
                        <property
                          dataType="System.String"
                          description="Stores the source code of the component"
                          isArray="true"
                          name="SourceCode">
                          <arrayElements
                            arrayElementCount="30">
                            <arrayElement
                              dataType="System.String">Properties\Settings.settings</arrayElement>
                            <arrayElement
                              dataType="System.String">UTF8</arrayElement>
                            <arrayElement
                              dataType="System.String">&lt;?xml version="1.0" encoding="iso-8859-1"?&gt;
&lt;SettingsFile xmlns="http://schemas.microsoft.com/VisualStudio/2004/01/settings" CurrentProfile="(Default)"  &gt;
    &lt;Profiles&gt;
        &lt;Profile Name="(Default)" /&gt;
    &lt;/Profiles&gt;
    &lt;Settings /&gt;&lt;/SettingsFile&gt;
</arrayElement>
                            <arrayElement
                              dataType="System.String">Properties\Settings.Designer.cs</arrayElement>
                            <arrayElement
                              dataType="System.String">UTF8</arrayElement>
                            <arrayElement
                              dataType="System.String">//------------------------------------------------------------------------------
// &lt;auto-generated&gt;
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// &lt;/auto-generated&gt;
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "sp_4ef296458d7d4e32a8e13dfa1bc4f508.csproj.Properties.Settings.get_Default():sp_4ef296458d7d4e32a8e13dfa1bc4f508.csproj.Properties.Settings")]

namespace sp_4ef296458d7d4e32a8e13dfa1bc4f508.csproj.Properties
{

    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
    {

        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();

        public static Settings Default
        {
            get
            {
                return defaultInstance;
            }
        }

    }
}</arrayElement>
                            <arrayElement
                              dataType="System.String">Project</arrayElement>
                            <arrayElement
                              dataType="System.String">UTF16LE</arrayElement>
                            <arrayElement
                              dataType="System.String">&lt;?xml version="1.0" encoding="UTF-16" standalone="yes"?&gt;
&lt;c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0"&gt;
	&lt;msb:PropertyGroup&gt;
		&lt;msb:ProjectId&gt;{d84767bb-f716-428c-8cb6-d7e08349ae9a}&lt;/msb:ProjectId&gt;
		&lt;msb:NoContent&gt;Reference;Import;Folder&lt;/msb:NoContent&gt;
		&lt;msb:Language&gt;msBuild&lt;/msb:Language&gt;
		&lt;msb:DisplayName&gt;sp_4ef296458d7d4e32a8e13dfa1bc4f508&lt;/msb:DisplayName&gt;
		&lt;msb:CodeName&gt;sp_4ef296458d7d4e32a8e13dfa1bc4f508&lt;/msb:CodeName&gt;
	&lt;/msb:PropertyGroup&gt;
	&lt;msb:ItemGroup&gt;
				&lt;msb:File Include="ComponentWrapper.cs"/&gt;
				&lt;msb:File Include="Properties\Resources.resx"/&gt;
		&lt;msb:File Include="Properties\Settings.Designer.cs"/&gt;
				&lt;msb:File Include="BufferWrapper.cs"/&gt;
				&lt;msb:File Include="Properties\Resources.Designer.cs"/&gt;
				&lt;msb:File Include="AssemblyInfo.cs"/&gt;
				&lt;msb:File Include="main.cs"/&gt;
								&lt;msb:File Include="Properties\Settings.settings"/&gt;
						&lt;msb:Project Include="sp_4ef296458d7d4e32a8e13dfa1bc4f508.csproj"/&gt;
	&lt;/msb:ItemGroup&gt;
&lt;/c:Project&gt;</arrayElement>
                            <arrayElement
                              dataType="System.String">Properties\Resources.resx</arrayElement>
                            <arrayElement
                              dataType="System.String">UTF8</arrayElement>
                            <arrayElement
                              dataType="System.String">&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;root&gt;
    &lt;!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers &amp; schema ...
    &lt;resheader name="resmimetype"&gt;text/microsoft-resx&lt;/resheader&gt;
    &lt;resheader name="version"&gt;2.0&lt;/resheader&gt;
    &lt;resheader name="reader"&gt;System.Resources.ResXResourceReader, System.Windows.Forms, ...&lt;/resheader&gt;
    &lt;resheader name="writer"&gt;System.Resources.ResXResourceWriter, System.Windows.Forms, ...&lt;/resheader&gt;
    &lt;data name="Name1"&gt;&lt;value&gt;this is my long string&lt;/value&gt;&lt;comment&gt;this is a comment&lt;/comment&gt;&lt;/data&gt;
    &lt;data name="Color1" type="System.Drawing.Color, System.Drawing"&gt;Blue&lt;/data&gt;
    &lt;data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64"&gt;
        &lt;value&gt;[base64 mime encoded serialized .NET Framework object]&lt;/value&gt;
    &lt;/data&gt;
    &lt;data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64"&gt;
        &lt;value&gt;[base64 mime encoded string representing a byte array form of the .NET Framework object]&lt;/value&gt;
        &lt;comment&gt;This is a comment&lt;/comment&gt;
    &lt;/data&gt;
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    --&gt;
    &lt;xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata"&gt;
        &lt;xsd:import namespace="http://www.w3.org/XML/1998/namespace" /&gt;
        &lt;xsd:element name="root" msdata:IsDataSet="true"&gt;
            &lt;xsd:complexType&gt;
                &lt;xsd:choice maxOccurs="unbounded"&gt;
                    &lt;xsd:element name="metadata"&gt;
                        &lt;xsd:complexType&gt;
                            &lt;xsd:sequence&gt;
                                &lt;xsd:element name="value" type="xsd:string" minOccurs="0" /&gt;
                            &lt;/xsd:sequence&gt;
                            &lt;xsd:attribute name="name" use="required" type="xsd:string" /&gt;
                            &lt;xsd:attribute name="type" type="xsd:string" /&gt;
                            &lt;xsd:attribute name="mimetype" type="xsd:string" /&gt;
                            &lt;xsd:attribute ref="xml:space" /&gt;
                        &lt;/xsd:complexType&gt;
                    &lt;/xsd:element&gt;
                    &lt;xsd:element name="assembly"&gt;
                        &lt;xsd:complexType&gt;
                            &lt;xsd:attribute name="alias" type="xsd:string" /&gt;
                            &lt;xsd:attribute name="name" type="xsd:string" /&gt;
                        &lt;/xsd:complexType&gt;
                    &lt;/xsd:element&gt;
                    &lt;xsd:element name="data"&gt;
                        &lt;xsd:complexType&gt;
                            &lt;xsd:sequence&gt;
                                &lt;xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" /&gt;
                                &lt;xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" /&gt;
                            &lt;/xsd:sequence&gt;
                            &lt;xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" /&gt;
                            &lt;xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" /&gt;
                            &lt;xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" /&gt;
                            &lt;xsd:attribute ref="xml:space" /&gt;
                        &lt;/xsd:complexType&gt;
                    &lt;/xsd:element&gt;
                    &lt;xsd:element name="resheader"&gt;
                        &lt;xsd:complexType&gt;
                            &lt;xsd:sequence&gt;
                                &lt;xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" /&gt;
                            &lt;/xsd:sequence&gt;
                            &lt;xsd:attribute name="name" type="xsd:string" use="required" /&gt;
                        &lt;/xsd:complexType&gt;
                    &lt;/xsd:element&gt;
                &lt;/xsd:choice&gt;
            &lt;/xsd:complexType&gt;
        &lt;/xsd:element&gt;
    &lt;/xsd:schema&gt;
    &lt;resheader name="resmimetype"&gt;
        &lt;value&gt;text/microsoft-resx&lt;/value&gt;
    &lt;/resheader&gt;
    &lt;resheader name="version"&gt;
        &lt;value&gt;2.0&lt;/value&gt;
    &lt;/resheader&gt;
    &lt;resheader name="reader"&gt;
        &lt;value&gt;System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/value&gt;
    &lt;/resheader&gt;
    &lt;resheader name="writer"&gt;
        &lt;value&gt;System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/value&gt;
    &lt;/resheader&gt;
    &lt;/root&gt;
</arrayElement>
                            <arrayElement
                              dataType="System.String">ComponentWrapper.cs</arrayElement>
                            <arrayElement
                              dataType="System.String">UTF8</arrayElement>
                            <arrayElement
                              dataType="System.String">/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services component wrapper
*  This module defines the base class for your component
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;

public class UserComponent: ScriptComponent
{
    public Connections Connections;
    public Variables Variables;
    
    public UserComponent()
    {
        Connections = new Connections(this);
        Variables = new Variables(this);
    }



    public override void ProcessInput(int InputID, string InputName, PipelineBuffer Buffer, OutputNameMap OutputMap)
    {
                if (InputName.Equals(@"Input0", StringComparison.Ordinal))
        {
            Input0_ProcessInput(new Input0Buffer(Buffer, GetColumnIndexes(InputID), OutputMap));
        }
        
    }

    
    public virtual void Input0_ProcessInput(Input0Buffer Buffer)
    {
        while (Buffer.NextRow())
        {
            Input0_ProcessInputRow(Buffer);
        }
    }

    public virtual void Input0_ProcessInputRow(Input0Buffer Row)
    {
    }

}

public class Connections
{
    ScriptComponent ParentComponent;

    public Connections(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

}

public class Variables
{
    ScriptComponent ParentComponent;

    public Variables(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

}
</arrayElement>
                            <arrayElement
                              dataType="System.String">AssemblyInfo.cs</arrayElement>
                            <arrayElement
                              dataType="System.String">UTF8</arrayElement>
                            <arrayElement
                              dataType="System.String">
using System.Reflection;
using System.Runtime.CompilerServices;
  
//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("SC_977e21e288ea4faaaa4e6b2ad2cd125d")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("SSISJoost")]
[assembly: AssemblyProduct("SC_977e21e288ea4faaaa4e6b2ad2cd125d")]
[assembly: AssemblyCopyright("Copyright @ SSISJoost 2015")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:
  
[assembly: AssemblyVersion("1.0.*")]
                           </arrayElement>
                            <arrayElement
                              dataType="System.String">main.cs</arrayElement>
                            <arrayElement
                              dataType="System.String">UTF8</arrayElement>
                            <arrayElement
                              dataType="System.String">#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;
#endregion
  
/// &lt;summary&gt;
/// Rownumber transformation to create an identity column
/// &lt;/summary&gt;
[Microsoft.SqlServer.Dts.Pipeline.SSISScriptComponentEntryPointAttribute]
public class ScriptMain : UserComponent
{

 private int m_rowNumber;
  
 /// &lt;summary&gt;
 /// Get max rownumber from variable
 /// &lt;/summary&gt;
 public override void PreExecute()
 {
  m_rowNumber = 0;
 }
   
public override void PostExecute()
{
base.PostExecute();
}   
 /// &lt;summary&gt;
 /// Increase rownumber and fill rownumber column
 /// &lt;/summary&gt;
 /// &lt;param name="Row"&gt;The row that is currently passing through the component&lt;/param&gt;
 public override void Input0_ProcessInputRow(Input0Buffer Row)
 {
    m_rowNumber++;
    Row.TransactionID = m_rowNumber;
 }
}
                           </arrayElement>
                            <arrayElement
                              dataType="System.String">sp_4ef296458d7d4e32a8e13dfa1bc4f508.csproj</arrayElement>
                            <arrayElement
                              dataType="System.String">UTF16LE</arrayElement>
                            <arrayElement
                              dataType="System.String">&lt;?xml version="1.0" encoding="utf-16"?&gt;
&lt;Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003"&gt;
    &lt;PropertyGroup&gt;
	    &lt;Configuration Condition=" '$(Configuration)' == '' "&gt;Debug&lt;/Configuration&gt;
        &lt;Platform Condition=" '$(Platform)' == '' "&gt;AnyCPU&lt;/Platform&gt;
        &lt;OutputType&gt;Library&lt;/OutputType&gt;
        &lt;RootNamespace&gt;sp_4ef296458d7d4e32a8e13dfa1bc4f508.csproj&lt;/RootNamespace&gt;
        &lt;AssemblyName&gt;sp_4ef296458d7d4e32a8e13dfa1bc4f508.csproj&lt;/AssemblyName&gt;
        &lt;ProjectGuid&gt;{C792B577-3187-41B4-A778-35BF1292DEDE}&lt;/ProjectGuid&gt;
		        &lt;ProjectTypeGuids&gt;{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}&lt;/ProjectTypeGuids&gt;
        &lt;NoStandardLibraries&gt;false&lt;/NoStandardLibraries&gt;
		    &lt;/PropertyGroup&gt;
    &lt;PropertyGroup Condition=" '$(Configuration)' == 'Debug' "&gt;
		        &lt;DebugSymbols&gt;true&lt;/DebugSymbols&gt;
        &lt;Optimize&gt;false&lt;/Optimize&gt;
        &lt;OutputPath&gt;.\bin\Debug\&lt;/OutputPath&gt;
        &lt;EnableUnmanagedDebugging&gt;false&lt;/EnableUnmanagedDebugging&gt;
        &lt;DefineConstants&gt;DEBUG;TRACE&lt;/DefineConstants&gt;
        &lt;WarningLevel&gt;4&lt;/WarningLevel&gt;
		    &lt;/PropertyGroup&gt;
    &lt;PropertyGroup Condition=" '$(Configuration)' == 'Release' "&gt;
		        &lt;DebugSymbols&gt;false&lt;/DebugSymbols&gt;
        &lt;Optimize&gt;true&lt;/Optimize&gt;
        &lt;OutputPath&gt;.\bin\Release\&lt;/OutputPath&gt;
        &lt;EnableUnmanagedDebugging&gt;false&lt;/EnableUnmanagedDebugging&gt;
        &lt;DefineConstants&gt;TRACE&lt;/DefineConstants&gt;
        &lt;WarningLevel&gt;4&lt;/WarningLevel&gt;
		    &lt;/PropertyGroup&gt;
    &lt;PropertyGroup&gt;
        &lt;PreBuildEvent&gt;
        &lt;/PreBuildEvent&gt;
        &lt;PostBuildEvent&gt;
        &lt;/PostBuildEvent&gt;
    &lt;/PropertyGroup&gt;
    &lt;ItemGroup&gt;
                &lt;Reference Include="Microsoft.SqlServer.DTSPipelineWrap, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" /&gt;
                &lt;Reference Include="Microsoft.SqlServer.DTSRuntimeWrap, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" /&gt;
                &lt;Reference Include="Microsoft.SqlServer.PipelineHost, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" /&gt;
                &lt;Reference Include="Microsoft.SqlServer.TxScript, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" /&gt;
                &lt;Reference Include="System.dll" /&gt;
                &lt;Reference Include="System.AddIn.dll" /&gt;
                &lt;Reference Include="System.Data.dll" /&gt;
                &lt;Reference Include="System.Xml.dll" /&gt;
            &lt;/ItemGroup&gt;
	    &lt;ItemGroup&gt;
        &lt;Folder Include="Resources\" /&gt;
        &lt;AppDesigner Include="Properties\" /&gt;
        &lt;EmbeddedResource Include="Properties\Resources.resx"&gt;
						&lt;Generator&gt;ResXFileCodeGenerator&lt;/Generator&gt;
            &lt;LastGenOutput&gt;Resources.Designer.cs&lt;/LastGenOutput&gt;
			        &lt;/EmbeddedResource&gt;
        &lt;Compile Include="Properties\Resources.Designer.cs"&gt;
            &lt;AutoGen&gt;True&lt;/AutoGen&gt;
            &lt;DependentUpon&gt;Resources.resx&lt;/DependentUpon&gt;
            &lt;DesignTime&gt;True&lt;/DesignTime&gt;
        &lt;/Compile&gt;
		        &lt;None Include="Properties\Settings.settings"&gt;
            &lt;Generator&gt;SettingsSingleFileGenerator&lt;/Generator&gt;
            &lt;LastGenOutput&gt;Settings.Designer.cs&lt;/LastGenOutput&gt;
        &lt;/None&gt;
        &lt;Compile Include="Properties\Settings.Designer.cs"&gt;
            &lt;AutoGen&gt;True&lt;/AutoGen&gt;
            &lt;DependentUpon&gt;Settings.settings&lt;/DependentUpon&gt;
            &lt;DesignTimeSharedInput&gt;True&lt;/DesignTimeSharedInput&gt;
        &lt;/Compile&gt;

				&lt;Compile Include="AssemblyInfo.cs"&gt;
			&lt;SubType&gt;Code&lt;/SubType&gt;
		&lt;/Compile&gt;
				&lt;Compile Include="main.cs"&gt;
			&lt;SubType&gt;Code&lt;/SubType&gt;
		&lt;/Compile&gt;
		
				&lt;Compile Include="BufferWrapper.cs"&gt;
			&lt;SubType&gt;Code&lt;/SubType&gt;
		&lt;/Compile&gt;
		&lt;Compile Include="ComponentWrapper.cs"&gt;
			&lt;SubType&gt;Code&lt;/SubType&gt;
		&lt;/Compile&gt;
		
		
		
		    &lt;/ItemGroup&gt;
		&lt;!-- Include the build rules for a C# project.--&gt;
    &lt;Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" /&gt;
		&lt;!-- This section defines VSTA properties that describe the host-changable project properties. --&gt;
    &lt;ProjectExtensions&gt;
        &lt;VisualStudio&gt;
            &lt;FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}"&gt;
                &lt;ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="#HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\9.0\InstallDir#\devenv.exe" /&gt;
                &lt;Host Name="SSIS_ScriptComponent" IconIndex="0" /&gt;
                &lt;ProjectClient&gt;
                    &lt;HostIdentifier&gt;SSIS_SC130&lt;/HostIdentifier&gt;
                &lt;/ProjectClient&gt;
            &lt;/FlavorProperties&gt;
        &lt;/VisualStudio&gt;
    &lt;/ProjectExtensions&gt;
    &lt;PropertyGroup&gt;
        &lt;TargetFrameworkVersion&gt;v4.5&lt;/TargetFrameworkVersion&gt;
    &lt;/PropertyGroup&gt;
    &lt;PropertyGroup&gt;
        &lt;TargetFrameworkProfile&gt;&lt;/TargetFrameworkProfile&gt;
    &lt;/PropertyGroup&gt;&lt;/Project&gt;
</arrayElement>
                            <arrayElement
                              dataType="System.String">Properties\Resources.Designer.cs</arrayElement>
                            <arrayElement
                              dataType="System.String">UTF8</arrayElement>
                            <arrayElement
                              dataType="System.String">//------------------------------------------------------------------------------
// &lt;auto-generated&gt;
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// &lt;/auto-generated&gt;
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "sp_4ef296458d7d4e32a8e13dfa1bc4f508.csproj.Properties.Resources.get_ResourceManager():System.Resources.ResourceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "sp_4ef296458d7d4e32a8e13dfa1bc4f508.csproj.Properties.Resources.get_Culture():System.Globalization.CultureInfo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "sp_4ef296458d7d4e32a8e13dfa1bc4f508.csproj.Properties.Resources.set_Culture(System.Globalization.CultureInfo):Void")]

namespace sp_4ef296458d7d4e32a8e13dfa1bc4f508.csproj.Properties {
    using System;


    /// &lt;summary&gt;
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// &lt;/summary&gt;
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources
    {

        private static global::System.Resources.ResourceManager resourceMan;

        private static global::System.Globalization.CultureInfo resourceCulture;

        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }

        /// &lt;summary&gt;
        ///   Returns the cached ResourceManager instance used by this class.
        /// &lt;/summary&gt;
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager
        {
            get {
                if ((resourceMan == null))
                {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("sp_4ef296458d7d4e32a8e13dfa1bc4f508.csproj.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }

        /// &lt;summary&gt;
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// &lt;/summary&gt;
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture
        {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }

    }
}</arrayElement>
                            <arrayElement
                              dataType="System.String">BufferWrapper.cs</arrayElement>
                            <arrayElement
                              dataType="System.String">UTF8</arrayElement>
                            <arrayElement
                              dataType="System.String">
/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services buffer wrappers
*  This module defines classes for accessing data flow buffers
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */



using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;

public class Input0Buffer: ScriptBuffer

{
    public Input0Buffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public Int32 TransactionID
    {
        set
        {
            this[0] = value;
        }
    }
    public bool TransactionID_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(0);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }


    new public bool NextRow()
    {
        return base.NextRow();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}

</arrayElement>
                          </arrayElements>
                        </property>
                        <property
                          dataType="System.String"
                          description="Stores the binary representation of the component"
                          isArray="true"
                          name="BinaryCode">
                          <arrayElements
                            arrayElementCount="2">
                            <arrayElement
                              dataType="System.String">sp_4ef296458d7d4e32a8e13dfa1bc4f508.csproj.dll</arrayElement>
                            <arrayElement
                              dataType="System.String">arrayElement>
                          </arrayElements>
                        </property>
                        <property
                          dataType="System.String"
                          description="Specifies the name of the Microsoft Visual Studio Tools for Applications project. Project names must be unique within a package."
                          name="VSTAProjectName"
                          typeConverter="NOTBROWSABLE">sp_4ef296458d7d4e32a8e13dfa1bc4f508</property>
                        <property
                          dataType="System.String"
                          description="Specifies the programming language used by the script."
                          name="ScriptLanguage"
                          typeConverter="Microsoft.SqlServer.VSTAHosting.ScriptingLanguages">CSharp</property>
                        <property
                          dataType="System.String"
                          description="Specifies a comma-separated list of read-only variables."
                          name="ReadOnlyVariables"
                          UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIVariablePickerDlg"></property>
                        <property
                          dataType="System.String"
                          description="Specifies a comma-separated list of read/write variables."
                          name="ReadWriteVariables"
                          UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIWriteableVariablePickerDlg"></property>
                        <property
                          dataType="System.String"
                          description="List of breakpoints present on the script."
                          isArray="true"
                          name="BreakpointCollection"
                          typeConverter="NOTBROWSABLE">
                          <arrayElements
                            arrayElementCount="0" />
                        </property>
                        <property
                          dataType="System.String"
                          name="UserComponentTypeName">Microsoft.ScriptComponentHost</property>
                        <property
                          dataType="System.String"
                          description="Checksum to match component metedata against compiled codes."
                          name="MetadataChecksum"
                          typeConverter="NOTBROWSABLE">8616691f1fba46388ca66b1a08fde144</property>
                      </properties>
                      <inputs>
                        <input
                          refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Row_Number.Inputs[Input0]"
                          hasSideEffects="true"
                          name="Input0">
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Row_Number.Outputs[Output0]"
                          name="Output0"
                          synchronousInputId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Row_Number.Inputs[Input0]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Row_Number.Outputs[Output0].Columns[TransactionID]"
                              dataType="i4"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Row_Number.Outputs[Output0].Columns[TransactionID]"
                              name="TransactionID" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Trim"
                      componentClassID="Microsoft.DerivedColumn"
                      contactInfo="Derived Column;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                      name="Trim"
                      usesDispositions="true">
                      <inputs>
                        <input
                          refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Trim.Inputs[Add Metadata_Output_Trim]"
                          name="Add Metadata_Output_Trim">
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Trim.Outputs[Output]"
                          exclusionGroup="1"
                          name="Output"
                          synchronousInputId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Trim.Inputs[Add Metadata_Output_Trim]">
                          <externalMetadataColumns />
                        </output>
                        <output
                          refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Trim.Outputs[Error]"
                          exclusionGroup="1"
                          isErrorOut="true"
                          name="Error"
                          synchronousInputId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Trim.Inputs[Add Metadata_Output_Trim]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Trim.Outputs[Error].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Trim.Outputs[Error].Columns[ErrorCode]"
                              name="ErrorCode"
                              specialFlags="1" />
                            <outputColumn
                              refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Trim.Outputs[Error].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Trim.Outputs[Error].Columns[ErrorColumn]"
                              name="ErrorColumn"
                              specialFlags="2" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                  </components>
                  <paths>
                    <path
                      refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg.Paths[Data Conversion Transformation_Output_Row_Number]"
                      endId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Row_Number.Inputs[Input0]"
                      name="Data Conversion Transformation_Output_Row_Number"
                      startId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Data Conversion Transformation.Outputs[Output]" />
                    <path
                      refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg.Paths[Derived Column Output]"
                      endId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Trim.Inputs[Add Metadata_Output_Trim]"
                      name="Derived Column Output"
                      startId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Add Batch.Outputs[Derived Column Output]" />
                    <path
                      refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg.Paths[Derived Column Output1]"
                      endId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Generate Hash Value.Inputs[Input 0]"
                      name="Derived Column Output"
                      startId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Derived Column.Outputs[Derived Column Output]" />
                    <path
                      refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg.Paths[OLE DB Source Output]"
                      endId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Derived Column.Inputs[Derived Column Input]"
                      name="OLE DB Source Output"
                      startId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source.Outputs[OLE DB Source Output]" />
                    <path
                      refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg.Paths[Output]"
                      endId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination.Inputs[OLE DB Destination Input]"
                      name="Output"
                      startId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Row Count.Outputs[Output]" />
                    <path
                      refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg.Paths[Output 0]"
                      endId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Add Batch.Inputs[Derived Column Input]"
                      name="Output 0"
                      startId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Generate Hash Value.Outputs[Output 0]" />
                    <path
                      refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg.Paths[Row_Number_Output0_Row Count]"
                      endId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Row Count.Inputs[Row_Number_Output0_Row Count]"
                      name="Row_Number_Output0_Row Count"
                      startId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Row_Number.Outputs[Output0]" />
                    <path
                      refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg.Paths[Trim_Output_Data Conversion Transformation]"
                      endId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Data Conversion Transformation.Inputs[Trim_Output_Data Conversion Transformation]"
                      name="Trim_Output_Data Conversion Transformation"
                      startId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Trim.Outputs[Output]" />
                  </paths>
                </pipeline>
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\LOG DAX Query That Was Used"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:Disabled="True"
              DTS:DTSID="{4EF54FDC-CF06-4570-A5A5-0D5F1D7BAF97}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="LOG DAX Query That Was Used"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2016; © 2015 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{1A8664F3-BE3D-46FF-AEB7-5A71CAFC73DE}"
                  SQLTask:SqlStatementSource="Exec  Proc_ETL_Test ? ,?" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                  <SQLTask:ParameterBinding
                    SQLTask:ParameterName="0"
                    SQLTask:DtsVariableName="User::Source_DAX_Query"
                    SQLTask:ParameterDirection="Input"
                    SQLTask:DataType="129"
                    SQLTask:ParameterSize="-1" />
                  <SQLTask:ParameterBinding
                    SQLTask:ParameterName="1"
                    SQLTask:DtsVariableName="User::DAX_Orginal"
                    SQLTask:ParameterDirection="Input"
                    SQLTask:DataType="129"
                    SQLTask:ParameterSize="-1" />
                </SQLTask:SqlTaskData>
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\MDSClearUnexecutedBatch"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{4EF340DC-DB08-4CC9-A17B-00756ACF2342}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="MDSClearUnexecutedBatch"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2016; © 2015 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:PropertyExpression
                DTS:Name="Disable">@[$Package::Disable_MDSClearUnexecutedBatch]</DTS:PropertyExpression>
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{87323F27-D30B-4DBD-B723-02E2B4F94F0B}"
                  SQLTask:SqlStmtSourceType="Variable"
                  SQLTask:SqlStatementSource="User::MDS_ClearUnExecutedBatchCommand" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Merge Staging Data"
              DTS:CreationName="Microsoft.ExecuteSQLTask"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{D87D6D12-CE46-4FBA-8A55-D7D26A03789A}"
              DTS:ExecutableType="Microsoft.ExecuteSQLTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="Merge Staging Data"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2016; © 2015 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{87323F27-D30B-4DBD-B723-02E2B4F94F0B}"
                  SQLTask:SqlStmtSourceType="Variable"
                  SQLTask:SqlStatementSource="User::MDS_ProcedureCommand" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Set Batch Tag"
              DTS:CreationName="Microsoft.ExpressionTask"
              DTS:Description="Expression Task"
              DTS:DTSID="{9F6AF065-62EC-4354-9162-718CA7B70B4A}"
              DTS:ExecutableType="Microsoft.ExpressionTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="Set Batch Tag"
              DTS:TaskContact="Expression Task;Microsoft Corporation; SQL Server 2016; © 2015 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <ExpressionTask
                  Expression="@[User::MDS_BatchTag]= @[User::MDS_BatchName] + &quot;_&quot; + &#xA;(DT_STR,4,1252)DATEPART( &quot;yyyy&quot; , getdate() ) +&#xA;RIGHT(&quot;0&quot; + (DT_STR,4,1252)DATEPART( &quot;mm&quot; , getdate() ), 2) + &#xA;RIGHT(&quot;0&quot; + (DT_STR,4,1252)DATEPART( &quot;dd&quot; , getdate() ), 2) +&#xA;RIGHT(&quot;0&quot; + (DT_STR,4,1252)DATEPART( &quot;hh&quot; , getdate() ), 2) + &#xA;RIGHT(&quot;0&quot; + (DT_STR,4,1252)DATEPART( &quot;mi&quot; , getdate() ), 2) + &quot;_&quot; + (DT_WSTR,1) @[User::MDS_ImportType]" />
              </DTS:ObjectData>
            </DTS:Executable>
          </DTS:Executables>
          <DTS:PrecedenceConstraints>
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS.PrecedenceConstraints[Constraint]"
              DTS:CreationName=""
              DTS:DTSID="{D9A4AE68-6972-42A8-9AB9-7185122BB248}"
              DTS:From="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Set Batch Tag"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint"
              DTS:To="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS.PrecedenceConstraints[Constraint 1]"
              DTS:CreationName=""
              DTS:DTSID="{F670CA84-D117-4DEB-A25B-ACCAABB84BB0}"
              DTS:From="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 1"
              DTS:To="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Merge Staging Data" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS.PrecedenceConstraints[Constraint 2]"
              DTS:CreationName=""
              DTS:DTSID="{CF420EBC-1FB1-4637-916C-68E30142FF4A}"
              DTS:From="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\MDSClearUnexecutedBatch"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 2"
              DTS:To="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Set Batch Tag" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS.PrecedenceConstraints[Constraint 3]"
              DTS:CreationName=""
              DTS:DTSID="{5B724124-EE0E-4051-B5C1-0E1E6E4E8AA5}"
              DTS:From="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Merge Staging Data"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 3"
              DTS:To="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\LOG DAX Query That Was Used" />
          </DTS:PrecedenceConstraints>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:ForEachVariableMappings>
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{9F6534C0-847B-452F-AA24-DF1F18C07AAD}"
          DTS:ObjectName="{9F6534C0-847B-452F-AA24-DF1F18C07AAD}"
          DTS:ValueIndex="1"
          DTS:VariableName="User::Current_Date" />
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{6829ACB3-D5DD-4B0F-9610-121939B6624A}"
          DTS:ObjectName="{6829ACB3-D5DD-4B0F-9610-121939B6624A}"
          DTS:ValueIndex="2"
          DTS:VariableName="User::Is_Risk_Version" />
      </DTS:ForEachVariableMappings>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\SetUp"
      DTS:CreationName="STOCK:SEQUENCE"
      DTS:DTSID="{FE329BF4-2418-4BF6-87F6-8C02DA679B6B}"
      DTS:ExecutableType="STOCK:SEQUENCE"
      DTS:LocaleID="-1"
      DTS:ObjectName="SetUp">
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\SetUp\Check for Incremental Record"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:DTSID="{D55D355C-7030-4550-B561-686DD2D691F1}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Check for Incremental Record"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{1A8664F3-BE3D-46FF-AEB7-5A71CAFC73DE}"
              SQLTask:SqlStatementSource="&#xA;IF NOT EXISTS (SELECT * FROM log.SSISIncrementalTracking WHERE PackageName = ?)&#xA;BEGIN&#xA;    INSERT INTO log.SSISIncrementalTracking (PackageName, LastRunTMST, LastRunDT, UpdateBy, LastUpdateTMST) VALUES (?, CAST('1/1/1900' AS datetime), CAST('1/1/1900' AS date), SUSER_SNAME(), GETDATE())&#xA;END&#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="0"
                SQLTask:DtsVariableName="System::PackageName"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="130"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="1"
                SQLTask:DtsVariableName="System::PackageName"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="130"
                SQLTask:ParameterSize="-1" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\SetUp\Get Last Incremental Update"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:DTSID="{5BE0478D-0F92-49DD-B179-4151481D30AA}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Get Last Incremental Update"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{1A8664F3-BE3D-46FF-AEB7-5A71CAFC73DE}"
              SQLTask:SqlStatementSource="SELECT LastRunTMST, CAST(LastRunDT AS datetime) LastRunDT FROM log.SSISIncrementalTracking WHERE PackageName = ?&#xA;                            "
              SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ResultBinding
                SQLTask:ResultName="LastRunTMST"
                SQLTask:DtsVariableName="User::LastRunTMST" />
              <SQLTask:ResultBinding
                SQLTask:ResultName="LastRunDT"
                SQLTask:DtsVariableName="User::LastRunDT" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="0"
                SQLTask:DtsVariableName="System::PackageName"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="130"
                SQLTask:ParameterSize="-1" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\SetUp\Get Lineage - Insert Audit Record"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:DTSID="{05A25579-4574-47E5-A232-1BD57CA926CF}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Get Lineage - Insert Audit Record"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{1A8664F3-BE3D-46FF-AEB7-5A71CAFC73DE}"
              SQLTask:SqlStatementSource="&#xA;INSERT INTO log.SSISAudit_MDSDQS (PackageName, LineageTMST) VALUES (?, ?);&#xA;SELECT ? = SCOPE_IDENTITY();&#xA;                                                &#xA;        " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="0"
                SQLTask:DtsVariableName="System::PackageName"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="130"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="1"
                SQLTask:DtsVariableName="System::StartTime"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="7"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="2"
                SQLTask:DtsVariableName="User::LineageID"
                SQLTask:ParameterDirection="Output"
                SQLTask:DataType="3"
                SQLTask:ParameterSize="-1" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\SetUp\Set Lineage String"
          DTS:CreationName="Microsoft.ScriptTask"
          DTS:DTSID="{9F75ED22-9E6B-4D0B-90F0-30C2D11DE063}"
          DTS:ExecutableType="Microsoft.ScriptTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Set Lineage String"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <ScriptProject
              Name="sp_6fae8e87eabc4d31a640433cfe108beb"
              VSTAMajorVersion="14"
              VSTAMinorVersion="0"
              Language="CSharp"
              ReadOnlyVariables="User::LineageID"
              ReadWriteVariables="User::LineageString">
              <ProjectItem
                Name="sp_6fae8e87eabc4d31a640433cfe108beb.csproj"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="utf-16"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
	    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
        <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
        <OutputType>Library</OutputType>
        <RootNamespace>sp_6fae8e87eabc4d31a640433cfe108beb.csproj</RootNamespace>
        <AssemblyName>sp_6fae8e87eabc4d31a640433cfe108beb.csproj</AssemblyName>
        <ProjectGuid>{C792B577-3187-41B4-A778-35BF1292DEDE}</ProjectGuid>
		        <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
        <NoStandardLibraries>false</NoStandardLibraries>
		    </PropertyGroup>
    <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
		        <DebugSymbols>true</DebugSymbols>
        <Optimize>false</Optimize>
        <OutputPath>.\bin\Debug\</OutputPath>
        <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
        <DefineConstants>DEBUG;TRACE</DefineConstants>
        <WarningLevel>4</WarningLevel>
		    </PropertyGroup>
    <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
		        <DebugSymbols>false</DebugSymbols>
        <Optimize>true</Optimize>
        <OutputPath>.\bin\Release\</OutputPath>
        <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
        <DefineConstants>TRACE</DefineConstants>
        <WarningLevel>4</WarningLevel>
		    </PropertyGroup>
    <PropertyGroup>
        <PreBuildEvent>
        </PreBuildEvent>
        <PostBuildEvent>
        </PostBuildEvent>
    </PropertyGroup>
    <ItemGroup>
                <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
                <Reference Include="Microsoft.SqlServer.ScriptTask, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
                <Reference Include="System.dll" />
            </ItemGroup>
	    <ItemGroup>
        <Folder Include="Resources\" />
        <AppDesigner Include="Properties\" />
        <EmbeddedResource Include="Properties\Resources.resx">
						<Generator>ResXFileCodeGenerator</Generator>
            <LastGenOutput>Resources.Designer.cs</LastGenOutput>
			        </EmbeddedResource>
        <Compile Include="Properties\Resources.Designer.cs">
            <AutoGen>True</AutoGen>
            <DependentUpon>Resources.resx</DependentUpon>
            <DesignTime>True</DesignTime>
        </Compile>
		        <None Include="Properties\Settings.settings">
            <Generator>SettingsSingleFileGenerator</Generator>
            <LastGenOutput>Settings.Designer.cs</LastGenOutput>
        </None>
        <Compile Include="Properties\Settings.Designer.cs">
            <AutoGen>True</AutoGen>
            <DependentUpon>Settings.settings</DependentUpon>
            <DesignTimeSharedInput>True</DesignTimeSharedInput>
        </Compile>

				<Compile Include="ScriptMain.cs">
			<SubType>Code</SubType>
		</Compile>
		
		
		
		
		    </ItemGroup>
		<!-- Include the build rules for a C# project.-->
    <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
		<!-- This section defines VSTA properties that describe the host-changable project properties. -->
    <ProjectExtensions>
        <VisualStudio>
            <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
                <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="#HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\9.0\InstallDir#\devenv.exe" />
                <Host Name="SSIS_ScriptTask" />
                <ProjectClient>
                    <HostIdentifier>SSIS_ST130</HostIdentifier>
                </ProjectClient>
            </FlavorProperties>
        </VisualStudio>
    </ProjectExtensions>
    <PropertyGroup>
        <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    </PropertyGroup>
    <PropertyGroup>
        <TargetFrameworkProfile></TargetFrameworkProfile>
    </PropertyGroup></Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\resources.resx"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
    <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
    <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
        <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
        <xsd:element name="root" msdata:IsDataSet="true">
            <xsd:complexType>
                <xsd:choice maxOccurs="unbounded">
                    <xsd:element name="metadata">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="value" type="xsd:string" minOccurs="0" />
                            </xsd:sequence>
                            <xsd:attribute name="name" use="required" type="xsd:string" />
                            <xsd:attribute name="type" type="xsd:string" />
                            <xsd:attribute name="mimetype" type="xsd:string" />
                            <xsd:attribute ref="xml:space" />
                        </xsd:complexType>
                    </xsd:element>
                    <xsd:element name="assembly">
                        <xsd:complexType>
                            <xsd:attribute name="alias" type="xsd:string" />
                            <xsd:attribute name="name" type="xsd:string" />
                        </xsd:complexType>
                    </xsd:element>
                    <xsd:element name="data">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
                            </xsd:sequence>
                            <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
                            <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
                            <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
                            <xsd:attribute ref="xml:space" />
                        </xsd:complexType>
                    </xsd:element>
                    <xsd:element name="resheader">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                            </xsd:sequence>
                            <xsd:attribute name="name" type="xsd:string" use="required" />
                        </xsd:complexType>
                    </xsd:element>
                </xsd:choice>
            </xsd:complexType>
        </xsd:element>
    </xsd:schema>
    <resheader name="resmimetype">
        <value>text/microsoft-resx</value>
    </resheader>
    <resheader name="version">
        <value>2.0</value>
    </resheader>
    <resheader name="reader">
        <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
    </resheader>
    <resheader name="writer">
        <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
    </resheader>
    </root>]]></ProjectItem>
              <ProjectItem
                Name="ScriptMain.cs"
                Encoding="UTF8"><![CDATA[
                    [Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
                    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
                    {
                        #region VSTA generated code
                        enum ScriptResults
                        {
                            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
                            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
                        };
                        #endregion
                        
                        public void Main()
                        {
                            try
                            {
                                Dts.Variables["LineageString"].Value = Dts.Variables["LineageString"].Value + Dts.Variables["LineageID"].Value.ToString().Trim();
                                Dts.TaskResult = (int)ScriptResults.Success;
                            }
                            catch
                            {
                                Dts.TaskResult = (int)ScriptResults.Failure;
                            }
                        }
                    }
                ]]></ProjectItem>
              <ProjectItem
                Name="Project"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:ProjectId>{24c72bdf-1fe5-4fdb-9a22-a852d60de700}</msb:ProjectId>
		<msb:NoContent>Reference;Import;Folder</msb:NoContent>
		<msb:Language>msBuild</msb:Language>
		<msb:DisplayName>sp_6fae8e87eabc4d31a640433cfe108beb</msb:DisplayName>
		<msb:CodeName>sp_6fae8e87eabc4d31a640433cfe108beb</msb:CodeName>
	</msb:PropertyGroup>
	<msb:ItemGroup>
				<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
				<msb:File Include="Properties\Resources.Designer.cs"/>
				<msb:File Include="ScriptMain.cs"/>
								<msb:File Include="Properties\Settings.settings"/>
						<msb:Project Include="sp_6fae8e87eabc4d31a640433cfe108beb.csproj"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\settings.designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "sp_6fae8e87eabc4d31a640433cfe108beb.csproj.Properties.Settings.get_Default():sp_6fae8e87eabc4d31a640433cfe108beb.csproj.Properties.Settings")]

namespace sp_6fae8e87eabc4d31a640433cfe108beb.csproj.Properties
{

    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
    {

        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();

        public static Settings Default
        {
            get
            {
                return defaultInstance;
            }
        }

    }
}]]></ProjectItem>
              <ProjectItem
                Name="Properties\settings.settings"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="iso-8859-1"?>
<SettingsFile xmlns="http://schemas.microsoft.com/VisualStudio/2004/01/settings" CurrentProfile="(Default)"  >
    <Profiles>
        <Profile Name="(Default)" />
    </Profiles>
    <Settings /></SettingsFile>]]></ProjectItem>
              <ProjectItem
                Name="Properties\resources.designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "sp_6fae8e87eabc4d31a640433cfe108beb.csproj.Properties.Resources.get_ResourceManager():System.Resources.ResourceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "sp_6fae8e87eabc4d31a640433cfe108beb.csproj.Properties.Resources.get_Culture():System.Globalization.CultureInfo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "sp_6fae8e87eabc4d31a640433cfe108beb.csproj.Properties.Resources.set_Culture(System.Globalization.CultureInfo):Void")]

namespace sp_6fae8e87eabc4d31a640433cfe108beb.csproj.Properties {
    using System;


    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources
    {

        private static global::System.Resources.ResourceManager resourceMan;

        private static global::System.Globalization.CultureInfo resourceCulture;

        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }

        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager
        {
            get {
                if ((resourceMan == null))
                {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("sp_6fae8e87eabc4d31a640433cfe108beb.csproj.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }

        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture
        {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }

    }
}]]></ProjectItem>
              <BinaryItem
                Name="\bin\release\sp_6fae8e87eabc4d31a640433cfe108beb.csproj.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAFjA2FoAAAAAAAAAAOAAAiELAQsAAAwAAAAGAAAAAAAA3isA
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAEAAAAAAAAAACAAAAAAgAAAAAAAAMAQIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAIgrAABTAAAAAEAAADADAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAA5AsAAAAgAAAADAAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAADADAAAAQAAAAAQAAAAOAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAEgAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAADA
KwAAAAAAAEgAAAACAAUAXCEAACwKAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAswBAB7AAAAAAAAAAIoBAAACm8FAAAKcgEAAHBvBgAACgIo
BAAACm8FAAAKcgEAAHBvBgAACm8HAAAKAigEAAAKbwUAAApyHQAAcG8GAAAKbwcAAApvCAAACm8J
AAAKKAoAAApvCwAACgIoBAAAChZvDAAACt4PJgIoBAAAChdvDAAACt4AKgABEAAAAAAAAGtrAA8E
AAABHgIoDQAACioafgQAAAQqLnMEAAAGgAQAAAQqHgIoDwAACioeAigSAAAKKgATMAIALQAAAAEA
ABF+BQAABC0gcjEAAHDQBQAAAigTAAAKbxQAAApzFQAACgoGgAUAAAR+BQAABCoafgYAAAQqHgKA
BgAABCpCU0pCAQABAAAAAAAMAAAAdjQuMC4zMDMxOQAAAAAFAGwAAAA0AwAAI34AAKADAACsBAAA
I1N0cmluZ3MAAAAATAgAALQAAAAjVVMAAAkAABAAAAAjR1VJRAAAABAJAAAcAQAAI0Jsb2IAAAAA
AAAAAgAAAVcdogEJAgAAAPolMwAWAAABAAAAFQAAAAUAAAAGAAAACQAAAAEAAAAWAAAAAgAAAAkA
AAABAAAAAgAAAAMAAAAEAAAAAQAAAAQAAAABAAAAAAAKAAEAAAAAAAYA4wC6AAoADwEIAQ4AKQEU
AQoAQQEIAQoAoAGPAQoA0QG8AQoARwInAgoAZwInAgYAsAK6AAYA0gK6ABIAKwMLAxIAQwMLAwoA
aAMIAQoAlAMnAg4AzgO2AwoA+APlAwoAFQQIAQoAGgQIAQoAUAQ+BA4AfARmBA4AlQRmBAAAAAAB
AAAAAAABAAEAAQAQADkAAAAFAAEAAQADAQAARAAAAAkAAQADAAABEABSAFsADQAEAAMAAAAQAJEA
WwARAAUABgAGBlMBFwBWgFsBGgBWgGMBGgARAGsBKAARALABNgARAN0BOgBQIAAAAACGAEgBEwAB
AOggAAAAAIYYTQETAAEA8CAAAAAAlgh7ASwAAQADIQAAAACGGE0BEwABAPcgAAAAAJEYrwOAAAEA
CyEAAAAAgxhNARMAAQAUIQAAAACTCO0BPgABAE0hAAAAAJMIAQJDAAEAVCEAAAAAkwgNAkgAAQAA
AAEAIQI5AE0BWABBAE0BEwBJAE0BEwAJAOQCXQBRADUDYgBZAEwDZwBhAFUDbQAhAF8DcQBpAG8D
cQBpAHQDdQBhAHsDewBRAIUDWAAJAE0BEwBxAE0BEwAZAE0BEwB5AE0BhACBAE0BEwAhAE0BEwCJ
ACwEywCJAFkE0gApAE0B1wChAE0B4wAIAAgAHgAIAAwAIwAuAAsA8gAuABMA+wBDABsAIwBJALMA
6QBpALMA6QCBAHMAIwCjAHMAIwCjAIsAIwCjAIMAigDeAAQAAQAFAAIAAACHATEAAACgAU4AAAAZ
AlMAAgADAAMAAgAHAAUAAgAIAAcAAQAJAAcABIAAAAAAAAAAAAAAAAAAAAAAhQIAAA0AAAAAAAAA
AAAAAAEAmwAAAAAABAAAAAAAAAAAAAAACgD/AAAAAAAEAAAAAAAAAAAAAAAKAAgBAAAAAA0AAAAA
AAAAAAAAAAEA7AIAAAAAAwACAAAAADxNb2R1bGU+AHNwXzZmYWU4ZTg3ZWFiYzRkMzFhNjQwNDMz
Y2ZlMTA4YmViLmNzcHJvai5kbGwAU2NyaXB0TWFpbgBTY3JpcHRSZXN1bHRzAFNldHRpbmdzAHNw
XzZmYWU4ZTg3ZWFiYzRkMzFhNjQwNDMzY2ZlMTA4YmViLmNzcHJvai5Qcm9wZXJ0aWVzAFJlc291
cmNlcwBNaWNyb3NvZnQuU3FsU2VydmVyLlNjcmlwdFRhc2sATWljcm9zb2Z0LlNxbFNlcnZlci5E
dHMuVGFza3MuU2NyaXB0VGFzawBWU1RBUlRTY3JpcHRPYmplY3RNb2RlbEJhc2UAbXNjb3JsaWIA
U3lzdGVtAEVudW0AU3lzdGVtLkNvbmZpZ3VyYXRpb24AQXBwbGljYXRpb25TZXR0aW5nc0Jhc2UA
T2JqZWN0AE1haW4ALmN0b3IAdmFsdWVfXwBTdWNjZXNzAEZhaWx1cmUAZGVmYXVsdEluc3RhbmNl
AGdldF9EZWZhdWx0AERlZmF1bHQAU3lzdGVtLlJlc291cmNlcwBSZXNvdXJjZU1hbmFnZXIAcmVz
b3VyY2VNYW4AU3lzdGVtLkdsb2JhbGl6YXRpb24AQ3VsdHVyZUluZm8AcmVzb3VyY2VDdWx0dXJl
AGdldF9SZXNvdXJjZU1hbmFnZXIAZ2V0X0N1bHR1cmUAc2V0X0N1bHR1cmUAQ3VsdHVyZQB2YWx1
ZQBTeXN0ZW0uUnVudGltZS5Db21waWxlclNlcnZpY2VzAENvbXBpbGF0aW9uUmVsYXhhdGlvbnNB
dHRyaWJ1dGUAUnVudGltZUNvbXBhdGliaWxpdHlBdHRyaWJ1dGUAc3BfNmZhZThlODdlYWJjNGQz
MWE2NDA0MzNjZmUxMDhiZWIuY3Nwcm9qAFNTSVNTY3JpcHRUYXNrRW50cnlQb2ludEF0dHJpYnV0
ZQBTY3JpcHRPYmplY3RNb2RlbABnZXRfRHRzAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuTWFuYWdlZERU
UwBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5SdW50aW1lAFZhcmlhYmxlcwBnZXRfVmFyaWFibGVz
AFZhcmlhYmxlAGdldF9JdGVtAGdldF9WYWx1ZQBUb1N0cmluZwBTdHJpbmcAVHJpbQBDb25jYXQA
c2V0X1ZhbHVlAHNldF9UYXNrUmVzdWx0AENvbXBpbGVyR2VuZXJhdGVkQXR0cmlidXRlAC5jY3Rv
cgBTeXN0ZW0uQ29kZURvbS5Db21waWxlcgBHZW5lcmF0ZWRDb2RlQXR0cmlidXRlAFN5c3RlbS5E
aWFnbm9zdGljcwBEZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlAFR5cGUAUnVudGltZVR5cGVI
YW5kbGUAR2V0VHlwZUZyb21IYW5kbGUAU3lzdGVtLlJlZmxlY3Rpb24AQXNzZW1ibHkAZ2V0X0Fz
c2VtYmx5AFN5c3RlbS5Db21wb25lbnRNb2RlbABFZGl0b3JCcm93c2FibGVBdHRyaWJ1dGUARWRp
dG9yQnJvd3NhYmxlU3RhdGUAAAAAG0wAaQBuAGUAYQBnAGUAUwB0AHIAaQBuAGcAABNMAGkAbgBl
AGEAZwBlAEkARAAAf3MAcABfADYAZgBhAGUAOABlADgANwBlAGEAYgBjADQAZAAzADEAYQA2ADQA
MAA0ADMAMwBjAGYAZQAxADAAOABiAGUAYgAuAGMAcwBwAHIAbwBqAC4AUAByAG8AcABlAHIAdABp
AGUAcwAuAFIAZQBzAG8AdQByAGMAZQBzAAAAAAAMfV7Izhl/TKsdHDHxrqVKAAiJhF3NgIDMkQi3
elxWGTTgiQMgAAECBggDBhEMBAAAAAAEAQAAAAMGEhAEAAASEAQIABIQAwYSFQMGEhkEAAASFQQA
ABIZBQABARIZBAgAEhUECAASGQQgAQEIBCAAEikEIAASLQUgARIxHAMgABwDIAAOBQACDhwcBCAB
ARwDAAABBSACAQ4OQAEAM1N5c3RlbS5SZXNvdXJjZXMuVG9vbHMuU3Ryb25nbHlUeXBlZFJlc291
cmNlQnVpbGRlcgcyLjAuMC4wAAAGAAESRRFJBCAAEk0GIAIBDhJNBAcBEhUFIAEBEVUIAQACAAAA
AAAIAQAIAAAAAAAeAQABAFQCFldyYXBOb25FeGNlcHRpb25UaHJvd3MBAACwKwAAAAAAAAAAAADO
KwAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwCsAAAAAAAAAAAAAAAAAAAAAX0NvckRsbE1haW4A
bXNjb3JlZS5kbGwAAAAAAP8lACAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAEAEAAAABgAAIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEA
AAAAAEgAAABYQAAA1AIAAAAAAAAAAAAA1AI0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBG
AE8AAAAAAL0E7/4AAAEAAAAAAAAAAAAAAAAAAAAAAD8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAA
AABEAAAAAQBWAGEAcgBGAGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABp
AG8AbgAAAAAAAACwBDQCAAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAABACAAABADAA
MAAwADAAMAA0AGIAMAAAACwAAgABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAAAg
AAAAMAAIAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAwAC4AMAAuADAALgAwAAAAgAAvAAEA
SQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABzAHAAXwA2AGYAYQBlADgAZQA4ADcAZQBhAGIAYwA0
AGQAMwAxAGEANgA0ADAANAAzADMAYwBmAGUAMQAwADgAYgBlAGIALgBjAHMAcAByAG8AagAuAGQA
bABsAAAAAAAoAAIAAQBMAGUAZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQAAAAgAAAAiAAvAAEATwBy
AGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAAAHMAcABfADYAZgBhAGUAOABlADgANwBlAGEA
YgBjADQAZAAzADEAYQA2ADQAMAA0ADMAMwBjAGYAZQAxADAAOABiAGUAYgAuAGMAcwBwAHIAbwBq
AC4AZABsAGwAAAAAADQACAABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAAADAALgAwAC4A
MAAuADAAAAA4AAgAAQBBAHMAcwBlAG0AYgBsAHkAIABWAGUAcgBzAGkAbwBuAAAAMAAuADAALgAw
AC4AMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAwAAADg
OwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
            </ScriptProject>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:PrecedenceConstraints>
        <DTS:PrecedenceConstraint
          DTS:refId="Package\SetUp.PrecedenceConstraints[Constraint]"
          DTS:CreationName=""
          DTS:DTSID="{A2FE5423-A002-49C6-B1CC-5EB22B96999D}"
          DTS:From="Package\SetUp\Get Lineage - Insert Audit Record"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint"
          DTS:To="Package\SetUp\Set Lineage String" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\SetUp.PrecedenceConstraints[Constraint_Check for Incremental Record_To_Get Last Incremental Update]"
          DTS:CreationName=""
          DTS:DTSID="{EF281EAC-31D8-4136-AB75-03A0144AA34C}"
          DTS:From="Package\SetUp\Check for Incremental Record"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint_Check for Incremental Record_To_Get Last Incremental Update"
          DTS:To="Package\SetUp\Get Last Incremental Update" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\SetUp.PrecedenceConstraints[Constraint_Set Lineage String_To_Check for Incremental Record]"
          DTS:CreationName=""
          DTS:DTSID="{408C0B88-1E80-4108-BFFA-28E1254405C7}"
          DTS:From="Package\SetUp\Set Lineage String"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint_Set Lineage String_To_Check for Incremental Record"
          DTS:To="Package\SetUp\Check for Incremental Record" />
      </DTS:PrecedenceConstraints>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Successful Loading Closeout"
      DTS:CreationName="STOCK:SEQUENCE"
      DTS:DTSID="{2466BB36-2BEF-4E03-A68E-9DA863286D99}"
      DTS:ExecutableType="STOCK:SEQUENCE"
      DTS:LocaleID="-1"
      DTS:ObjectName="Successful Loading Closeout">
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\Successful Loading Closeout\Update Incremental Dates"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:DTSID="{27951CFC-B871-42FF-9DB2-2EB36B7FE79D}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Update Incremental Dates"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="1">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{1A8664F3-BE3D-46FF-AEB7-5A71CAFC73DE}"
              SQLTask:SqlStatementSource=" UPDATE log.SSISIncrementalTracking SET LastRunTMST = ?, LastRunDT = ?, UpdateBy = SUSER_SNAME(), LastUpdateTMST = GETDATE() WHERE PackageName = ?&#xA;&#xA;                            " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="0"
                SQLTask:DtsVariableName="System::StartTime"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="7"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="1"
                SQLTask:DtsVariableName="System::StartTime"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="7"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="2"
                SQLTask:DtsVariableName="System::PackageName"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="130"
                SQLTask:ParameterSize="-1" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Successful Loading Closeout\Write Success Record"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:DTSID="{AEBF1901-82DA-4B21-AB29-C14FE7B4A43B}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Write Success Record"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="1">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{1A8664F3-BE3D-46FF-AEB7-5A71CAFC73DE}"
              SQLTask:SqlStatementSource="UPDATE log.[SSISAudit_MDSDQS]&#xA;  SET&#xA;      [BatchID] = ?,&#xA;      [PackageName] = ?,&#xA;      [CompleteTMST] = GETDATE(),&#xA;      [CompletionMessage] = ?,&#xA;      [ExecutionInstanceGUID] = ?,&#xA;      [MDSImportType] = ?,&#xA;      [MDSBatchTag] = ?, &#xA;      [MDSVersionName] = ?,&#xA;      [MDSLogFlag] = ?,&#xA;      [MDSDisableRunBatch] = ?,&#xA;      [RowCountProcessedTotal] = ?,&#xA;      [RowCountFailed] = ?&#xA;FROM [log].[SSISAudit_MDSDQS]&#xA;WHERE [SSISAuditKey] = ?;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="0"
                SQLTask:DtsVariableName="$Package::Param_BatchID"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="3"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="1"
                SQLTask:DtsVariableName="System::PackageName"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="129"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="2"
                SQLTask:DtsVariableName="User::Message_Success"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="129"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="3"
                SQLTask:DtsVariableName="System::VersionGUID"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="129"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="4"
                SQLTask:DtsVariableName="User::MDS_ImportType"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="3"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="5"
                SQLTask:DtsVariableName="User::MDS_BatchTag"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="129"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="7"
                SQLTask:DtsVariableName="User::MDS_LogFlag"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="3"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="8"
                SQLTask:DtsVariableName="$Package::Disable_RunBatch"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="3"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="9"
                SQLTask:DtsVariableName="User::RecordCount_Total"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="3"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="10"
                SQLTask:DtsVariableName="User::RecordCount_Error"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="3"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="11"
                SQLTask:DtsVariableName="User::LineageID"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="3"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="6"
                SQLTask:DtsVariableName="User::MDS_VersionName"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="129"
                SQLTask:ParameterSize="-1" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:PrecedenceConstraints>
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Successful Loading Closeout.PrecedenceConstraints[Constraint]"
          DTS:CreationName=""
          DTS:DTSID="{894F6D67-F351-4FCC-B3A4-DA456D9EEDBF}"
          DTS:From="Package\Successful Loading Closeout\Write Success Record"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint"
          DTS:To="Package\Successful Loading Closeout\Update Incremental Dates" />
      </DTS:PrecedenceConstraints>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint]"
      DTS:CreationName=""
      DTS:DTSID="{B812E16F-E8A8-42F6-B839-67C5A65C0BBF}"
      DTS:From="Package\SetUp"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint"
      DTS:To="Package\Get MDS Version Name" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 1]"
      DTS:CreationName=""
      DTS:DTSID="{22AE2F27-7CE9-4ADA-9D78-2DD4CA36EDCC}"
      DTS:From="Package\Get Portfolios to exclude in DAX"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 1"
      DTS:To="Package\Loops for Each Date to Move data from cube to MDS" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 2]"
      DTS:CreationName=""
      DTS:DTSID="{40777FBF-6B31-4EA7-AE73-47195786E8FD}"
      DTS:From="Package\Loops for Each Date to Move data from cube to MDS"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 2"
      DTS:To="Package\Successful Loading Closeout" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 3]"
      DTS:CreationName=""
      DTS:DTSID="{CEAD0B02-C01E-4054-AC33-3A8FCF2BCD7E}"
      DTS:From="Package\Get MDS Version Number"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 3"
      DTS:To="Package\Get Dates from MDS to pass as variables" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 4]"
      DTS:CreationName=""
      DTS:DTSID="{89EFB684-9FD0-4DF4-AA47-1381DF7CCD32}"
      DTS:From="Package\Loops for Each Date to Move data from cube to MDS"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 4"
      DTS:To="Package\Failure Loading Closeout"
      DTS:Value="1" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 5]"
      DTS:CreationName=""
      DTS:DTSID="{7CDB59AE-569C-4C8D-80FC-BFC799B7A8F5}"
      DTS:From="Package\Get MDS Version Name"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 5"
      DTS:To="Package\Get MDS Version Number" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 6]"
      DTS:CreationName=""
      DTS:DTSID="{C3E5F30D-F881-4DC1-A381-3469F6D5CD87}"
      DTS:From="Package\Get Pools to be exclude in DAX"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 6"
      DTS:To="Package\Get Portfolios to exclude in DAX" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 7]"
      DTS:CreationName=""
      DTS:DTSID="{99892BFD-8D1B-42BA-8B4C-42B9A6991451}"
      DTS:From="Package\Get Dates from MDS to pass as variables"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 7"
      DTS:To="Package\Get Pools to be exclude in DAX" />
  </DTS:PrecedenceConstraints>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="64" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="184,42"
          Id="Package\Failure Loading Closeout\Set RecordCount Error"
          TopLeft="5.50000000000001,5.5" />
        <NodeLayout
          Size="175,42"
          Id="Package\Failure Loading Closeout\Write Failure Record"
          TopLeft="10,107.5" />
        <EdgeLayout
          Id="Package\Failure Loading Closeout.PrecedenceConstraints[Constraint]"
          TopLeft="97.5,47.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="195,205"
          Size="195,248"
          Id="Package\Failure Loading Closeout"
          TopLeft="279.5,1745.5" />
        <NodeLayout
          Size="273,42"
          Id="Package\Get Dates from MDS to pass as variables"
          TopLeft="240.5,721.5" />
        <NodeLayout
          Size="191,42"
          Id="Package\Get MDS Version Name"
          TopLeft="281.5,517.5" />
        <NodeLayout
          Size="201,42"
          Id="Package\Get MDS Version Number"
          TopLeft="276.5,619.5" />
        <NodeLayout
          Size="225,42"
          Id="Package\Get Pools to be exclude in DAX"
          TopLeft="264.5,823.5" />
        <NodeLayout
          Size="229,42"
          Id="Package\Get Portfolios to exclude in DAX"
          TopLeft="262.5,925.5" />
        <NodeLayout
          Size="176,42"
          Id="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg"
          TopLeft="31.5,209.5" />
        <NodeLayout
          Size="228,42"
          Id="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\LOG DAX Query That Was Used"
          TopLeft="5.50000000000004,413.5" />
        <NodeLayout
          Size="206,42"
          Id="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\MDSClearUnexecutedBatch"
          TopLeft="16.5,5.5" />
        <NodeLayout
          Size="172,42"
          Id="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Merge Staging Data"
          TopLeft="33.5,311.5" />
        <NodeLayout
          Size="145,42"
          Id="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Set Batch Tag"
          TopLeft="47,107.5" />
        <EdgeLayout
          Id="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS.PrecedenceConstraints[Constraint]"
          TopLeft="119.5,149.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS.PrecedenceConstraints[Constraint 1]"
          TopLeft="119.5,251.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS.PrecedenceConstraints[Constraint 2]"
          TopLeft="119.5,47.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS.PrecedenceConstraints[Constraint 3]"
          TopLeft="119.5,353.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="239,511"
          Size="239,554"
          Id="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS"
          TopLeft="5.50000000000006,5.5" />
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="250,615"
          Size="250,658"
          Id="Package\Loops for Each Date to Move data from cube to MDS"
          TopLeft="252,1027.5" />
        <NodeLayout
          Size="220,42"
          Id="Package\SetUp\Check for Incremental Record"
          TopLeft="14,209.5" />
        <NodeLayout
          Size="214,42"
          Id="Package\SetUp\Get Last Incremental Update"
          TopLeft="17,311.5" />
        <NodeLayout
          Size="237,42"
          Id="Package\SetUp\Get Lineage - Insert Audit Record"
          TopLeft="5.5,5.5" />
        <NodeLayout
          Size="165,42"
          Id="Package\SetUp\Set Lineage String"
          TopLeft="41.5,107.5" />
        <EdgeLayout
          Id="Package\SetUp.PrecedenceConstraints[Constraint]"
          TopLeft="124,47.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\SetUp.PrecedenceConstraints[Constraint_Check for Incremental Record_To_Get Last Incremental Update]"
          TopLeft="124,251.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\SetUp.PrecedenceConstraints[Constraint_Set Lineage String_To_Check for Incremental Record]"
          TopLeft="124,149.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="248,409"
          Size="248,452"
          Id="Package\SetUp"
          TopLeft="253,5.5" />
        <NodeLayout
          Size="202,42"
          Id="Package\Successful Loading Closeout\Update Incremental Dates"
          TopLeft="5.50000000000001,107.5" />
        <NodeLayout
          Size="180,42"
          Id="Package\Successful Loading Closeout\Write Success Record"
          TopLeft="16.5,5.5" />
        <EdgeLayout
          Id="Package\Successful Loading Closeout.PrecedenceConstraints[Constraint]"
          TopLeft="106.5,47.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="213,205"
          Size="213,248"
          Id="Package\Successful Loading Closeout"
          TopLeft="5.50000000000023,1745.5" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint]"
          TopLeft="377,457.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 1]"
          TopLeft="377,967.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 2]"
          TopLeft="336.666666666667,1685.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-224.666666666667,60"
              Start="0,0"
              End="-224.666666666667,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,20.2289348171701" />
                  <mssgle:CubicBezierSegment
                    Point1="0,20.2289348171701"
                    Point2="0,24.2289348171701"
                    Point3="-4,24.2289348171701" />
                  <mssgle:LineSegment
                    End="-220.666666666667,24.2289348171701" />
                  <mssgle:CubicBezierSegment
                    Point1="-220.666666666667,24.2289348171701"
                    Point2="-224.666666666667,24.2289348171701"
                    Point3="-224.666666666667,28.2289348171701" />
                  <mssgle:LineSegment
                    End="-224.666666666667,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 3]"
          TopLeft="377,661.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 4]"
          TopLeft="417.333333333333,1685.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-40.3333333333333,60"
              Start="0,0"
              End="-40.3333333333333,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,20.2289348171701" />
                  <mssgle:CubicBezierSegment
                    Point1="0,20.2289348171701"
                    Point2="0,24.2289348171701"
                    Point3="-4,24.2289348171701" />
                  <mssgle:LineSegment
                    End="-36.3333333333333,24.2289348171701" />
                  <mssgle:CubicBezierSegment
                    Point1="-36.3333333333333,24.2289348171701"
                    Point2="-40.3333333333333,24.2289348171701"
                    Point3="-40.3333333333333,28.2289348171701" />
                  <mssgle:LineSegment
                    End="-40.3333333333333,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-35.4080143229167,29.2289348171701,30.4826953125,9.7490234375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 5]"
          TopLeft="377,559.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 6]"
          TopLeft="377,865.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 7]"
          TopLeft="377,763.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </Package>
  <TaskHost
    design-time-name="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg">
    <LayoutInfo>
      <GraphLayout
        Capacity="32" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="175,42"
          Id="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Row_Number"
          TopLeft="33.5000000000001,617.5" />
        <NodeLayout
          Size="231,42"
          Id="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Data Conversion Transformation"
          TopLeft="5.50000000000007,515.5" />
        <NodeLayout
          Size="130,42"
          Id="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Row Count"
          TopLeft="56.0000000000001,719.5" />
        <NodeLayout
          Size="123,42"
          Id="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Trim"
          TopLeft="59.5000000000001,413.5" />
        <NodeLayout
          Size="150,42"
          Id="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source"
          TopLeft="46,5.5" />
        <NodeLayout
          Size="173,42"
          Id="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination"
          TopLeft="34.5000000000001,821.5" />
        <NodeLayout
          Size="180,42"
          Id="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Generate Hash Value"
          TopLeft="31,209.5" />
        <NodeLayout
          Size="154,42"
          Id="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Derived Column"
          TopLeft="44,107.5" />
        <NodeLayout
          Size="127,42"
          Id="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\Add Batch"
          TopLeft="57.5,311.5" />
        <EdgeLayout
          Id="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg.Paths[Trim_Output_Data Conversion Transformation]"
          TopLeft="121,455.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg.Paths[Row_Number_Output0_Row Count]"
          TopLeft="121,659.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg.Paths[Output 0]"
          TopLeft="121,251.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg.Paths[Output]"
          TopLeft="121,761.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg.Paths[OLE DB Source Output]"
          TopLeft="121,47.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg.Paths[Derived Column Output1]"
          TopLeft="121,149.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg.Paths[Derived Column Output]"
          TopLeft="121,353.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg.Paths[Data Conversion Transformation_Output_Row_Number]"
          TopLeft="121,557.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
  <PipelineComponentMetadata
    design-time-name="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Source">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <PipelineComponentMetadata
    design-time-name="Package\Loops for Each Date to Move data from cube to MDS\Copies_Data_From_Cube_to_MDS\Import Data into Stg\OLE DB Destination">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>
if(!require('ggplot2')) install.packages('ggplot2') if(!require('scales')) install.packages('scales') library(ggplot2) library(scales) ###################################################### ######       Waterfall Chart Function         ######## ###################################################### # axis: a vector of text for which the Waterfall axis is desired # value: a vector of values for which the Waterfall is desired WaterfallChart <- function (axis, value) {   percenForm <- sum(grepl("%", value)) > 0   commaForm <- sum(grepl(",", value)) > 0   # check if value is in % format   if (percenForm) {     value <- as.numeric(gsub("%", "", value))/100    }   # check if value is in number (,) format   if (commaForm) {     value <- as.numeric(gsub(",", "", value))   }   #plotdata   xAxis <- factor(axis, levels=c(levels(axis), "Total"))   xAxis[length(xAxis) + 1] <- "Total"   #set factor order   xAxis <- factor(xAxis, levels = xAxis[1:length(xAxis)])   plotdata <- data.frame(axis = xAxis)   plotdata$type <- c(ifelse(value > 0, "Increase", "Decrease"), "Total")   plotdata$type <- factor(plotdata$type, levels = c("Increase", "Decrease", "Total"))   plotdata$start <- c(0, cumsum(value))   plotdata$end <- c(cumsum(value), 0)   plotdata$id <- 1:nrow(plotdata)   plotdata$labelPos <- apply(plotdata[, c("start", "end")], 1, max )   # value   # check if value is in % format   value <- c(value, sum(value))   if (percenForm) {     plotdata$value <- paste(value*100,"%",sep="")   }   ggplot(plotdata, aes(fill = type)) +     geom_rect(aes(x = xAxis, xmin = id - 0.45, xmax = id + 0.45, ymin = end, ymax = start, fill = type)) +     scale_fill_manual(labels= c("Increase", "Decrease", "Total"),                       values=c("springgreen3", "brown2", "cyan3"),                       drop = FALSE) +     geom_text(data = plotdata,                aes(id, labelPos, label = comma(value), vjust = -0.3),alpha = 0.6) +     scale_y_continuous(labels = comma)+     theme(legend.title=element_blank(),           axis.title.x = element_blank(),           axis.title.y = element_blank(),           axis.ticks.x=element_blank()) } dataset <- read.csv("C:/Users/tmiwa/Source/Repos/InsightPOC/ISR_DataVisualization/R_IRC/Data/Data - RVisual - Provincial Exposures Waterfall.csv") colnames(dataset) <- c("Province", "issueRate", "debtIssue") WaterfallChart(dataset$Province, dataset$issueRate) WaterfallChart(dataset$Province, dataset$debtIssue)
if(!require('ggplot2')) install.packages('ggplot2') if(!require('scales')) install.packages('scales') library(ggplot2) library(scales) ###################################################### ######       Waterfall Chart Function         ######## ###################################################### # axis: a vector of text for which the Waterfall axis is desired # value: a vector of values for which the Waterfall is desired WaterfallChart <- function (axis, value) {   percenForm <- sum(grepl("%", value)) > 0   commaForm <- sum(grepl(",", value)) > 0   # check if value is in % format   if (percenForm) {     value <- as.numeric(gsub("%", "", value))/100    }   # check if value is in number (,) format   if (commaForm) {     value <- as.numeric(gsub(",", "", value))   }   #plotdata   xAxis <- factor(axis, levels=c(levels(axis), "Total"))   xAxis[length(xAxis) + 1] <- "Total"   #set factor order   xAxis <- factor(xAxis, levels = xAxis[1:length(xAxis)])   plotdata <- data.frame(axis = xAxis)   plotdata$type <- c(ifelse(value > 0, "Increase", "Decrease"), "Total")   plotdata$type <- factor(plotdata$type, levels = c("Increase", "Decrease", "Total"))   plotdata$start <- c(0, cumsum(value))   plotdata$end <- c(cumsum(value), 0)   plotdata$id <- 1:nrow(plotdata)   plotdata$labelPos <- apply(plotdata[, c("start", "end")], 1, max )   # value   # check if value is in % format   value <- c(value, sum(value))   if (percenForm) {     plotdata$value <- paste(value*100,"%",sep="")   }   ggplot(plotdata, aes(fill = type)) +     geom_rect(aes(x = xAxis, xmin = id - 0.45, xmax = id + 0.45, ymin = end, ymax = start, fill = type)) +     scale_fill_manual(labels= c("Increase", "Decrease", "Total"),                       values=c("springgreen3", "brown2", "cyan3"),                       drop = FALSE) +     geom_text(data = plotdata,                aes(id, labelPos, label = comma(value), vjust = -0.3),alpha = 0.6) +     scale_y_continuous(labels = comma)+     theme(legend.title=element_blank(),           axis.title.x = element_blank(),           axis.title.y = element_blank(),           axis.ticks.x=element_blank()) } dataset <- read.csv("Provincial Exposures Data.csv") colnames(dataset) <- c("Province", "issueRate", "debtIssue") WaterfallChart(dataset$Province, dataset$issueRate) WaterfallChart(dataset$Province, dataset$debtIssue) dataset$debtIssueRate <- as.numeric(gsub(",", "", dataset$debtIssue)) dataset$debtIssueRate <- dataset$debtIssueRate/sum(dataset$debtIssueRate) dataset$debtIssueRate <- paste(round(dataset$debtIssueRate * 100, 2), "%", sep = "") WaterfallChart(dataset$Province, dataset$debtIssueRate)
if(!require('ggplot2')) install.packages('ggplot2') if(!require('scales')) install.packages('scales') library(ggplot2) library(scales) ###################################################### ######       Waterfall Chart Function         ######## ###################################################### # axis: a vector of text for which the Waterfall axis is desired # value: a vector of values for which the Waterfall is desired WaterfallChart <- function (axis, value) {   percenForm <- sum(grepl("%", value)) > 0   commaForm <- sum(grepl(",", value)) > 0   # check if value is in % format   if (percenForm) {     value <- as.numeric(gsub("%", "", value))/100    }   # check if value is in number (,) format   if (commaForm) {     value <- as.numeric(gsub(",", "", value))   }   #plotdata   xAxis <- factor(axis, levels=c(levels(axis), "Total"))   xAxis[length(xAxis) + 1] <- "Total"   #set factor order   xAxis <- factor(xAxis, levels = xAxis[1:length(xAxis)])   plotdata <- data.frame(axis = xAxis)   plotdata$type <- c(ifelse(value > 0, "Increase", "Decrease"), "Total")   plotdata$type <- factor(plotdata$type, levels = c("Increase", "Decrease", "Total"))   plotdata$start <- c(0, cumsum(value))   plotdata$end <- c(cumsum(value), 0)   plotdata$id <- 1:nrow(plotdata)   plotdata$labelPos <- apply(plotdata[, c("start", "end")], 1, max )   # value   # check if value is in % format   value <- c(value, sum(value))   if (percenForm) {     plotdata$value <- paste(value*100,"%",sep="")   }   ggplot(plotdata, aes(fill = type)) +     geom_rect(aes(x = xAxis, xmin = id - 0.45, xmax = id + 0.45, ymin = end, ymax = start, fill = type)) +     scale_fill_manual(labels= c("Increase", "Decrease", "Total"),                       values=c("springgreen3", "brown2", "cyan3"),                       drop = FALSE) +     geom_text(data = plotdata,                aes(id, labelPos, label = comma(value), vjust = -0.3),alpha = 0.6) +     scale_y_continuous(labels = comma)+     theme(legend.title=element_blank(),           axis.title.x = element_blank(),           axis.title.y = element_blank(),           axis.ticks.x=element_blank()) } dataset <- read.csv("/Data/Data - RVisual - Provincial Exposures Data.csv") colnames(dataset) <- c("Province", "issueRate", "debtIssue") WaterfallChart(dataset$Province, dataset$issueRate) WaterfallChart(dataset$Province, dataset$debtIssue) dataset$debtIssueRate <- as.numeric(gsub(",", "", dataset$debtIssue)) dataset$debtIssueRate <- dataset$debtIssueRate/sum(dataset$debtIssueRate) dataset$debtIssueRate <- paste(round(dataset$debtIssueRate * 100, 2), "%", sep = "") WaterfallChart(dataset$Province, dataset$debtIssueRate)
if(!require('ggplot2')) install.packages('ggplot2') if(!require('scales')) install.packages('scales') library(ggplot2) library(scales) ###################################################### ######       Waterfall Chart Function         ######## ###################################################### # axis: a vector of text for which the Waterfall axis is desired # value: a vector of values for which the Waterfall is desired WaterfallChart <- function (axis, value) {   percenForm <- sum(grepl("%", value)) > 0   commaForm <- sum(grepl(",", value)) > 0   # check if value is in % format   if (percenForm) {     value <- as.numeric(gsub("%", "", value))/100    }   # check if value is in number (,) format   if (commaForm) {     value <- as.numeric(gsub(",", "", value))   }   #plotdata   xAxis <- factor(axis, levels=c(levels(axis), "Total"))   xAxis[length(xAxis) + 1] <- "Total"   #set factor order   xAxis <- factor(xAxis, levels = xAxis[1:length(xAxis)])   plotdata <- data.frame(axis = xAxis)   plotdata$type <- c(ifelse(value > 0, "Increase", "Decrease"), "Total")   plotdata$type <- factor(plotdata$type, levels = c("Increase", "Decrease", "Total"))   plotdata$start <- c(0, cumsum(value))   plotdata$end <- c(cumsum(value), 0)   plotdata$id <- 1:nrow(plotdata)   plotdata$labelPos <- apply(plotdata[, c("start", "end")], 1, max )   # value   # check if value is in % format   value <- c(value, sum(value))   if (percenForm) {     plotdata$value <- paste(value*100,"%",sep="")   }   ggplot(plotdata, aes(fill = type)) +     geom_rect(aes(x = xAxis, xmin = id - 0.45, xmax = id + 0.45, ymin = end, ymax = start, fill = type)) +     scale_fill_manual(labels= c("Increase", "Decrease", "Total"),                       values=c("springgreen3", "brown2", "cyan3"),                       drop = FALSE) +     geom_text(data = plotdata,                aes(id, labelPos, label = comma(value), vjust = -0.3),alpha = 0.6) +     scale_y_continuous(labels = comma)+     theme(legend.title=element_blank(),           axis.title.x = element_blank(),           axis.title.y = element_blank(),           axis.ticks.x=element_blank()) } dataset <- read.csv("C:/Users/tmiwa/Source/Repos/InsightPOC/ISR_DataVisualization/R_IRC/Data/Data - RVisual - Provincial Exposures Data.csv") colnames(dataset) <- c("Province", "issueRate", "debtIssue") WaterfallChart(dataset$Province, dataset$issueRate) WaterfallChart(dataset$Province, dataset$debtIssue) dataset$debtIssueRate <- as.numeric(gsub(",", "", dataset$debtIssue)) dataset$debtIssueRate <- dataset$debtIssueRate/sum(dataset$debtIssueRate) dataset$debtIssueRate <- paste(round(dataset$debtIssueRate * 100, 2), "%", sep = "") WaterfallChart(dataset$Province, dataset$debtIssueRate)
if(!require('ggplot2')) install.packages('ggplot2') if(!require('scales')) install.packages('scales') library(ggplot2) library(scales) ###################################################### ######       Waterfall Chart Function         ######## ###################################################### # axis: a vector of text for which the Waterfall axis is desired # value: a vector of values for which the Waterfall is desired WaterfallChart <- function (axis, value) {   percenForm <- sum(grepl("%", value)) > 0   commaForm <- sum(grepl(",", value)) > 0   # check if value is in % format   if (percenForm) {     value <- as.numeric(gsub("%", "", value))/100    }   # check if value is in number (,) format   if (commaForm) {     value <- as.numeric(gsub(",", "", value))   }   #plotdata   xAxis <- factor(axis, levels=c(levels(axis), "Total"))   xAxis[length(xAxis) + 1] <- "Total"   #set factor order   xAxis <- factor(xAxis, levels = xAxis[1:length(xAxis)])   plotdata <- data.frame(axis = xAxis)   plotdata$type <- c(ifelse(value > 0, "Increase", "Decrease"), "Total")   plotdata$type <- factor(plotdata$type, levels = c("Increase", "Decrease", "Total"))   plotdata$start <- c(0, cumsum(value))   plotdata$end <- c(cumsum(value), 0)   plotdata$id <- 1:nrow(plotdata)   plotdata$labelPos <- apply(plotdata[, c("start", "end")], 1, max )   # value   # check if value is in % format   value <- c(value, sum(value))   if (percenForm) {     plotdata$value <- paste(value*100,"%",sep="")   }   ggplot(plotdata, aes(fill = type)) +     geom_rect(aes(x = xAxis, xmin = id - 0.45, xmax = id + 0.45, ymin = end, ymax = start, fill = type)) +     scale_fill_manual(labels= c("Increase", "Decrease", "Total"),                       values=c("springgreen3", "brown2", "cyan3"),                       drop = FALSE) +     geom_text(data = plotdata,                aes(id, labelPos, label = comma(value), vjust = -0.3),alpha = 0.6) +     scale_y_continuous(labels = comma)+     theme(legend.title=element_blank(),           axis.title.x = element_blank(),           axis.title.y = element_blank(),           axis.ticks.x=element_blank()) } dataset <- read.csv("C:/Users/tmiwa/Source/Repos/InsightPOC/ISR_DataVisualization/R_IRC/Data/Data - RVisual - Provincial Exposures Waterfall.csv") colnames(dataset) <- c("Province", "issueRate", "debtIssue") WaterfallChart(dataset$Province, dataset$issueRate) WaterfallChart(dataset$Province, dataset$debtIssue) dataset$debtIssueRate <- as.numeric(gsub(",", "", dataset$debtIssue)) dataset$debtIssueRate <- dataset$debtIssueRate/sum(dataset$debtIssueRate) dataset$debtIssueRate <- paste(round(dataset$debtIssueRate * 100, 2), "%", sep = "") WaterfallChart(dataset$Province, dataset$debtIssueRate)
#loading packages if(!require('ggplot2')) install.packages('ggplot2') if(!require('ggrepel')) install.packages('ggrepel') if(!require('grid')) install.packages('grid') if(!require('ggthemes')) install.packages('ggthemes') if(!require('RColorBrewer')) install.packages('RColorBrewer') library(ggplot2) library(ggrepel) library(grid)  library(ggthemes)  library(RColorBrewer)  dataset <- read.csv("C:/Users/tmiwa/Source/Repos/InsightPOC/ISR_DataVisualization/R_IRC/Data/Data - RVisual - Pie of Pie Chart.csv") colnames(dataset) <- c("key", "value", "Class") percenForm <- sum(grepl("%", dataset$value)) > 0 commaForm <- sum(grepl(",", dataset$value)) > 0 # check if value is in % format if (percenForm) {   dataset$value <- as.numeric(gsub("%", "", dataset$value))/100  } # check if value is in number (,) format if (commaForm) {   dataset$value <- as.numeric(gsub(",", "", dataset$value)) } n <- dim(dataset)[1] d1 <- dataset[dataset$Class == "Investment Grade", ] d2 <- dataset[dataset$Class == "High Yield", ] d1.key <- factor(d1$key, levels=c("High Yield", levels(d1$key))) d1.key[length(d1.key) + 1] <- "High Yield" d1.key[2:length(d1.key)] <- d1.key[-length(d1.key)] d1.key[1] <- "High Yield" #set factor order d1.key <- factor(d1.key, levels = d1.key[1:length(d1.key)]) d1.value <- c(sum(d2$value), d1$value) d1 <- data.frame(key = d1.key, value = d1.value) d1$percentage <- d1$value / sum(d1$value) d1$text <- paste(round(100 * d1$value / sum(d1$value), 2), "%", sep = "") d1$midPercen <- cumsum(c(0, d1$percentage[-length(d1$percentage)])) +              d1$percentage / 2 offset1 <- 1/4 - d1$midPercen[1] d1$midPercen <- d1$midPercen + offset1 d2$percentage <- d2$value / sum(d2$value) d2$textPercen <- d2$value / (sum(dataset$value)) d2$key <- factor(d2$key, levels = d2$key[1:length(d2$key)]) d2$text <- paste(round(100 * d2$textPercen, 2), "%", sep = "") d2$midPercen <- cumsum(c(0, d2$percentage[-length(d2$percentage)])) +                    d2$percentage / 2 ####===========  #   Function ####===========  # offset: percentage funcCircleCoords <- function(center.x, center.y, r = 1, npoints = ncol(plot.data), offset = 0){   #Adapted from Joran's response to http://stackoverflow.com/questions/6862742/draw-a-circle-with-ggplot2   tt <- seq(0,2*pi,length.out = npoints) + 2*pi*offset   yy <- center.y + r * cos(tt)   xx <- center.x + r * sin(tt)   return(data.frame(x = xx, y = yy)) } # pie chart pie1 <- NULL pixel <- 2^16 r1 <- 1 pie1 <- funcCircleCoords(0, 0, r1, pixel, offset1) pie1$group <- c(rep(d1$key, pixel * d1$percentage),                              rep(d1$key[length(d1$key)],                                   pixel - length(rep(d1$key, pixel * d1$percentage)))) pie1$group <- factor(pie1$group) # index of new group groupChangePos <- cumsum(floor(pixel * d1$percentage)) groupChangePos <- groupChangePos[-length(groupChangePos)] + 1 n1 <- dim(d1)[1] pie1Sep <- NULL pie1Sep <- pie1[c(1, groupChangePos+1),] pie1SepC <- pie1Sep pie1SepC$x <- 0 pie1SepC$y <- 0 pie1Sep <- rbind(pie1Sep, pie1SepC) pie1$x[groupChangePos+1] <- pie1$x[groupChangePos] pie1$y[groupChangePos+1] <- pie1$y[groupChangePos] pie1$x[groupChangePos-2] <- pie1$x[groupChangePos] pie1$y[groupChangePos-2] <- pie1$y[groupChangePos] pie1$x[2] <- pie1$x[1] pie1$y[2] <- pie1$y[1] pie1$x[pixel-1] <- pie1$x[pixel] pie1$y[pixel-1] <- pie1$y[pixel] pie1$x[groupChangePos] <- 0 pie1$y[groupChangePos] <- 0 pie1$x[groupChangePos-1] <- 0 pie1$y[groupChangePos-1] <- 0 pie1$x[1] <- 0 pie1$y[1] <- 0 pie1$x[pixel] <- 0 pie1$y[pixel] <- 0 levels(pie1$group) <- levels(d1$key) # other pie2 <- NULL c2 <- 2.5 r2 <- 0.5 pie2 <- funcCircleCoords(c2, 0, r2, pixel) pie2$group <- c(rep(d2$key, pixel * d2$percentage),                              rep(d2$key[length(d2$key)],                                   pixel - length(rep(d2$key, pixel * d2$percentage)))) pie2$group <- factor(pie2$group) # index of new group groupChangePos2 <- cumsum(floor(pixel * d2$percentage)) groupChangePos2 <- groupChangePos2[-length(groupChangePos2)] + 1 n2 <- dim(d2)[1] pie2Sep <- NULL pie2Sep <- pie2[c(1, groupChangePos2+1),] pie2SepC <- pie2Sep pie2SepC$x <- c2 pie2SepC$y <- 0 pie2Sep <- rbind(pie2Sep, pie2SepC) pie2$x[groupChangePos2+1] <- pie2$x[groupChangePos2] pie2$y[groupChangePos2+1] <- pie2$y[groupChangePos2] pie2$x[groupChangePos2-2] <- pie2$x[groupChangePos2] pie2$y[groupChangePos2-2] <- pie2$y[groupChangePos2] pie2$x[2] <- pie2$x[1] pie2$y[2] <- pie2$y[1] pie2$x[pixel-1] <- pie2$x[pixel] pie2$y[pixel-1] <- pie2$y[pixel] pie2$x[groupChangePos2] <- c2 pie2$y[groupChangePos2] <- 0 pie2$x[groupChangePos2-1] <- c2 pie2$y[groupChangePos2-1] <- 0 pie2$x[1] <- c2 pie2$y[1] <- 0 pie2$x[pixel] <- c2 pie2$y[pixel] <- 0 levels(pie2$group) <- levels(d2$key) x1 <- 1.2 * r1 * sin(offset1 * 2 * pi)  y1 <- 1.2 * r1 * cos(offset1 * 2 * pi)  x2 <- x1 + (c2 - x1) * 0.6  y2 <- y1 + (r2 - y1) * 0.6  l <- data.frame(x = c(x1, x2, x1, x2), y <- c(y1, y2, -y1, -y2),                 group = c(1, 1, 2, 2)) colnames(l) <- c("x", "y", "group") blank_theme <- theme_minimal()+   theme(     axis.title.x = element_blank(),     axis.title.y = element_blank(),     panel.border = element_blank(),     plot.title=element_blank()) +   theme(axis.text.x=element_blank()) +    theme(legend.position="right") +    theme(panel.grid=element_blank()) +   theme(axis.text=element_blank()) +   theme(legend.title = element_blank())  ggplot() + geom_polygon(data=pie1,aes(x,y,fill = group)) +   geom_polygon(data=pie2,aes(x,y,fill = group)) +    geom_text_repel(data=d1,                    aes(x=1.2*r1*sin(midPercen*2*pi),y=1.2*r1*cos(midPercen*2*pi),                        label = paste(key, "\n", text)),                   alpha = 0.6)+   geom_text_repel(data=d2,                    aes(x=c2 + 1.2*r2*sin(midPercen*2*pi),y=1.2*r2*cos(midPercen*2*pi),                        label = paste(key, "\n", text)),                   alpha = 0.6)+   geom_text(aes(x = c2, y = r2 * 1.5, label = "High Yield")) +    geom_line(data = l, aes(x, y, group = group),linetype="dotted",  alpha = 0.6) +   geom_line(data = pie1Sep, aes(x, y, group = group), col = "white", alpha = 0.6, size = 1) +   geom_line(data = pie2Sep, aes(x, y, group = group), col = "white", alpha = 0.6, size = 1) +   coord_fixed(ratio = 1) +   scale_fill_manual(values = colorRampPalette(c(brewer.pal(9, "PuBuGn")[4:7], brewer.pal(9, "Blues")[8:2]))(n+1)) +   blank_theme 
#loading packages if(!require('ggplot2')) install.packages('ggplot2') if(!require('ggrepel')) install.packages('ggrepel') if(!require('grid')) install.packages('grid') if(!require('ggthemes')) install.packages('ggthemes') if(!require('RColorBrewer')) install.packages('RColorBrewer') library(ggplot2) library(ggrepel) library(grid)  library(ggthemes)  library(RColorBrewer)  dataset <- read.csv("C:/Users/tmiwa/Source/Repos/InsightPOC/ISR_DataVisualization/R_IRC/Data/Data - RVisual - Pie of Pie Chart.csv") colnames(dataset) <- c("key", "value", "Class") percenForm <- sum(grepl("%", dataset$value)) > 0 commaForm <- sum(grepl(",", dataset$value)) > 0 # check if value is in % format if (percenForm) {   dataset$value <- as.numeric(gsub("%", "", dataset$value))/100  } # check if value is in number (,) format if (commaForm) {   dataset$value <- as.numeric(gsub(",", "", dataset$value)) } n <- dim(dataset)[1] d1 <- dataset[dataset$Class == "Investment Grade", ] d2 <- dataset[dataset$Class == "High Yield", ] d1.key <- factor(d1$key, levels=c("High Yield", levels(d1$key))) d1.key[length(d1.key) + 1] <- "High Yield" d1.key[2:length(d1.key)] <- d1.key[-length(d1.key)] d1.key[1] <- "High Yield" #set factor order d1.key <- factor(d1.key, levels = d1.key[1:length(d1.key)]) d1.value <- c(sum(d2$value), d1$value) d1 <- data.frame(key = d1.key, value = d1.value) d1$percentage <- d1$value / sum(d1$value) d1$text <- paste(round(100 * d1$value / sum(d1$value), 2), "%", sep = "") d1$midPercen <- cumsum(c(0, d1$percentage[-length(d1$percentage)])) +              d1$percentage / 2 offset1 <- 1/4 - d1$midPercen[1] d1$midPercen <- d1$midPercen + offset1 d2$percentage <- d2$value / sum(d2$value) d2$textPercen <- d2$value / (sum(dataset$value)) d2$key <- factor(d2$key, levels = d2$key[1:length(d2$key)]) d2$text <- paste(round(100 * d2$textPercen, 2), "%", sep = "") d2$midPercen <- cumsum(c(0, d2$percentage[-length(d2$percentage)])) +                    d2$percentage / 2 ####===========  #   Function ####===========  # offset: percentage funcCircleCoords <- function(center.x, center.y, r = 1, npoints = ncol(plot.data), offset = 0){   #Adapted from Joran's response to http://stackoverflow.com/questions/6862742/draw-a-circle-with-ggplot2   tt <- seq(0,2*pi,length.out = npoints) + 2*pi*offset   yy <- center.y + r * cos(tt)   xx <- center.x + r * sin(tt)   return(data.frame(x = xx, y = yy)) } # pie chart pie1 <- NULL pixel <- 2^16 r1 <- 1 pie1 <- funcCircleCoords(0, 0, r1, pixel, offset1) pie1$group <- c(rep(d1$key, pixel * d1$percentage),                              rep(d1$key[length(d1$key)],                                   pixel - length(rep(d1$key, pixel * d1$percentage)))) pie1$group <- factor(pie1$group) # index of new group groupChangePos <- cumsum(floor(pixel * d1$percentage)) groupChangePos <- groupChangePos[-length(groupChangePos)] + 1 n1 <- dim(d1)[1] pie1Sep <- NULL pie1Sep <- pie1[c(1, groupChangePos+1),] pie1SepC <- pie1Sep pie1SepC$x <- 0 pie1SepC$y <- 0 pie1Sep <- rbind(pie1Sep, pie1SepC) pie1$x[groupChangePos+1] <- pie1$x[groupChangePos] pie1$y[groupChangePos+1] <- pie1$y[groupChangePos] pie1$x[groupChangePos-2] <- pie1$x[groupChangePos] pie1$y[groupChangePos-2] <- pie1$y[groupChangePos] pie1$x[2] <- pie1$x[1] pie1$y[2] <- pie1$y[1] pie1$x[pixel-1] <- pie1$x[pixel] pie1$y[pixel-1] <- pie1$y[pixel] pie1$x[groupChangePos] <- 0 pie1$y[groupChangePos] <- 0 pie1$x[groupChangePos-1] <- 0 pie1$y[groupChangePos-1] <- 0 pie1$x[1] <- 0 pie1$y[1] <- 0 pie1$x[pixel] <- 0 pie1$y[pixel] <- 0 levels(pie1$group) <- levels(d1$key) # other pie2 <- NULL c2 <- 2.5 r2 <- 0.5 pie2 <- funcCircleCoords(c2, 0, r2, pixel) pie2$group <- c(rep(d2$key, pixel * d2$percentage),                              rep(d2$key[length(d2$key)],                                   pixel - length(rep(d2$key, pixel * d2$percentage)))) pie2$group <- factor(pie2$group) # index of new group groupChangePos2 <- cumsum(floor(pixel * d2$percentage)) groupChangePos2 <- groupChangePos2[-length(groupChangePos2)] + 1 n2 <- dim(d2)[1] pie2Sep <- NULL pie2Sep <- pie2[c(1, groupChangePos2+1),] pie2SepC <- pie2Sep pie2SepC$x <- c2 pie2SepC$y <- 0 pie2Sep <- rbind(pie2Sep, pie2SepC) pie2$x[groupChangePos2+1] <- pie2$x[groupChangePos2] pie2$y[groupChangePos2+1] <- pie2$y[groupChangePos2] pie2$x[groupChangePos2-2] <- pie2$x[groupChangePos2] pie2$y[groupChangePos2-2] <- pie2$y[groupChangePos2] pie2$x[2] <- pie2$x[1] pie2$y[2] <- pie2$y[1] pie2$x[pixel-1] <- pie2$x[pixel] pie2$y[pixel-1] <- pie2$y[pixel] pie2$x[groupChangePos2] <- c2 pie2$y[groupChangePos2] <- 0 pie2$x[groupChangePos2-1] <- c2 pie2$y[groupChangePos2-1] <- 0 pie2$x[1] <- c2 pie2$y[1] <- 0 pie2$x[pixel] <- c2 pie2$y[pixel] <- 0 levels(pie2$group) <- levels(d2$key) x1 <- 1.2 * r1 * sin(offset1 * 2 * pi)  y1 <- 1.2 * r1 * cos(offset1 * 2 * pi)  x2 <- x1 + (c2 - x1) * 0.6  y2 <- y1 + (r2 - y1) * 0.6  l <- data.frame(x = c(x1, x2, x1, x2), y <- c(y1, y2, -y1, -y2),                 group = c(1, 1, 2, 2)) colnames(l) <- c("x", "y", "group") blank_theme <- theme_minimal()+   theme(     axis.title.x = element_blank(),     axis.title.y = element_blank(),     panel.border = element_blank(),     plot.title=element_blank()) +   theme(axis.text.x=element_blank()) +    theme(legend.position="right") +    theme(panel.grid=element_blank()) +   theme(axis.text=element_blank()) +   theme(legend.title = element_blank())  ggplot() + geom_polygon(data=pie1,aes(x,y,fill = group)) +   geom_polygon(data=pie2,aes(x,y,fill = group)) +    geom_text_repel(data=d1,                    aes(x=1.2*r1*sin(midPercen*2*pi),y=1.2*r1*cos(midPercen*2*pi),                        label = paste(key, "\n", text)),                   alpha = 0.6)+   geom_text_repel(data=d2,                    aes(x=c2 + 1.2*r2*sin(midPercen*2*pi),y=1.2*r2*cos(midPercen*2*pi),                        label = paste(key, "\n", text)),                   alpha = 0.6)+   geom_text(aes(x = c2, y = r2 * 1.5, label = "High Yield")) +    geom_line(data = l, aes(x, y, group = group),linetype="dotted",  alpha = 0.6) +   geom_line(data = pie1Sep, aes(x, y, group = group), col = "white", alpha = 0.6, size = 1) +   geom_line(data = pie2Sep, aes(x, y, group = group), col = "white", alpha = 0.6, size = 1) +   coord_fixed(ratio = 1) +   scale_fill_manual(values = colorRampPalette(c(brewer.pal(9, "PuBuGn")[4:7], brewer.pal(9, "Blues")[8:2]))(n+1)) +   blank_theme 
#loading packages if (!require('dplyr')) install.packages('dplyr') if (!require('ggplot2')) install.packages('ggplot2') if (!require('ggrepel')) install.packages('ggrepel') if (!require('ggthemes')) install.packages('ggthemes') if (!require('grid')) install.packages('grid') if (!require('plotly')) install.packages('plotly') if (!require('raster')) install.packages('raster') if (!require('RColorBrewer')) install.packages('RColorBrewer') if (!require('reshape')) install.packages('reshape') if (!require('scales')) install.packages('scales') library(dplyr) library(ggplot2) library(ggrepel) library(ggthemes) library(grid) library(plotly) library(raster) library(RColorBrewer) library(reshape) library(scales)
#loading packages if (!require('dplyr')) install.packages('dplyr') if (!require('ggplot2')) install.packages('ggplot2') if (!require('ggrepel')) install.packages('ggrepel') if (!require('ggthemes')) install.packages('ggthemes') if (!require('grid')) install.packages('grid') if (!require('plotly')) install.packages('plotly') if (!require('raster')) install.packages('raster') if (!require('RColorBrewer')) install.packages('RColorBrewer') if (!require('reshape')) install.packages('reshape') if (!require('scales')) install.packages('scales') library(dplyr) library(ggplot2) library(ggrepel) library(ggthemes) library(grid) library(plotly) library(raster) library(RColorBrewer) library(reshape) library(scales)
#loading packages if (!require('dplyr')) install.packages('dplyr') if (!require('ggplot2')) install.packages('ggplot2') if (!require('ggrepel')) install.packages('ggrepel') if (!require('ggthemes')) install.packages('ggthemes') if (!require('grid')) install.packages('grid') if (!require('plotly')) install.packages('plotly') if (!require('raster')) install.packages('raster') if (!require('RColorBrewer')) install.packages('RColorBrewer') if (!require('reshape')) install.packages('reshape') if (!require('scales')) install.packages('scales') library(dplyr) library(ggplot2) library(ggrepel) library(ggthemes) library(grid) library(plotly) library(raster) library(RColorBrewer) library(reshape) library(scales)
#loading packages if (!require('dplyr')) install.packages('dplyr') if (!require('ggplot2')) install.packages('ggplot2') if (!require('ggrepel')) install.packages('ggrepel') if (!require('ggthemes')) install.packages('ggthemes') if (!require('grid')) install.packages('grid') if (!require('plotly')) install.packages('plotly') if (!require('raster')) install.packages('raster') if (!require('RColorBrewer')) install.packages('RColorBrewer') if (!require('reshape')) install.packages('reshape') if (!require('scales')) install.packages('scales') library(dplyr) library(ggplot2) library(ggrepel) library(ggthemes) library(grid) library(plotly) library(raster) library(RColorBrewer) library(reshape) library(scales)
#loading packages if (!require('dplyr')) install.packages('dplyr') if (!require('ggplot2')) install.packages('ggplot2') if (!require('ggrepel')) install.packages('ggrepel') if (!require('ggthemes')) install.packages('ggthemes') if (!require('grid')) install.packages('grid') if (!require('plotly')) install.packages('plotly') if (!require('raster')) install.packages('raster') if (!require('RColorBrewer')) install.packages('RColorBrewer') if (!require('reshape')) install.packages('reshape') if (!require('scales')) install.packages('scales') library(dplyr) library(ggplot2) library(ggrepel) library(ggthemes) library(grid) library(plotly) library(raster) library(RColorBrewer) library(reshape) library(scales)
#loading packages if (!require('dplyr')) install.packages('dplyr') if (!require('ggplot2')) install.packages('ggplot2') if (!require('ggrepel')) install.packages('ggrepel') if (!require('ggthemes')) install.packages('ggthemes') if (!require('grid')) install.packages('grid') if (!require('plotly')) install.packages('plotly') if (!require('raster')) install.packages('raster') if (!require('RColorBrewer')) install.packages('RColorBrewer') if (!require('reshape')) install.packages('reshape') if (!require('scales')) install.packages('scales') library(dplyr) library(ggplot2) library(ggrepel) library(ggthemes) library(grid) library(plotly) library(raster) library(RColorBrewer) library(reshape) library(scales)
#loading packages if (!require('dplyr')) install.packages('dplyr') if (!require('ggplot2')) install.packages('ggplot2') if (!require('ggrepel')) install.packages('ggrepel') if (!require('ggthemes')) install.packages('ggthemes') if (!require('grid')) install.packages('grid') if (!require('plotly')) install.packages('plotly') if (!require('raster')) install.packages('raster') if (!require('RColorBrewer')) install.packages('RColorBrewer') if (!require('reshape')) install.packages('reshape') if (!require('scales')) install.packages('scales') library(dplyr) library(ggplot2) library(ggrepel) library(ggthemes) library(grid) library(plotly) library(raster) library(RColorBrewer) library(reshape) library(scales)
v <- toString(getRversion())
getRversion()
toString(getRversion())
v <- toString(getRversion()) v
v <- toString(getRversion()) v
